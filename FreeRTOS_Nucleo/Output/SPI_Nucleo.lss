
Output/SPI_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f80  08000194  08000194  00008194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08004114  08004114  0000c114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08004118  08004118  0000c118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000020  20000000  0800411c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00002684  20000020  0800413c  00010020  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  200026a4  080067c0  00010020  2**0
                  ALLOC
  7 .ARM.attributes 00000033  00000000  00000000  00010020  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000f866  00000000  00000000  00010053  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002ac1  00000000  00000000  0001f8b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ab78  00000000  00000000  0002237a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ac8  00000000  00000000  0002cef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001178  00000000  00000000  0002d9ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004f7e  00000000  00000000  0002eb32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003630  00000000  00000000  00033ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000046  00000000  00000000  000370e0  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000022e4  00000000  00000000  00037128  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <deregister_tm_clones>:
 8000194:	b508      	push	{r3, lr}
 8000196:	f240 0020 	movw	r0, #32
 800019a:	4b07      	ldr	r3, [pc, #28]	; (80001b8 <deregister_tm_clones+0x24>)
 800019c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001a0:	1a1b      	subs	r3, r3, r0
 80001a2:	2b06      	cmp	r3, #6
 80001a4:	d800      	bhi.n	80001a8 <deregister_tm_clones+0x14>
 80001a6:	bd08      	pop	{r3, pc}
 80001a8:	f240 0300 	movw	r3, #0
 80001ac:	f2c0 0300 	movt	r3, #0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d0f8      	beq.n	80001a6 <deregister_tm_clones+0x12>
 80001b4:	4798      	blx	r3
 80001b6:	e7f6      	b.n	80001a6 <deregister_tm_clones+0x12>
 80001b8:	20000023 	.word	0x20000023

080001bc <register_tm_clones>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	f240 0020 	movw	r0, #32
 80001c2:	f240 0320 	movw	r3, #32
 80001c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001ce:	1a1b      	subs	r3, r3, r0
 80001d0:	109b      	asrs	r3, r3, #2
 80001d2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80001d6:	1059      	asrs	r1, r3, #1
 80001d8:	d100      	bne.n	80001dc <register_tm_clones+0x20>
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	f240 0200 	movw	r2, #0
 80001e0:	f2c0 0200 	movt	r2, #0
 80001e4:	2a00      	cmp	r2, #0
 80001e6:	d0f8      	beq.n	80001da <register_tm_clones+0x1e>
 80001e8:	4790      	blx	r2
 80001ea:	e7f6      	b.n	80001da <register_tm_clones+0x1e>

080001ec <__do_global_dtors_aux>:
 80001ec:	b510      	push	{r4, lr}
 80001ee:	f240 0420 	movw	r4, #32
 80001f2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80001f6:	7823      	ldrb	r3, [r4, #0]
 80001f8:	b973      	cbnz	r3, 8000218 <__do_global_dtors_aux+0x2c>
 80001fa:	f7ff ffcb 	bl	8000194 <deregister_tm_clones>
 80001fe:	f240 0300 	movw	r3, #0
 8000202:	f2c0 0300 	movt	r3, #0
 8000206:	b12b      	cbz	r3, 8000214 <__do_global_dtors_aux+0x28>
 8000208:	f244 00fc 	movw	r0, #16636	; 0x40fc
 800020c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000210:	f3af 8000 	nop.w
 8000214:	2301      	movs	r3, #1
 8000216:	7023      	strb	r3, [r4, #0]
 8000218:	bd10      	pop	{r4, pc}
 800021a:	bf00      	nop

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	f240 0300 	movw	r3, #0
 8000222:	f2c0 0300 	movt	r3, #0
 8000226:	b14b      	cbz	r3, 800023c <frame_dummy+0x20>
 8000228:	f244 00fc 	movw	r0, #16636	; 0x40fc
 800022c:	f240 0124 	movw	r1, #36	; 0x24
 8000230:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000234:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000238:	f3af 8000 	nop.w
 800023c:	f240 0020 	movw	r0, #32
 8000240:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000244:	6803      	ldr	r3, [r0, #0]
 8000246:	b12b      	cbz	r3, 8000254 <frame_dummy+0x38>
 8000248:	f240 0300 	movw	r3, #0
 800024c:	f2c0 0300 	movt	r3, #0
 8000250:	b103      	cbz	r3, 8000254 <frame_dummy+0x38>
 8000252:	4798      	blx	r3
 8000254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000258:	e7b0      	b.n	80001bc <register_tm_clones>
 800025a:	bf00      	nop

0800025c <__libc_init_array>:
 800025c:	b570      	push	{r4, r5, r6, lr}
 800025e:	f244 1614 	movw	r6, #16660	; 0x4114
 8000262:	f244 1514 	movw	r5, #16660	; 0x4114
 8000266:	f6c0 0600 	movt	r6, #2048	; 0x800
 800026a:	f6c0 0500 	movt	r5, #2048	; 0x800
 800026e:	1b76      	subs	r6, r6, r5
 8000270:	10b6      	asrs	r6, r6, #2
 8000272:	bf1c      	itt	ne
 8000274:	3d04      	subne	r5, #4
 8000276:	2400      	movne	r4, #0
 8000278:	d005      	beq.n	8000286 <__libc_init_array+0x2a>
 800027a:	3401      	adds	r4, #1
 800027c:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8000280:	4798      	blx	r3
 8000282:	42a6      	cmp	r6, r4
 8000284:	d1f9      	bne.n	800027a <__libc_init_array+0x1e>
 8000286:	f244 1618 	movw	r6, #16664	; 0x4118
 800028a:	f244 1514 	movw	r5, #16660	; 0x4114
 800028e:	f6c0 0500 	movt	r5, #2048	; 0x800
 8000292:	f6c0 0600 	movt	r6, #2048	; 0x800
 8000296:	1b76      	subs	r6, r6, r5
 8000298:	f003 ff30 	bl	80040fc <_init>
 800029c:	10b6      	asrs	r6, r6, #2
 800029e:	bf1c      	itt	ne
 80002a0:	3d04      	subne	r5, #4
 80002a2:	2400      	movne	r4, #0
 80002a4:	d006      	beq.n	80002b4 <__libc_init_array+0x58>
 80002a6:	3401      	adds	r4, #1
 80002a8:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80002ac:	4798      	blx	r3
 80002ae:	42a6      	cmp	r6, r4
 80002b0:	d1f9      	bne.n	80002a6 <__libc_init_array+0x4a>
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	bd70      	pop	{r4, r5, r6, pc}
 80002b6:	bf00      	nop

080002b8 <memcpy>:
 80002b8:	2a0f      	cmp	r2, #15
 80002ba:	b4f0      	push	{r4, r5, r6, r7}
 80002bc:	d945      	bls.n	800034a <memcpy+0x92>
 80002be:	ea40 0301 	orr.w	r3, r0, r1
 80002c2:	079b      	lsls	r3, r3, #30
 80002c4:	d145      	bne.n	8000352 <memcpy+0x9a>
 80002c6:	f1a2 0710 	sub.w	r7, r2, #16
 80002ca:	460c      	mov	r4, r1
 80002cc:	4603      	mov	r3, r0
 80002ce:	093f      	lsrs	r7, r7, #4
 80002d0:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 80002d4:	3610      	adds	r6, #16
 80002d6:	6825      	ldr	r5, [r4, #0]
 80002d8:	3310      	adds	r3, #16
 80002da:	3410      	adds	r4, #16
 80002dc:	f843 5c10 	str.w	r5, [r3, #-16]
 80002e0:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 80002e4:	f843 5c0c 	str.w	r5, [r3, #-12]
 80002e8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80002ec:	f843 5c08 	str.w	r5, [r3, #-8]
 80002f0:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80002f4:	f843 5c04 	str.w	r5, [r3, #-4]
 80002f8:	42b3      	cmp	r3, r6
 80002fa:	d1ec      	bne.n	80002d6 <memcpy+0x1e>
 80002fc:	1c7b      	adds	r3, r7, #1
 80002fe:	f002 0c0f 	and.w	ip, r2, #15
 8000302:	f1bc 0f03 	cmp.w	ip, #3
 8000306:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800030a:	4419      	add	r1, r3
 800030c:	4403      	add	r3, r0
 800030e:	d922      	bls.n	8000356 <memcpy+0x9e>
 8000310:	460e      	mov	r6, r1
 8000312:	461d      	mov	r5, r3
 8000314:	4664      	mov	r4, ip
 8000316:	f856 7b04 	ldr.w	r7, [r6], #4
 800031a:	3c04      	subs	r4, #4
 800031c:	2c03      	cmp	r4, #3
 800031e:	f845 7b04 	str.w	r7, [r5], #4
 8000322:	d8f8      	bhi.n	8000316 <memcpy+0x5e>
 8000324:	f1ac 0404 	sub.w	r4, ip, #4
 8000328:	f002 0203 	and.w	r2, r2, #3
 800032c:	f024 0403 	bic.w	r4, r4, #3
 8000330:	3404      	adds	r4, #4
 8000332:	4423      	add	r3, r4
 8000334:	4421      	add	r1, r4
 8000336:	b132      	cbz	r2, 8000346 <memcpy+0x8e>
 8000338:	440a      	add	r2, r1
 800033a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800033e:	4291      	cmp	r1, r2
 8000340:	f803 4b01 	strb.w	r4, [r3], #1
 8000344:	d1f9      	bne.n	800033a <memcpy+0x82>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	4770      	bx	lr
 800034a:	4603      	mov	r3, r0
 800034c:	2a00      	cmp	r2, #0
 800034e:	d1f3      	bne.n	8000338 <memcpy+0x80>
 8000350:	e7f9      	b.n	8000346 <memcpy+0x8e>
 8000352:	4603      	mov	r3, r0
 8000354:	e7f0      	b.n	8000338 <memcpy+0x80>
 8000356:	4662      	mov	r2, ip
 8000358:	2a00      	cmp	r2, #0
 800035a:	d1ed      	bne.n	8000338 <memcpy+0x80>
 800035c:	e7f3      	b.n	8000346 <memcpy+0x8e>
 800035e:	bf00      	nop

08000360 <NVIC_Init>:
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 8000360:	78c3      	ldrb	r3, [r0, #3]
 8000362:	2b01      	cmp	r3, #1
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	4604      	mov	r4, r0
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 8000368:	d906      	bls.n	8000378 <NVIC_Init+0x18>
 800036a:	f643 702c 	movw	r0, #16172	; 0x3f2c
 800036e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000372:	218d      	movs	r1, #141	; 0x8d
 8000374:	f001 f9f4 	bl	8001760 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 8000378:	7863      	ldrb	r3, [r4, #1]
 800037a:	2b0f      	cmp	r3, #15
 800037c:	d847      	bhi.n	800040e <NVIC_Init+0xae>
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 800037e:	78a3      	ldrb	r3, [r4, #2]
 8000380:	2b0f      	cmp	r3, #15
 8000382:	d83c      	bhi.n	80003fe <NVIC_Init+0x9e>
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000384:	78e3      	ldrb	r3, [r4, #3]
 8000386:	b973      	cbnz	r3, 80003a6 <NVIC_Init+0x46>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000388:	7822      	ldrb	r2, [r4, #0]
 800038a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800038e:	0951      	lsrs	r1, r2, #5
 8000390:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000392:	f002 021f 	and.w	r2, r2, #31
 8000396:	2001      	movs	r0, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000398:	f2ce 0300 	movt	r3, #57344	; 0xe000
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800039c:	fa00 f202 	lsl.w	r2, r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80003a0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80003a4:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80003a6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80003aa:	f2ce 0300 	movt	r3, #57344	; 0xe000
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80003ae:	7866      	ldrb	r6, [r4, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80003b0:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80003b2:	78a0      	ldrb	r0, [r4, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80003b4:	7823      	ldrb	r3, [r4, #0]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80003b6:	43d2      	mvns	r2, r2
 80003b8:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 80003bc:	f1c2 0104 	rsb	r1, r2, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80003c0:	b2c9      	uxtb	r1, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80003c2:	250f      	movs	r5, #15

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80003c4:	fa06 f101 	lsl.w	r1, r6, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80003c8:	fa45 f202 	asr.w	r2, r5, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80003cc:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80003ce:	4002      	ands	r2, r0
 80003d0:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80003d2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80003d6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 80003da:	0112      	lsls	r2, r2, #4
 80003dc:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80003de:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80003e2:	7822      	ldrb	r2, [r4, #0]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80003e4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80003e8:	f002 011f 	and.w	r1, r2, #31
 80003ec:	2001      	movs	r0, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80003ee:	0952      	lsrs	r2, r2, #5
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80003f0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80003f4:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80003f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80003fc:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 80003fe:	f643 702c 	movw	r0, #16172	; 0x3f2c
 8000402:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000406:	218f      	movs	r1, #143	; 0x8f
 8000408:	f001 f9aa 	bl	8001760 <assert_failed>
 800040c:	e7ba      	b.n	8000384 <NVIC_Init+0x24>
{
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 800040e:	f643 702c 	movw	r0, #16172	; 0x3f2c
 8000412:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000416:	218e      	movs	r1, #142	; 0x8e
 8000418:	f001 f9a2 	bl	8001760 <assert_failed>
 800041c:	e7af      	b.n	800037e <NVIC_Init+0x1e>
 800041e:	bf00      	nop

08000420 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800042e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000432:	4290      	cmp	r0, r2
 8000434:	bf18      	it	ne
 8000436:	4298      	cmpne	r0, r3
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000438:	4605      	mov	r5, r0
 800043a:	4688      	mov	r8, r1
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 800043c:	d00b      	beq.n	8000456 <GPIO_Init+0x36>
 800043e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000442:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000446:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800044a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800044e:	4290      	cmp	r0, r2
 8000450:	bf18      	it	ne
 8000452:	4298      	cmpne	r0, r3
 8000454:	d168      	bne.n	8000528 <GPIO_Init+0x108>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 8000456:	f8b8 3000 	ldrh.w	r3, [r8]
 800045a:	2b00      	cmp	r3, #0
 800045c:	f000 80b3 	beq.w	80005c6 <GPIO_Init+0x1a6>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 8000460:	f898 3004 	ldrb.w	r3, [r8, #4]
 8000464:	2b03      	cmp	r3, #3
 8000466:	f200 80a6 	bhi.w	80005b6 <GPIO_Init+0x196>
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 800046a:	f898 3007 	ldrb.w	r3, [r8, #7]
 800046e:	2b02      	cmp	r3, #2
 8000470:	f200 8099 	bhi.w	80005a6 <GPIO_Init+0x186>
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000474:	2600      	movs	r6, #0
 8000476:	4634      	mov	r4, r6

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000478:	f04f 0901 	mov.w	r9, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800047c:	f04f 0b03 	mov.w	fp, #3
 8000480:	e004      	b.n	800048c <GPIO_Init+0x6c>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000482:	3401      	adds	r4, #1
 8000484:	2c10      	cmp	r4, #16
 8000486:	f106 0602 	add.w	r6, r6, #2
 800048a:	d027      	beq.n	80004dc <GPIO_Init+0xbc>
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800048c:	f8d8 7000 	ldr.w	r7, [r8]

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000490:	fa09 f304 	lsl.w	r3, r9, r4
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000494:	401f      	ands	r7, r3

    if (currentpin == pos)
 8000496:	429f      	cmp	r7, r3
 8000498:	d1f3      	bne.n	8000482 <GPIO_Init+0x62>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800049a:	682a      	ldr	r2, [r5, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800049c:	f898 3004 	ldrb.w	r3, [r8, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004a0:	fa0b fa06 	lsl.w	sl, fp, r6
 80004a4:	ea6f 0a0a 	mvn.w	sl, sl
 80004a8:	ea0a 0202 	and.w	r2, sl, r2
 80004ac:	602a      	str	r2, [r5, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004ae:	682a      	ldr	r2, [r5, #0]
 80004b0:	fa03 f106 	lsl.w	r1, r3, r6

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80004b4:	3b01      	subs	r3, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004b6:	430a      	orrs	r2, r1

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80004b8:	2b01      	cmp	r3, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004ba:	602a      	str	r2, [r5, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80004bc:	d910      	bls.n	80004e0 <GPIO_Init+0xc0>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004be:	68ea      	ldr	r2, [r5, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004c0:	f898 3007 	ldrb.w	r3, [r8, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004c4:	ea0a 0202 	and.w	r2, sl, r2
 80004c8:	60ea      	str	r2, [r5, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004ca:	68ea      	ldr	r2, [r5, #12]
 80004cc:	40b3      	lsls	r3, r6
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004ce:	3401      	adds	r4, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004d0:	4313      	orrs	r3, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004d2:	2c10      	cmp	r4, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004d4:	60eb      	str	r3, [r5, #12]
 80004d6:	f106 0602 	add.w	r6, r6, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004da:	d1d7      	bne.n	800048c <GPIO_Init+0x6c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80004dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 80004e0:	f898 3005 	ldrb.w	r3, [r8, #5]
 80004e4:	2b03      	cmp	r3, #3
 80004e6:	d854      	bhi.n	8000592 <GPIO_Init+0x172>

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80004e8:	68a9      	ldr	r1, [r5, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 80004ea:	f898 2006 	ldrb.w	r2, [r8, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80004ee:	ea0a 0101 	and.w	r1, sl, r1
 80004f2:	60a9      	str	r1, [r5, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80004f4:	68a9      	ldr	r1, [r5, #8]
 80004f6:	40b3      	lsls	r3, r6
 80004f8:	430b      	orrs	r3, r1

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 80004fa:	2a01      	cmp	r2, #1
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80004fc:	60ab      	str	r3, [r5, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 80004fe:	d908      	bls.n	8000512 <GPIO_Init+0xf2>
 8000500:	f643 705c 	movw	r0, #16220	; 0x3f5c
 8000504:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000508:	21eb      	movs	r1, #235	; 0xeb
 800050a:	f001 f929 	bl	8001760 <assert_failed>
 800050e:	f898 2006 	ldrb.w	r2, [r8, #6]

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000512:	6869      	ldr	r1, [r5, #4]
 8000514:	ea21 0707 	bic.w	r7, r1, r7
 8000518:	606f      	str	r7, [r5, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800051a:	6869      	ldr	r1, [r5, #4]
 800051c:	fa02 f304 	lsl.w	r3, r2, r4
 8000520:	b29b      	uxth	r3, r3
 8000522:	430b      	orrs	r3, r1
 8000524:	606b      	str	r3, [r5, #4]
 8000526:	e7ca      	b.n	80004be <GPIO_Init+0x9e>
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8000528:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800052c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000530:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000534:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000538:	4290      	cmp	r0, r2
 800053a:	bf18      	it	ne
 800053c:	4298      	cmpne	r0, r3
 800053e:	d08a      	beq.n	8000456 <GPIO_Init+0x36>
 8000540:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000544:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000548:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800054c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000550:	4290      	cmp	r0, r2
 8000552:	bf18      	it	ne
 8000554:	4298      	cmpne	r0, r3
 8000556:	f43f af7e 	beq.w	8000456 <GPIO_Init+0x36>
 800055a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800055e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000562:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000566:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800056a:	4290      	cmp	r0, r2
 800056c:	bf18      	it	ne
 800056e:	4298      	cmpne	r0, r3
 8000570:	f43f af71 	beq.w	8000456 <GPIO_Init+0x36>
 8000574:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000578:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800057c:	4298      	cmp	r0, r3
 800057e:	f43f af6a 	beq.w	8000456 <GPIO_Init+0x36>
 8000582:	f643 705c 	movw	r0, #16220	; 0x3f5c
 8000586:	f6c0 0000 	movt	r0, #2048	; 0x800
 800058a:	21cf      	movs	r1, #207	; 0xcf
 800058c:	f001 f8e8 	bl	8001760 <assert_failed>
 8000590:	e761      	b.n	8000456 <GPIO_Init+0x36>
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 8000592:	f643 705c 	movw	r0, #16220	; 0x3f5c
 8000596:	f6c0 0000 	movt	r0, #2048	; 0x800
 800059a:	21e4      	movs	r1, #228	; 0xe4
 800059c:	f001 f8e0 	bl	8001760 <assert_failed>
 80005a0:	f898 3005 	ldrb.w	r3, [r8, #5]
 80005a4:	e7a0      	b.n	80004e8 <GPIO_Init+0xc8>

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 80005a6:	f643 705c 	movw	r0, #16220	; 0x3f5c
 80005aa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80005ae:	21d2      	movs	r1, #210	; 0xd2
 80005b0:	f001 f8d6 	bl	8001760 <assert_failed>
 80005b4:	e75e      	b.n	8000474 <GPIO_Init+0x54>
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 80005b6:	f643 705c 	movw	r0, #16220	; 0x3f5c
 80005ba:	f6c0 0000 	movt	r0, #2048	; 0x800
 80005be:	21d1      	movs	r1, #209	; 0xd1
 80005c0:	f001 f8ce 	bl	8001760 <assert_failed>
 80005c4:	e751      	b.n	800046a <GPIO_Init+0x4a>
{
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 80005c6:	f643 705c 	movw	r0, #16220	; 0x3f5c
 80005ca:	f6c0 0000 	movt	r0, #2048	; 0x800
 80005ce:	21d0      	movs	r1, #208	; 0xd0
 80005d0:	f001 f8c6 	bl	8001760 <assert_failed>
 80005d4:	e744      	b.n	8000460 <GPIO_Init+0x40>
 80005d6:	bf00      	nop

080005d8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005d8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005e8:	4290      	cmp	r0, r2
 80005ea:	bf18      	it	ne
 80005ec:	4298      	cmpne	r0, r3
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005ee:	4604      	mov	r4, r0
 80005f0:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 80005f2:	d00b      	beq.n	800060c <GPIO_SetBits+0x34>
 80005f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000600:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000604:	4290      	cmp	r0, r2
 8000606:	bf18      	it	ne
 8000608:	4298      	cmpne	r0, r3
 800060a:	d10a      	bne.n	8000622 <GPIO_SetBits+0x4a>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800060c:	b93d      	cbnz	r5, 800061e <GPIO_SetBits+0x46>
 800060e:	f643 705c 	movw	r0, #16220	; 0x3f5c
 8000612:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000616:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800061a:	f001 f8a1 	bl	8001760 <assert_failed>

  GPIOx->BSRRL = GPIO_Pin;
 800061e:	8325      	strh	r5, [r4, #24]
 8000620:	bd38      	pop	{r3, r4, r5, pc}
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8000622:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000626:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800062e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000632:	4290      	cmp	r0, r2
 8000634:	bf18      	it	ne
 8000636:	4298      	cmpne	r0, r3
 8000638:	d0e8      	beq.n	800060c <GPIO_SetBits+0x34>
 800063a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800063e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000642:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000646:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800064a:	4290      	cmp	r0, r2
 800064c:	bf18      	it	ne
 800064e:	4298      	cmpne	r0, r3
 8000650:	d0dc      	beq.n	800060c <GPIO_SetBits+0x34>
 8000652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000656:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800065a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800065e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000662:	4290      	cmp	r0, r2
 8000664:	bf18      	it	ne
 8000666:	4298      	cmpne	r0, r3
 8000668:	d0d0      	beq.n	800060c <GPIO_SetBits+0x34>
 800066a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800066e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000672:	4298      	cmp	r0, r3
 8000674:	d0ca      	beq.n	800060c <GPIO_SetBits+0x34>
 8000676:	f643 705c 	movw	r0, #16220	; 0x3f5c
 800067a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800067e:	f240 119f 	movw	r1, #415	; 0x19f
 8000682:	f001 f86d 	bl	8001760 <assert_failed>
 8000686:	e7c1      	b.n	800060c <GPIO_SetBits+0x34>

08000688 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t temp = 0x00;
  uint32_t temp_2 = 0x00;
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 800068a:	2700      	movs	r7, #0
 800068c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000690:	f2c4 0702 	movt	r7, #16386	; 0x4002
 8000694:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000698:	42b8      	cmp	r0, r7
 800069a:	bf18      	it	ne
 800069c:	4298      	cmpne	r0, r3
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800069e:	4604      	mov	r4, r0
 80006a0:	460d      	mov	r5, r1
 80006a2:	4616      	mov	r6, r2
  uint32_t temp = 0x00;
  uint32_t temp_2 = 0x00;
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 80006a4:	d00b      	beq.n	80006be <GPIO_PinAFConfig+0x36>
 80006a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006b6:	4290      	cmp	r0, r2
 80006b8:	bf18      	it	ne
 80006ba:	4298      	cmpne	r0, r3
 80006bc:	d121      	bne.n	8000702 <GPIO_PinAFConfig+0x7a>
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 80006be:	2d0f      	cmp	r5, #15
 80006c0:	d852      	bhi.n	8000768 <GPIO_PinAFConfig+0xe0>
  assert_param(IS_GPIO_AF(GPIO_AF));
 80006c2:	2e0a      	cmp	r6, #10
 80006c4:	d90b      	bls.n	80006de <GPIO_PinAFConfig+0x56>
 80006c6:	2e0c      	cmp	r6, #12
 80006c8:	d009      	beq.n	80006de <GPIO_PinAFConfig+0x56>
 80006ca:	2e0f      	cmp	r6, #15
 80006cc:	d007      	beq.n	80006de <GPIO_PinAFConfig+0x56>
 80006ce:	f643 705c 	movw	r0, #16220	; 0x3f5c
 80006d2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80006d6:	f240 214b 	movw	r1, #587	; 0x24b
 80006da:	f001 f841 	bl	8001760 <assert_failed>
 80006de:	08eb      	lsrs	r3, r5, #3
 80006e0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80006e4:	f005 0507 	and.w	r5, r5, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80006e8:	6a22      	ldr	r2, [r4, #32]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80006ea:	00ad      	lsls	r5, r5, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80006ec:	230f      	movs	r3, #15
 80006ee:	40ab      	lsls	r3, r5
 80006f0:	ea22 0303 	bic.w	r3, r2, r3
 80006f4:	6223      	str	r3, [r4, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80006f6:	6a23      	ldr	r3, [r4, #32]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80006f8:	fa06 f505 	lsl.w	r5, r6, r5
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80006fc:	431d      	orrs	r5, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80006fe:	6225      	str	r5, [r4, #32]
 8000700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
  uint32_t temp = 0x00;
  uint32_t temp_2 = 0x00;
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8000702:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000706:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800070e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000712:	4290      	cmp	r0, r2
 8000714:	bf18      	it	ne
 8000716:	4298      	cmpne	r0, r3
 8000718:	d0d1      	beq.n	80006be <GPIO_PinAFConfig+0x36>
 800071a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800071e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000722:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000726:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800072a:	4290      	cmp	r0, r2
 800072c:	bf18      	it	ne
 800072e:	4298      	cmpne	r0, r3
 8000730:	d0c5      	beq.n	80006be <GPIO_PinAFConfig+0x36>
 8000732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000736:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800073a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800073e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000742:	4290      	cmp	r0, r2
 8000744:	bf18      	it	ne
 8000746:	4298      	cmpne	r0, r3
 8000748:	d0b9      	beq.n	80006be <GPIO_PinAFConfig+0x36>
 800074a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800074e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000752:	4298      	cmp	r0, r3
 8000754:	d0b3      	beq.n	80006be <GPIO_PinAFConfig+0x36>
 8000756:	f643 705c 	movw	r0, #16220	; 0x3f5c
 800075a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800075e:	f240 2149 	movw	r1, #585	; 0x249
 8000762:	f000 fffd 	bl	8001760 <assert_failed>
 8000766:	e7aa      	b.n	80006be <GPIO_PinAFConfig+0x36>
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 8000768:	f643 705c 	movw	r0, #16220	; 0x3f5c
 800076c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000770:	f240 214a 	movw	r1, #586	; 0x24a
 8000774:	f000 fff4 	bl	8001760 <assert_failed>
 8000778:	e7a3      	b.n	80006c2 <GPIO_PinAFConfig+0x3a>
 800077a:	bf00      	nop

0800077c <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800077c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 800077e:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 8000782:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8000786:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800078a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800078e:	4290      	cmp	r0, r2
 8000790:	bf18      	it	ne
 8000792:	4298      	cmpne	r0, r3
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000794:	4604      	mov	r4, r0
 8000796:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000798:	d00d      	beq.n	80007b6 <I2C_Cmd+0x3a>
 800079a:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800079e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80007a2:	4298      	cmp	r0, r3
 80007a4:	d007      	beq.n	80007b6 <I2C_Cmd+0x3a>
 80007a6:	f643 7098 	movw	r0, #16280	; 0x3f98
 80007aa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80007ae:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80007b2:	f000 ffd5 	bl	8001760 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80007b6:	2d01      	cmp	r5, #1
 80007b8:	d90d      	bls.n	80007d6 <I2C_Cmd+0x5a>
 80007ba:	f643 7098 	movw	r0, #16280	; 0x3f98
 80007be:	f6c0 0000 	movt	r0, #2048	; 0x800
 80007c2:	f240 113d 	movw	r1, #317	; 0x13d
 80007c6:	f000 ffcb 	bl	8001760 <assert_failed>
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80007ca:	8823      	ldrh	r3, [r4, #0]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	8023      	strh	r3, [r4, #0]
 80007d4:	bd38      	pop	{r3, r4, r5, pc}
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	d1f7      	bne.n	80007ca <I2C_Cmd+0x4e>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80007da:	8823      	ldrh	r3, [r4, #0]
 80007dc:	f023 0301 	bic.w	r3, r3, #1
 80007e0:	041b      	lsls	r3, r3, #16
 80007e2:	0c1b      	lsrs	r3, r3, #16
 80007e4:	8023      	strh	r3, [r4, #0]
 80007e6:	bd38      	pop	{r3, r4, r5, pc}

080007e8 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80007e8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 80007ea:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 80007ee:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80007f2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80007f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80007fa:	4290      	cmp	r0, r2
 80007fc:	bf18      	it	ne
 80007fe:	4298      	cmpne	r0, r3
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000800:	4604      	mov	r4, r0
 8000802:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000804:	d00d      	beq.n	8000822 <I2C_GenerateSTOP+0x3a>
 8000806:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800080a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800080e:	4298      	cmp	r0, r3
 8000810:	d007      	beq.n	8000822 <I2C_GenerateSTOP+0x3a>
 8000812:	f643 7098 	movw	r0, #16280	; 0x3f98
 8000816:	f6c0 0000 	movt	r0, #2048	; 0x800
 800081a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800081e:	f000 ff9f 	bl	8001760 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8000822:	2d01      	cmp	r5, #1
 8000824:	d90d      	bls.n	8000842 <I2C_GenerateSTOP+0x5a>
 8000826:	f643 7098 	movw	r0, #16280	; 0x3f98
 800082a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800082e:	f240 11ab 	movw	r1, #427	; 0x1ab
 8000832:	f000 ff95 	bl	8001760 <assert_failed>
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8000836:	8823      	ldrh	r3, [r4, #0]
 8000838:	b29b      	uxth	r3, r3
 800083a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800083e:	8023      	strh	r3, [r4, #0]
 8000840:	bd38      	pop	{r3, r4, r5, pc}
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000842:	2d00      	cmp	r5, #0
 8000844:	d1f7      	bne.n	8000836 <I2C_GenerateSTOP+0x4e>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8000846:	8823      	ldrh	r3, [r4, #0]
 8000848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800084c:	041b      	lsls	r3, r3, #16
 800084e:	0c1b      	lsrs	r3, r3, #16
 8000850:	8023      	strh	r3, [r4, #0]
 8000852:	bd38      	pop	{r3, r4, r5, pc}

08000854 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8000854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000856:	f44f 45a8 	mov.w	r5, #21504	; 0x5400
 800085a:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800085e:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8000862:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000866:	42a8      	cmp	r0, r5
 8000868:	bf18      	it	ne
 800086a:	4298      	cmpne	r0, r3
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 800086c:	4604      	mov	r4, r0
 800086e:	460f      	mov	r7, r1
 8000870:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000872:	d00d      	beq.n	8000890 <I2C_Send7bitAddress+0x3c>
 8000874:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8000878:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800087c:	4298      	cmp	r0, r3
 800087e:	d007      	beq.n	8000890 <I2C_Send7bitAddress+0x3c>
 8000880:	f643 7098 	movw	r0, #16280	; 0x3f98
 8000884:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000888:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800088c:	f000 ff68 	bl	8001760 <assert_failed>
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
 8000890:	2e01      	cmp	r6, #1
 8000892:	d90b      	bls.n	80008ac <I2C_Send7bitAddress+0x58>
 8000894:	f643 7098 	movw	r0, #16280	; 0x3f98
 8000898:	f6c0 0000 	movt	r0, #2048	; 0x800
 800089c:	f240 11c7 	movw	r1, #455	; 0x1c7
 80008a0:	f000 ff5e 	bl	8001760 <assert_failed>
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 80008a4:	f047 0701 	orr.w	r7, r7, #1
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
  }
  /* Send the address */
  I2Cx->DR = Address;
 80008a8:	8227      	strh	r7, [r4, #16]
 80008aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80008ac:	2e00      	cmp	r6, #0
 80008ae:	d1f9      	bne.n	80008a4 <I2C_Send7bitAddress+0x50>
    Address |= I2C_OAR1_ADD0;
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 80008b0:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 80008b4:	8227      	strh	r7, [r4, #16]
 80008b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080008b8 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80008b8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 80008ba:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 80008be:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80008c2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80008c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80008ca:	4290      	cmp	r0, r2
 80008cc:	bf18      	it	ne
 80008ce:	4298      	cmpne	r0, r3
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80008d0:	4604      	mov	r4, r0
 80008d2:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 80008d4:	d00d      	beq.n	80008f2 <I2C_AcknowledgeConfig+0x3a>
 80008d6:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80008da:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80008de:	4298      	cmp	r0, r3
 80008e0:	d007      	beq.n	80008f2 <I2C_AcknowledgeConfig+0x3a>
 80008e2:	f643 7098 	movw	r0, #16280	; 0x3f98
 80008e6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80008ea:	f240 11e1 	movw	r1, #481	; 0x1e1
 80008ee:	f000 ff37 	bl	8001760 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80008f2:	2d01      	cmp	r5, #1
 80008f4:	d90d      	bls.n	8000912 <I2C_AcknowledgeConfig+0x5a>
 80008f6:	f643 7098 	movw	r0, #16280	; 0x3f98
 80008fa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80008fe:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8000902:	f000 ff2d 	bl	8001760 <assert_failed>
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8000906:	8823      	ldrh	r3, [r4, #0]
 8000908:	b29b      	uxth	r3, r3
 800090a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090e:	8023      	strh	r3, [r4, #0]
 8000910:	bd38      	pop	{r3, r4, r5, pc}
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000912:	2d00      	cmp	r5, #0
 8000914:	d1f7      	bne.n	8000906 <I2C_AcknowledgeConfig+0x4e>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8000916:	8823      	ldrh	r3, [r4, #0]
 8000918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800091c:	041b      	lsls	r3, r3, #16
 800091e:	0c1b      	lsrs	r3, r3, #16
 8000920:	8023      	strh	r3, [r4, #0]
 8000922:	bd38      	pop	{r3, r4, r5, pc}

08000924 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8000924:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000926:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 800092a:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800092e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000932:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000936:	4290      	cmp	r0, r2
 8000938:	bf18      	it	ne
 800093a:	4298      	cmpne	r0, r3
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800093c:	4604      	mov	r4, r0
 800093e:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000940:	d00d      	beq.n	800095e <I2C_SendData+0x3a>
 8000942:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8000946:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800094a:	4298      	cmp	r0, r3
 800094c:	d007      	beq.n	800095e <I2C_SendData+0x3a>
 800094e:	f643 7098 	movw	r0, #16280	; 0x3f98
 8000952:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000956:	f240 21f7 	movw	r1, #759	; 0x2f7
 800095a:	f000 ff01 	bl	8001760 <assert_failed>
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800095e:	8225      	strh	r5, [r4, #16]
 8000960:	bd38      	pop	{r3, r4, r5, pc}
 8000962:	bf00      	nop

08000964 <I2C_ReceiveData>:
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000964:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 8000968:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800096c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000970:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000974:	4290      	cmp	r0, r2
 8000976:	bf18      	it	ne
 8000978:	4298      	cmpne	r0, r3
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800097a:	b510      	push	{r4, lr}
 800097c:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 800097e:	d00d      	beq.n	800099c <I2C_ReceiveData+0x38>
 8000980:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8000984:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000988:	4298      	cmp	r0, r3
 800098a:	d007      	beq.n	800099c <I2C_ReceiveData+0x38>
 800098c:	f643 7098 	movw	r0, #16280	; 0x3f98
 8000990:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000994:	f44f 7141 	mov.w	r1, #772	; 0x304
 8000998:	f000 fee2 	bl	8001760 <assert_failed>
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800099c:	8a20      	ldrh	r0, [r4, #16]
}
 800099e:	b2c0      	uxtb	r0, r0
 80009a0:	bd10      	pop	{r4, pc}
 80009a2:	bf00      	nop

080009a4 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80009a4:	b530      	push	{r4, r5, lr}
  __IO uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 80009a6:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 80009aa:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80009ae:	4604      	mov	r4, r0
 80009b0:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 80009b2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80009b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
  __IO uint32_t tmp = 0;
 80009ba:	2000      	movs	r0, #0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 80009bc:	4294      	cmp	r4, r2
 80009be:	bf18      	it	ne
 80009c0:	429c      	cmpne	r4, r3
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80009c2:	460d      	mov	r5, r1
  __IO uint32_t tmp = 0;
 80009c4:	9001      	str	r0, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 80009c6:	d117      	bne.n	80009f8 <I2C_ReadRegister+0x54>
  assert_param(IS_I2C_REGISTER(I2C_Register));
 80009c8:	f015 03f3 	ands.w	r3, r5, #243	; 0xf3
 80009cc:	d00b      	beq.n	80009e6 <I2C_ReadRegister+0x42>
 80009ce:	2b10      	cmp	r3, #16
 80009d0:	d009      	beq.n	80009e6 <I2C_ReadRegister+0x42>
 80009d2:	2d20      	cmp	r5, #32
 80009d4:	d007      	beq.n	80009e6 <I2C_ReadRegister+0x42>
 80009d6:	f643 7098 	movw	r0, #16280	; 0x3f98
 80009da:	f6c0 0000 	movt	r0, #2048	; 0x800
 80009de:	f240 4136 	movw	r1, #1078	; 0x436
 80009e2:	f000 febd 	bl	8001760 <assert_failed>

  tmp = (uint32_t) I2Cx;
 80009e6:	9401      	str	r4, [sp, #4]
  tmp += I2C_Register;
 80009e8:	9b01      	ldr	r3, [sp, #4]
 80009ea:	441d      	add	r5, r3
 80009ec:	9501      	str	r5, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 80009ee:	9b01      	ldr	r3, [sp, #4]
 80009f0:	8818      	ldrh	r0, [r3, #0]
 80009f2:	b280      	uxth	r0, r0
}
 80009f4:	b003      	add	sp, #12
 80009f6:	bd30      	pop	{r4, r5, pc}
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
  __IO uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 80009f8:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80009fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000a00:	429c      	cmp	r4, r3
 8000a02:	d0e1      	beq.n	80009c8 <I2C_ReadRegister+0x24>
 8000a04:	f643 7098 	movw	r0, #16280	; 0x3f98
 8000a08:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a0c:	f240 4135 	movw	r1, #1077	; 0x435
 8000a10:	f000 fea6 	bl	8001760 <assert_failed>
 8000a14:	e7d8      	b.n	80009c8 <I2C_ReadRegister+0x24>
 8000a16:	bf00      	nop

08000a18 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 8000a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000a1a:	f44f 47a8 	mov.w	r7, #21504	; 0x5400
 8000a1e:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8000a22:	f2c4 0700 	movt	r7, #16384	; 0x4000
 8000a26:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000a2a:	42b8      	cmp	r0, r7
 8000a2c:	bf18      	it	ne
 8000a2e:	4298      	cmpne	r0, r3
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 8000a30:	4604      	mov	r4, r0
 8000a32:	460d      	mov	r5, r1
 8000a34:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000a36:	d00d      	beq.n	8000a54 <I2C_ITConfig+0x3c>
 8000a38:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8000a3c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000a40:	4298      	cmp	r0, r3
 8000a42:	d007      	beq.n	8000a54 <I2C_ITConfig+0x3c>
 8000a44:	f643 7098 	movw	r0, #16280	; 0x3f98
 8000a48:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a4c:	f240 414e 	movw	r1, #1102	; 0x44e
 8000a50:	f000 fe86 	bl	8001760 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8000a54:	2e01      	cmp	r6, #1
 8000a56:	d907      	bls.n	8000a68 <I2C_ITConfig+0x50>
 8000a58:	f643 7098 	movw	r0, #16280	; 0x3f98
 8000a5c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a60:	f240 414f 	movw	r1, #1103	; 0x44f
 8000a64:	f000 fe7c 	bl	8001760 <assert_failed>
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
 8000a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a6c:	402b      	ands	r3, r5
 8000a6e:	b93b      	cbnz	r3, 8000a80 <I2C_ITConfig+0x68>
 8000a70:	b135      	cbz	r5, 8000a80 <I2C_ITConfig+0x68>
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8000a72:	88a3      	ldrh	r3, [r4, #4]
 8000a74:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8000a76:	b97e      	cbnz	r6, 8000a98 <I2C_ITConfig+0x80>
    I2Cx->CR2 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8000a78:	ea23 0505 	bic.w	r5, r3, r5
 8000a7c:	80a5      	strh	r5, [r4, #4]
 8000a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
 8000a80:	f643 7098 	movw	r0, #16280	; 0x3f98
 8000a84:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000a88:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000a8c:	f000 fe68 	bl	8001760 <assert_failed>
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8000a90:	88a3      	ldrh	r3, [r4, #4]
 8000a92:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d0ef      	beq.n	8000a78 <I2C_ITConfig+0x60>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8000a98:	431d      	orrs	r5, r3
 8000a9a:	80a5      	strh	r5, [r4, #4]
 8000a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a9e:	bf00      	nop

08000aa0 <I2C_GetLastEvent>:
{
  uint32_t lastevent = 0;
  uint32_t flag1 = 0, flag2 = 0;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000aa0:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 8000aa4:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8000aa8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000aac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000ab0:	4290      	cmp	r0, r2
 8000ab2:	bf18      	it	ne
 8000ab4:	4298      	cmpne	r0, r3
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 8000ab6:	b510      	push	{r4, lr}
 8000ab8:	4604      	mov	r4, r0
  uint32_t lastevent = 0;
  uint32_t flag1 = 0, flag2 = 0;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000aba:	d00d      	beq.n	8000ad8 <I2C_GetLastEvent+0x38>
 8000abc:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8000ac0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000ac4:	4298      	cmp	r0, r3
 8000ac6:	d007      	beq.n	8000ad8 <I2C_GetLastEvent+0x38>
 8000ac8:	f643 7098 	movw	r0, #16280	; 0x3f98
 8000acc:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000ad0:	f240 41bc 	movw	r1, #1212	; 0x4bc
 8000ad4:	f000 fe44 	bl	8001760 <assert_failed>

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000ad8:	8aa0      	ldrh	r0, [r4, #20]
  flag2 = I2Cx->SR2;
 8000ada:	8b23      	ldrh	r3, [r4, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000adc:	b280      	uxth	r0, r0
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8000ade:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

  /* Return status */
  return lastevent;
}
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bd10      	pop	{r4, pc}

08000ae8 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000ae8:	b530      	push	{r4, r5, lr}
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000aea:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 8000aee:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000af2:	b083      	sub	sp, #12
 8000af4:	4605      	mov	r5, r0
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000af6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000afa:	f2c4 0300 	movt	r3, #16384	; 0x4000
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000afe:	2000      	movs	r0, #0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000b00:	4295      	cmp	r5, r2
 8000b02:	bf18      	it	ne
 8000b04:	429d      	cmpne	r5, r3
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000b06:	9000      	str	r0, [sp, #0]
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000b08:	460c      	mov	r4, r1
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000b0a:	9001      	str	r0, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000b0c:	d00d      	beq.n	8000b2a <I2C_GetFlagStatus+0x42>
 8000b0e:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8000b12:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000b16:	429d      	cmp	r5, r3
 8000b18:	d007      	beq.n	8000b2a <I2C_GetFlagStatus+0x42>
 8000b1a:	f643 7098 	movw	r0, #16280	; 0x3f98
 8000b1e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000b22:	f240 41f3 	movw	r1, #1267	; 0x4f3
 8000b26:	f000 fe1b 	bl	8001760 <assert_failed>
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
 8000b2a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8000b2e:	bf18      	it	ne
 8000b30:	f5b4 0f80 	cmpne.w	r4, #4194304	; 0x400000
 8000b34:	d005      	beq.n	8000b42 <I2C_GetFlagStatus+0x5a>
 8000b36:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 8000b3a:	bf18      	it	ne
 8000b3c:	f5b4 1f80 	cmpne.w	r4, #1048576	; 0x100000
 8000b40:	d116      	bne.n	8000b70 <I2C_GetFlagStatus+0x88>

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000b42:	0f23      	lsrs	r3, r4, #28
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000b44:	9501      	str	r5, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000b46:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 8000b48:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8000b4a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 8000b4e:	b153      	cbz	r3, 8000b66 <I2C_GetFlagStatus+0x7e>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8000b50:	9b01      	ldr	r3, [sp, #4]
 8000b52:	3314      	adds	r3, #20
 8000b54:	9301      	str	r3, [sp, #4]
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8000b56:	9b01      	ldr	r3, [sp, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	421c      	tst	r4, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8000b5c:	bf0c      	ite	eq
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	2001      	movne	r0, #1
 8000b62:	b003      	add	sp, #12
 8000b64:	bd30      	pop	{r4, r5, pc}
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000b66:	9b01      	ldr	r3, [sp, #4]
 8000b68:	3318      	adds	r3, #24
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000b6a:	0c24      	lsrs	r4, r4, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	e7f2      	b.n	8000b56 <I2C_GetFlagStatus+0x6e>
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
 8000b70:	f5b4 2f80 	cmp.w	r4, #262144	; 0x40000
 8000b74:	bf18      	it	ne
 8000b76:	f5b4 3f00 	cmpne.w	r4, #131072	; 0x20000
 8000b7a:	d0e2      	beq.n	8000b42 <I2C_GetFlagStatus+0x5a>
 8000b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b80:	f2c1 0300 	movt	r3, #4096	; 0x1000
 8000b84:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8000b88:	bf18      	it	ne
 8000b8a:	429c      	cmpne	r4, r3
 8000b8c:	d0d9      	beq.n	8000b42 <I2C_GetFlagStatus+0x5a>
 8000b8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b92:	f2c1 0300 	movt	r3, #4096	; 0x1000
 8000b96:	429c      	cmp	r4, r3
 8000b98:	bf18      	it	ne
 8000b9a:	f1b4 2f10 	cmpne.w	r4, #268439552	; 0x10001000
 8000b9e:	d0d0      	beq.n	8000b42 <I2C_GetFlagStatus+0x5a>
 8000ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba8:	f2c1 0200 	movt	r2, #4096	; 0x1000
 8000bac:	f2c1 0300 	movt	r3, #4096	; 0x1000
 8000bb0:	4294      	cmp	r4, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	429c      	cmpne	r4, r3
 8000bb6:	d0c4      	beq.n	8000b42 <I2C_GetFlagStatus+0x5a>
 8000bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc0:	f2c1 0200 	movt	r2, #4096	; 0x1000
 8000bc4:	f2c1 0300 	movt	r3, #4096	; 0x1000
 8000bc8:	4294      	cmp	r4, r2
 8000bca:	bf18      	it	ne
 8000bcc:	429c      	cmpne	r4, r3
 8000bce:	d0b8      	beq.n	8000b42 <I2C_GetFlagStatus+0x5a>
 8000bd0:	2280      	movs	r2, #128	; 0x80
 8000bd2:	2340      	movs	r3, #64	; 0x40
 8000bd4:	f2c1 0200 	movt	r2, #4096	; 0x1000
 8000bd8:	f2c1 0300 	movt	r3, #4096	; 0x1000
 8000bdc:	4294      	cmp	r4, r2
 8000bde:	bf18      	it	ne
 8000be0:	429c      	cmpne	r4, r3
 8000be2:	d0ae      	beq.n	8000b42 <I2C_GetFlagStatus+0x5a>
 8000be4:	2210      	movs	r2, #16
 8000be6:	2308      	movs	r3, #8
 8000be8:	f2c1 0200 	movt	r2, #4096	; 0x1000
 8000bec:	f2c1 0300 	movt	r3, #4096	; 0x1000
 8000bf0:	4294      	cmp	r4, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	429c      	cmpne	r4, r3
 8000bf6:	d0a4      	beq.n	8000b42 <I2C_GetFlagStatus+0x5a>
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	f2c1 0300 	movt	r3, #4096	; 0x1000
 8000bfe:	429c      	cmp	r4, r3
 8000c00:	d09f      	beq.n	8000b42 <I2C_GetFlagStatus+0x5a>
 8000c02:	f104 4370 	add.w	r3, r4, #4026531840	; 0xf0000000
 8000c06:	3b01      	subs	r3, #1
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d99a      	bls.n	8000b42 <I2C_GetFlagStatus+0x5a>
 8000c0c:	f643 7098 	movw	r0, #16280	; 0x3f98
 8000c10:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000c14:	f240 41f4 	movw	r1, #1268	; 0x4f4
 8000c18:	f000 fda2 	bl	8001760 <assert_failed>
 8000c1c:	e791      	b.n	8000b42 <I2C_GetFlagStatus+0x5a>
 8000c1e:	bf00      	nop

08000c20 <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8000c20:	b538      	push	{r3, r4, r5, lr}
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000c22:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 8000c26:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8000c2a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000c2e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000c32:	4290      	cmp	r0, r2
 8000c34:	bf18      	it	ne
 8000c36:	4298      	cmpne	r0, r3
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8000c38:	4605      	mov	r5, r0
 8000c3a:	460c      	mov	r4, r1
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000c3c:	d00d      	beq.n	8000c5a <I2C_GetITStatus+0x3a>
 8000c3e:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8000c42:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000c46:	4298      	cmp	r0, r3
 8000c48:	d007      	beq.n	8000c5a <I2C_GetITStatus+0x3a>
 8000c4a:	f643 7098 	movw	r0, #16280	; 0x3f98
 8000c4e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000c52:	f240 5162 	movw	r1, #1378	; 0x562
 8000c56:	f000 fd83 	bl	8001760 <assert_failed>
  assert_param(IS_I2C_GET_IT(I2C_IT));
 8000c5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c62:	f2c0 1200 	movt	r2, #256	; 0x100
 8000c66:	f2c0 1300 	movt	r3, #256	; 0x100
 8000c6a:	4294      	cmp	r4, r2
 8000c6c:	bf18      	it	ne
 8000c6e:	429c      	cmpne	r4, r3
 8000c70:	d00b      	beq.n	8000c8a <I2C_GetITStatus+0x6a>
 8000c72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c7a:	f2c0 1200 	movt	r2, #256	; 0x100
 8000c7e:	f2c0 1300 	movt	r3, #256	; 0x100
 8000c82:	4294      	cmp	r4, r2
 8000c84:	bf18      	it	ne
 8000c86:	429c      	cmpne	r4, r3
 8000c88:	d10d      	bne.n	8000ca6 <I2C_GetITStatus+0x86>

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8000c8a:	88ab      	ldrh	r3, [r5, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8000c8c:	8aa8      	ldrh	r0, [r5, #20]
 8000c8e:	b280      	uxth	r0, r0
 8000c90:	4020      	ands	r0, r4
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8000c92:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8000c94:	d006      	beq.n	8000ca4 <I2C_GetITStatus+0x84>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8000c96:	f004 64e0 	and.w	r4, r4, #117440512	; 0x7000000
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8000c9a:	ea13 4414 	ands.w	r4, r3, r4, lsr #16
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8000c9e:	bf0c      	ite	eq
 8000ca0:	2000      	moveq	r0, #0
 8000ca2:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));
 8000ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cae:	f2c0 1200 	movt	r2, #256	; 0x100
 8000cb2:	f2c0 1300 	movt	r3, #256	; 0x100
 8000cb6:	4294      	cmp	r4, r2
 8000cb8:	bf18      	it	ne
 8000cba:	429c      	cmpne	r4, r3
 8000cbc:	d0e5      	beq.n	8000c8a <I2C_GetITStatus+0x6a>
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	f2c0 6300 	movt	r3, #1536	; 0x600
 8000cc4:	f1b4 2f01 	cmp.w	r4, #16777472	; 0x1000100
 8000cc8:	bf18      	it	ne
 8000cca:	429c      	cmpne	r4, r3
 8000ccc:	d0dd      	beq.n	8000c8a <I2C_GetITStatus+0x6a>
 8000cce:	2240      	movs	r2, #64	; 0x40
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	f2c0 6200 	movt	r2, #1536	; 0x600
 8000cd6:	f2c0 2300 	movt	r3, #512	; 0x200
 8000cda:	4294      	cmp	r4, r2
 8000cdc:	bf18      	it	ne
 8000cde:	429c      	cmpne	r4, r3
 8000ce0:	d0d3      	beq.n	8000c8a <I2C_GetITStatus+0x6a>
 8000ce2:	2208      	movs	r2, #8
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	f2c0 2200 	movt	r2, #512	; 0x200
 8000cea:	f2c0 2300 	movt	r3, #512	; 0x200
 8000cee:	4294      	cmp	r4, r2
 8000cf0:	bf18      	it	ne
 8000cf2:	429c      	cmpne	r4, r3
 8000cf4:	d0c9      	beq.n	8000c8a <I2C_GetITStatus+0x6a>
 8000cf6:	f104 437e 	add.w	r3, r4, #4261412864	; 0xfe000000
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d9c4      	bls.n	8000c8a <I2C_GetITStatus+0x6a>
 8000d00:	f643 7098 	movw	r0, #16280	; 0x3f98
 8000d04:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000d08:	f240 5163 	movw	r1, #1379	; 0x563
 8000d0c:	f000 fd28 	bl	8001760 <assert_failed>
 8000d10:	e7bb      	b.n	8000c8a <I2C_GetITStatus+0x6a>
 8000d12:	bf00      	nop

08000d14 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8000d14:	b538      	push	{r3, r4, r5, lr}
  uint32_t flagpos = 0;
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000d16:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 8000d1a:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8000d1e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000d22:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d26:	4290      	cmp	r0, r2
 8000d28:	bf18      	it	ne
 8000d2a:	4298      	cmpne	r0, r3
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460d      	mov	r5, r1
  uint32_t flagpos = 0;
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 8000d30:	d00d      	beq.n	8000d4e <I2C_ClearITPendingBit+0x3a>
 8000d32:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8000d36:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000d3a:	4298      	cmp	r0, r3
 8000d3c:	d007      	beq.n	8000d4e <I2C_ClearITPendingBit+0x3a>
 8000d3e:	f643 7098 	movw	r0, #16280	; 0x3f98
 8000d42:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000d46:	f240 519c 	movw	r1, #1436	; 0x59c
 8000d4a:	f000 fd09 	bl	8001760 <assert_failed>
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));
 8000d4e:	f242 03ff 	movw	r3, #8447	; 0x20ff
 8000d52:	402b      	ands	r3, r5
 8000d54:	b903      	cbnz	r3, 8000d58 <I2C_ClearITPendingBit+0x44>
 8000d56:	b93d      	cbnz	r5, 8000d68 <I2C_ClearITPendingBit+0x54>
 8000d58:	f643 7098 	movw	r0, #16280	; 0x3f98
 8000d5c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000d60:	f240 519d 	movw	r1, #1437	; 0x59d
 8000d64:	f000 fcfc 	bl	8001760 <assert_failed>

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8000d68:	43ed      	mvns	r5, r5
 8000d6a:	b2ad      	uxth	r5, r5
 8000d6c:	82a5      	strh	r5, [r4, #20]
 8000d6e:	bd38      	pop	{r3, r4, r5, pc}

08000d70 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000d74:	e7fe      	b.n	8000d74 <HardFault_Handler>
 8000d76:	bf00      	nop

08000d78 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler>
 8000d7a:	bf00      	nop

08000d7c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000d7c:	e7fe      	b.n	8000d7c <BusFault_Handler>
 8000d7e:	bf00      	nop

08000d80 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000d80:	e7fe      	b.n	8000d80 <UsageFault_Handler>
 8000d82:	bf00      	nop

08000d84 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <RCC_GetClocksFreq>:
#if defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d88:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000d90:	b410      	push	{r4}
#if defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	f002 020c 	and.w	r2, r2, #12
  
  switch (tmp)
 8000d98:	2a04      	cmp	r2, #4
 8000d9a:	d024      	beq.n	8000de6 <RCC_GetClocksFreq+0x5e>
 8000d9c:	2a08      	cmp	r2, #8
 8000d9e:	d028      	beq.n	8000df2 <RCC_GetClocksFreq+0x6a>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000da0:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000da4:	f2c0 01f4 	movt	r1, #244	; 0xf4
 8000da8:	6001      	str	r1, [r0, #0]
    break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000daa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000dae:	f2c4 0202 	movt	r2, #16386	; 0x4002
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000db2:	f240 0300 	movw	r3, #0
    break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000db6:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 8000dbc:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000dc0:	5d1c      	ldrb	r4, [r3, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000dc2:	40e1      	lsrs	r1, r4
 8000dc4:	6041      	str	r1, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000dc6:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 10;
 8000dc8:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8000dcc:	5d1c      	ldrb	r4, [r3, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000dce:	fa21 f404 	lsr.w	r4, r1, r4
 8000dd2:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000dd4:	6892      	ldr	r2, [r2, #8]
  tmp = tmp >> 13;
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
}
 8000dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
  tmp = tmp >> 13;
 8000dda:	f3c2 3242 	ubfx	r2, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 8000dde:	5c9b      	ldrb	r3, [r3, r2]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000de0:	40d9      	lsrs	r1, r3
 8000de2:	60c1      	str	r1, [r0, #12]
}
 8000de4:	4770      	bx	lr
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    break;
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000de6:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000dea:	f2c0 017a 	movt	r1, #122	; 0x7a
 8000dee:	6001      	str	r1, [r0, #0]
    break;
 8000df0:	e7db      	b.n	8000daa <RCC_GetClocksFreq+0x22>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000df2:	685c      	ldr	r4, [r3, #4]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000df4:	685a      	ldr	r2, [r3, #4]
    
    if (pllsource != 0)
 8000df6:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000dfa:	685c      	ldr	r4, [r3, #4]
 8000dfc:	bf15      	itete	ne
 8000dfe:	f44f 5390 	movne.w	r3, #4608	; 0x1200
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000e02:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
    
    if (pllsource != 0)
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000e06:	f2c0 037a 	movtne	r3, #122	; 0x7a
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000e0a:	f2c0 03f4 	movteq	r3, #244	; 0xf4
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e0e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000e12:	fbb3 f1f2 	udiv	r1, r3, r2
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000e16:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000e1e:	f3c4 1488 	ubfx	r4, r4, #6, #9
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000e28:	3301      	adds	r3, #1
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000e2a:	fb01 f104 	mul.w	r1, r1, r4
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000e2e:	005b      	lsls	r3, r3, #1
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000e30:	fbb1 f1f3 	udiv	r1, r1, r3
 8000e34:	6001      	str	r1, [r0, #0]
    break;
 8000e36:	e7b8      	b.n	8000daa <RCC_GetClocksFreq+0x22>

08000e38 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000e38:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 8000e3a:	f44f 4368 	mov.w	r3, #59392	; 0xe800
 8000e3e:	f2c8 130b 	movt	r3, #33035	; 0x810b
 8000e42:	4003      	ands	r3, r0
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000e44:	4604      	mov	r4, r0
 8000e46:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 8000e48:	b993      	cbnz	r3, 8000e70 <RCC_AHB1PeriphClockCmd+0x38>
 8000e4a:	b188      	cbz	r0, 8000e70 <RCC_AHB1PeriphClockCmd+0x38>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8000e4c:	2d01      	cmp	r5, #1
 8000e4e:	d919      	bls.n	8000e84 <RCC_AHB1PeriphClockCmd+0x4c>
 8000e50:	f643 70d4 	movw	r0, #16340	; 0x3fd4
 8000e54:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000e58:	f240 7103 	movw	r1, #1795	; 0x703
 8000e5c:	f000 fc80 	bl	8001760 <assert_failed>
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000e60:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e6a:	4314      	orrs	r4, r2
 8000e6c:	631c      	str	r4, [r3, #48]	; 0x30
 8000e6e:	bd38      	pop	{r3, r4, r5, pc}
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 8000e70:	f643 70d4 	movw	r0, #16340	; 0x3fd4
 8000e74:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000e78:	f240 7101 	movw	r1, #1793	; 0x701
 8000e7c:	f000 fc70 	bl	8001760 <assert_failed>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8000e80:	2d01      	cmp	r5, #1
 8000e82:	d8e5      	bhi.n	8000e50 <RCC_AHB1PeriphClockCmd+0x18>
  if (NewState != DISABLE)
 8000e84:	2d00      	cmp	r5, #0
 8000e86:	d1eb      	bne.n	8000e60 <RCC_AHB1PeriphClockCmd+0x28>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000e88:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e92:	ea22 0404 	bic.w	r4, r2, r4
 8000e96:	631c      	str	r4, [r3, #48]	; 0x30
 8000e98:	bd38      	pop	{r3, r4, r5, pc}
 8000e9a:	bf00      	nop

08000e9c <RCC_APB1PeriphClockCmd>:
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
 8000e9c:	f410 5f58 	tst.w	r0, #13824	; 0x3600
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000ea0:	b538      	push	{r3, r4, r5, lr}
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
 8000ea6:	d112      	bne.n	8000ece <RCC_APB1PeriphClockCmd+0x32>
 8000ea8:	b188      	cbz	r0, 8000ece <RCC_APB1PeriphClockCmd+0x32>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8000eaa:	2d01      	cmp	r5, #1
 8000eac:	d919      	bls.n	8000ee2 <RCC_APB1PeriphClockCmd+0x46>
 8000eae:	f643 70d4 	movw	r0, #16340	; 0x3fd4
 8000eb2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000eb6:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 8000eba:	f000 fc51 	bl	8001760 <assert_failed>

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000ebe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ec2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec8:	4314      	orrs	r4, r2
 8000eca:	641c      	str	r4, [r3, #64]	; 0x40
 8000ecc:	bd38      	pop	{r3, r4, r5, pc}
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
 8000ece:	f643 70d4 	movw	r0, #16340	; 0x3fd4
 8000ed2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000ed6:	f240 7177 	movw	r1, #1911	; 0x777
 8000eda:	f000 fc41 	bl	8001760 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8000ede:	2d01      	cmp	r5, #1
 8000ee0:	d8e5      	bhi.n	8000eae <RCC_APB1PeriphClockCmd+0x12>

  if (NewState != DISABLE)
 8000ee2:	2d00      	cmp	r5, #0
 8000ee4:	d1eb      	bne.n	8000ebe <RCC_APB1PeriphClockCmd+0x22>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000ee6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000eea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef0:	ea22 0404 	bic.w	r4, r2, r4
 8000ef4:	641c      	str	r4, [r3, #64]	; 0x40
 8000ef6:	bd38      	pop	{r3, r4, r5, pc}

08000ef8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t integerdivider = 0x00;
  uint32_t fractionaldivider = 0x00;
  RCC_ClocksTypeDef RCC_ClocksStatus;

  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8000efa:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 8000efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f02:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000f06:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000f0a:	4290      	cmp	r0, r2
 8000f0c:	bf18      	it	ne
 8000f0e:	4298      	cmpne	r0, r3
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000f10:	b085      	sub	sp, #20
 8000f12:	4604      	mov	r4, r0
 8000f14:	460d      	mov	r5, r1
  uint32_t integerdivider = 0x00;
  uint32_t fractionaldivider = 0x00;
  RCC_ClocksTypeDef RCC_ClocksStatus;

  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8000f16:	bf0c      	ite	eq
 8000f18:	2600      	moveq	r6, #0
 8000f1a:	2601      	movne	r6, #1
 8000f1c:	d00c      	beq.n	8000f38 <USART_Init+0x40>
 8000f1e:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8000f22:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000f26:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000f2a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000f2e:	4290      	cmp	r0, r2
 8000f30:	bf18      	it	ne
 8000f32:	4298      	cmpne	r0, r3
 8000f34:	f040 80cd 	bne.w	80010d2 <USART_Init+0x1da>
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 8000f38:	682b      	ldr	r3, [r5, #0]
 8000f3a:	f247 01df 	movw	r1, #28895	; 0x70df
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	f2c0 0172 	movt	r1, #114	; 0x72
 8000f44:	428b      	cmp	r3, r1
 8000f46:	f200 80e6 	bhi.w	8001116 <USART_Init+0x21e>
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 8000f4a:	88ab      	ldrh	r3, [r5, #4]
 8000f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f50:	041b      	lsls	r3, r3, #16
 8000f52:	0c1b      	lsrs	r3, r3, #16
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f040 80e6 	bne.w	8001126 <USART_Init+0x22e>
  assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 8000f5a:	88eb      	ldrh	r3, [r5, #6]
 8000f5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f040 80ed 	bne.w	8001142 <USART_Init+0x24a>
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 8000f68:	892b      	ldrh	r3, [r5, #8]
 8000f6a:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 8000f6e:	4019      	ands	r1, r3
 8000f70:	b151      	cbz	r1, 8000f88 <USART_Init+0x90>
 8000f72:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000f76:	d007      	beq.n	8000f88 <USART_Init+0x90>
 8000f78:	f244 0010 	movw	r0, #16400	; 0x4010
 8000f7c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000f80:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000f84:	f000 fbec 	bl	8001760 <assert_failed>
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 8000f88:	896b      	ldrh	r3, [r5, #10]
 8000f8a:	f64f 71f3 	movw	r1, #65523	; 0xfff3
 8000f8e:	4019      	ands	r1, r3
 8000f90:	2900      	cmp	r1, #0
 8000f92:	d175      	bne.n	8001080 <USART_Init+0x188>
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d073      	beq.n	8001080 <USART_Init+0x188>
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 8000f98:	89ab      	ldrh	r3, [r5, #12]
 8000f9a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	d07b      	beq.n	800109c <USART_Init+0x1a4>
 8000fa4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000fa8:	f000 80c6 	beq.w	8001138 <USART_Init+0x240>
 8000fac:	f244 0010 	movw	r0, #16400	; 0x4010
 8000fb0:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000fb4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000fb8:	f000 fbd2 	bl	8001760 <assert_failed>
 8000fbc:	89a9      	ldrh	r1, [r5, #12]

  /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 8000fbe:	2900      	cmp	r1, #0
 8000fc0:	d16f      	bne.n	80010a2 <USART_Init+0x1aa>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000fc2:	8a22      	ldrh	r2, [r4, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000fc4:	88eb      	ldrh	r3, [r5, #6]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000fc6:	892f      	ldrh	r7, [r5, #8]
 8000fc8:	88ae      	ldrh	r6, [r5, #4]
 8000fca:	8968      	ldrh	r0, [r5, #10]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000fcc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	0c12      	lsrs	r2, r2, #16
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	8222      	strh	r2, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000fd8:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000fda:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000fde:	ea47 0206 	orr.w	r2, r7, r6

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000fe2:	f023 030c 	bic.w	r3, r3, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000fe6:	4302      	orrs	r2, r0

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000fe8:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000fea:	b292      	uxth	r2, r2

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000fec:	0c1b      	lsrs	r3, r3, #16
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000ff2:	8aa3      	ldrh	r3, [r4, #20]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ff8:	041b      	lsls	r3, r3, #16
 8000ffa:	0c1b      	lsrs	r3, r3, #16
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001000:	4668      	mov	r0, sp
 8001002:	f7ff fec1 	bl	8000d88 <RCC_GetClocksFreq>
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001006:	89a6      	ldrh	r6, [r4, #12]
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001008:	9802      	ldr	r0, [sp, #8]
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800100a:	9b03      	ldr	r3, [sp, #12]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
 800100c:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8001010:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001014:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8001018:	f2c4 0201 	movt	r2, #16385	; 0x4001
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800101c:	4294      	cmp	r4, r2
 800101e:	bf18      	it	ne
 8001020:	428c      	cmpne	r4, r1
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001022:	b232      	sxth	r2, r6
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001024:	bf18      	it	ne
 8001026:	4603      	movne	r3, r0
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001028:	2a00      	cmp	r2, #0
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800102a:	682a      	ldr	r2, [r5, #0]

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800102c:	89a0      	ldrh	r0, [r4, #12]
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800102e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001032:	bfb4      	ite	lt
 8001034:	0052      	lsllt	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001036:	0092      	lslge	r2, r2, #2
 8001038:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800103c:	fbb3 f3f2 	udiv	r3, r3, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8001040:	f248 521f 	movw	r2, #34079	; 0x851f
 8001044:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
 8001048:	fba2 5103 	umull	r5, r1, r2, r3

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800104c:	b200      	sxth	r0, r0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800104e:	2564      	movs	r5, #100	; 0x64
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8001050:	0949      	lsrs	r1, r1, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001052:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001054:	fb01 3315 	mls	r3, r1, r5, r3

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001058:	bfb5      	itete	lt
 800105a:	00db      	lsllt	r3, r3, #3
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800105c:	011b      	lslge	r3, r3, #4
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800105e:	3332      	addlt	r3, #50	; 0x32
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001060:	3332      	addge	r3, #50	; 0x32
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001062:	bfb5      	itete	lt
 8001064:	fba2 0203 	umulllt	r0, r2, r2, r3
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001068:	fba2 5203 	umullge	r5, r2, r2, r3
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800106c:	f3c2 1242 	ubfxlt	r2, r2, #5, #3
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001070:	f3c2 1243 	ubfxge	r2, r2, #5, #4
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001074:	0109      	lsls	r1, r1, #4
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001076:	4311      	orrs	r1, r2
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001078:	b289      	uxth	r1, r1
 800107a:	8121      	strh	r1, [r4, #8]
}
 800107c:	b005      	add	sp, #20
 800107e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
  assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 8001080:	f244 0010 	movw	r0, #16400	; 0x4010
 8001084:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001088:	f240 1103 	movw	r1, #259	; 0x103
 800108c:	f000 fb68 	bl	8001760 <assert_failed>
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 8001090:	89ab      	ldrh	r3, [r5, #12]
 8001092:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8001096:	401a      	ands	r2, r3
 8001098:	2a00      	cmp	r2, #0
 800109a:	d183      	bne.n	8000fa4 <USART_Init+0xac>
 800109c:	4619      	mov	r1, r3

  /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 800109e:	2900      	cmp	r1, #0
 80010a0:	d08f      	beq.n	8000fc2 <USART_Init+0xca>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 80010a2:	2e00      	cmp	r6, #0
 80010a4:	d08d      	beq.n	8000fc2 <USART_Init+0xca>
 80010a6:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 80010aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010ae:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80010b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80010b6:	4294      	cmp	r4, r2
 80010b8:	bf18      	it	ne
 80010ba:	429c      	cmpne	r4, r3
 80010bc:	d081      	beq.n	8000fc2 <USART_Init+0xca>
 80010be:	f244 0010 	movw	r0, #16400	; 0x4010
 80010c2:	f240 1109 	movw	r1, #265	; 0x109
 80010c6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80010ca:	f000 fb49 	bl	8001760 <assert_failed>
 80010ce:	89a9      	ldrh	r1, [r5, #12]
 80010d0:	e777      	b.n	8000fc2 <USART_Init+0xca>
  uint32_t integerdivider = 0x00;
  uint32_t fractionaldivider = 0x00;
  RCC_ClocksTypeDef RCC_ClocksStatus;

  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80010d2:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 80010d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010da:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80010de:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80010e2:	4290      	cmp	r0, r2
 80010e4:	bf18      	it	ne
 80010e6:	4298      	cmpne	r0, r3
 80010e8:	f43f af26 	beq.w	8000f38 <USART_Init+0x40>
 80010ec:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 80010f0:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80010f4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80010f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80010fc:	4290      	cmp	r0, r2
 80010fe:	bf18      	it	ne
 8001100:	4298      	cmpne	r0, r3
 8001102:	f43f af19 	beq.w	8000f38 <USART_Init+0x40>
 8001106:	f244 0010 	movw	r0, #16400	; 0x4010
 800110a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800110e:	21fe      	movs	r1, #254	; 0xfe
 8001110:	f000 fb26 	bl	8001760 <assert_failed>
 8001114:	e710      	b.n	8000f38 <USART_Init+0x40>
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 8001116:	f244 0010 	movw	r0, #16400	; 0x4010
 800111a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800111e:	21ff      	movs	r1, #255	; 0xff
 8001120:	f000 fb1e 	bl	8001760 <assert_failed>
 8001124:	e711      	b.n	8000f4a <USART_Init+0x52>
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 8001126:	f244 0010 	movw	r0, #16400	; 0x4010
 800112a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800112e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001132:	f000 fb15 	bl	8001760 <assert_failed>
 8001136:	e710      	b.n	8000f5a <USART_Init+0x62>
 8001138:	4619      	mov	r1, r3
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));

  /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 800113a:	2e00      	cmp	r6, #0
 800113c:	f43f af41 	beq.w	8000fc2 <USART_Init+0xca>
 8001140:	e7b1      	b.n	80010a6 <USART_Init+0x1ae>

  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
  assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 8001142:	f244 0010 	movw	r0, #16400	; 0x4010
 8001146:	f6c0 0000 	movt	r0, #2048	; 0x800
 800114a:	f240 1101 	movw	r1, #257	; 0x101
 800114e:	f000 fb07 	bl	8001760 <assert_failed>
 8001152:	e709      	b.n	8000f68 <USART_Init+0x70>

08001154 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001154:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8001156:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800115a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800115e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001162:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001166:	4290      	cmp	r0, r2
 8001168:	bf18      	it	ne
 800116a:	4298      	cmpne	r0, r3
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800116c:	4604      	mov	r4, r0
 800116e:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8001170:	d00b      	beq.n	800118a <USART_Cmd+0x36>
 8001172:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8001176:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 800117a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800117e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001182:	4290      	cmp	r0, r2
 8001184:	bf18      	it	ne
 8001186:	4298      	cmpne	r0, r3
 8001188:	d10f      	bne.n	80011aa <USART_Cmd+0x56>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800118a:	2d01      	cmp	r5, #1
 800118c:	d92e      	bls.n	80011ec <USART_Cmd+0x98>
 800118e:	f244 0010 	movw	r0, #16400	; 0x4010
 8001192:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001196:	f240 11af 	movw	r1, #431	; 0x1af
 800119a:	f000 fae1 	bl	8001760 <assert_failed>
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800119e:	89a3      	ldrh	r3, [r4, #12]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011a6:	81a3      	strh	r3, [r4, #12]
 80011a8:	bd38      	pop	{r3, r4, r5, pc}
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80011aa:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 80011ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011b2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80011b6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80011ba:	4290      	cmp	r0, r2
 80011bc:	bf18      	it	ne
 80011be:	4298      	cmpne	r0, r3
 80011c0:	d0e3      	beq.n	800118a <USART_Cmd+0x36>
 80011c2:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 80011c6:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80011ca:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80011ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80011d2:	4290      	cmp	r0, r2
 80011d4:	bf18      	it	ne
 80011d6:	4298      	cmpne	r0, r3
 80011d8:	d0d7      	beq.n	800118a <USART_Cmd+0x36>
 80011da:	f244 0010 	movw	r0, #16400	; 0x4010
 80011de:	f6c0 0000 	movt	r0, #2048	; 0x800
 80011e2:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80011e6:	f000 fabb 	bl	8001760 <assert_failed>
 80011ea:	e7ce      	b.n	800118a <USART_Cmd+0x36>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80011ec:	2d00      	cmp	r5, #0
 80011ee:	d1d6      	bne.n	800119e <USART_Cmd+0x4a>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80011f0:	89a3      	ldrh	r3, [r4, #12]
 80011f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011f6:	041b      	lsls	r3, r3, #16
 80011f8:	0c1b      	lsrs	r3, r3, #16
 80011fa:	81a3      	strh	r3, [r4, #12]
 80011fc:	bd38      	pop	{r3, r4, r5, pc}
 80011fe:	bf00      	nop

08001200 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001200:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8001202:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001206:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800120a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800120e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001212:	4290      	cmp	r0, r2
 8001214:	bf18      	it	ne
 8001216:	4298      	cmpne	r0, r3
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001218:	4604      	mov	r4, r0
 800121a:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 800121c:	d00b      	beq.n	8001236 <USART_SendData+0x36>
 800121e:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8001222:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8001226:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800122a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800122e:	4290      	cmp	r0, r2
 8001230:	bf18      	it	ne
 8001232:	4298      	cmpne	r0, r3
 8001234:	d10e      	bne.n	8001254 <USART_SendData+0x54>
  assert_param(IS_USART_DATA(Data)); 
 8001236:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800123a:	d307      	bcc.n	800124c <USART_SendData+0x4c>
 800123c:	f244 0010 	movw	r0, #16400	; 0x4010
 8001240:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001244:	f240 2131 	movw	r1, #561	; 0x231
 8001248:	f000 fa8a 	bl	8001760 <assert_failed>
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800124c:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8001250:	80a5      	strh	r5, [r4, #4]
 8001252:	bd38      	pop	{r3, r4, r5, pc}
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8001254:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8001258:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800125c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001260:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001264:	4290      	cmp	r0, r2
 8001266:	bf18      	it	ne
 8001268:	4298      	cmpne	r0, r3
 800126a:	d0e4      	beq.n	8001236 <USART_SendData+0x36>
 800126c:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8001270:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8001274:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001278:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800127c:	4290      	cmp	r0, r2
 800127e:	bf18      	it	ne
 8001280:	4298      	cmpne	r0, r3
 8001282:	d0d8      	beq.n	8001236 <USART_SendData+0x36>
 8001284:	f244 0010 	movw	r0, #16400	; 0x4010
 8001288:	f6c0 0000 	movt	r0, #2048	; 0x800
 800128c:	f44f 710c 	mov.w	r1, #560	; 0x230
 8001290:	f000 fa66 	bl	8001760 <assert_failed>
 8001294:	e7cf      	b.n	8001236 <USART_SendData+0x36>
 8001296:	bf00      	nop

08001298 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
  uint32_t usartxbase = 0x00;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 800129a:	f44f 4688 	mov.w	r6, #17408	; 0x4400
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	f2c4 0600 	movt	r6, #16384	; 0x4000
 80012a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80012aa:	42b0      	cmp	r0, r6
 80012ac:	bf18      	it	ne
 80012ae:	4298      	cmpne	r0, r3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80012b0:	4604      	mov	r4, r0
 80012b2:	460d      	mov	r5, r1
 80012b4:	4617      	mov	r7, r2
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
  uint32_t usartxbase = 0x00;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80012b6:	bf0c      	ite	eq
 80012b8:	2600      	moveq	r6, #0
 80012ba:	2601      	movne	r6, #1
 80012bc:	d00b      	beq.n	80012d6 <USART_ITConfig+0x3e>
 80012be:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80012c2:	f44f 4298 	mov.w	r2, #19456	; 0x4c00
 80012c6:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80012ca:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80012ce:	4288      	cmp	r0, r1
 80012d0:	bf18      	it	ne
 80012d2:	4290      	cmpne	r0, r2
 80012d4:	d148      	bne.n	8001368 <USART_ITConfig+0xd0>
  assert_param(IS_USART_CONFIG_IT(USART_IT));
 80012d6:	f240 7227 	movw	r2, #1831	; 0x727
 80012da:	2d28      	cmp	r5, #40	; 0x28
 80012dc:	bf18      	it	ne
 80012de:	4295      	cmpne	r5, r2
 80012e0:	d007      	beq.n	80012f2 <USART_ITConfig+0x5a>
 80012e2:	f240 6226 	movw	r2, #1574	; 0x626
 80012e6:	f240 5325 	movw	r3, #1317	; 0x525
 80012ea:	4295      	cmp	r5, r2
 80012ec:	bf18      	it	ne
 80012ee:	429d      	cmpne	r5, r3
 80012f0:	d123      	bne.n	800133a <USART_ITConfig+0xa2>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80012f2:	2f01      	cmp	r7, #1
 80012f4:	d907      	bls.n	8001306 <USART_ITConfig+0x6e>
 80012f6:	f244 0010 	movw	r0, #16400	; 0x4010
 80012fa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80012fe:	f240 41d6 	movw	r1, #1238	; 0x4d6
 8001302:	f000 fa2d 	bl	8001760 <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */
  if (USART_IT == USART_IT_CTS)
 8001306:	f640 126a 	movw	r2, #2410	; 0x96a
 800130a:	4295      	cmp	r5, r2
 800130c:	d050      	beq.n	80013b0 <USART_ITConfig+0x118>
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800130e:	f005 031f 	and.w	r3, r5, #31
 8001312:	2201      	movs	r2, #1
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001314:	f3c5 1542 	ubfx	r5, r5, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001318:	4295      	cmp	r5, r2
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 800131e:	bf08      	it	eq
 8001320:	340c      	addeq	r4, #12

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001322:	d004      	beq.n	800132e <USART_ITConfig+0x96>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001324:	2d02      	cmp	r5, #2
  {
    usartxbase += 0x10;
 8001326:	bf08      	it	eq
 8001328:	3410      	addeq	r4, #16
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800132a:	d000      	beq.n	800132e <USART_ITConfig+0x96>
  {
    usartxbase += 0x10;
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800132c:	3414      	adds	r4, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800132e:	6822      	ldr	r2, [r4, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8001330:	bbdf      	cbnz	r7, 80013aa <USART_ITConfig+0x112>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001332:	ea22 0303 	bic.w	r3, r2, r3
 8001336:	6023      	str	r3, [r4, #0]
 8001338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
  uint32_t usartxbase = 0x00;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
 800133a:	f240 4224 	movw	r2, #1060	; 0x424
 800133e:	f640 0346 	movw	r3, #2118	; 0x846
 8001342:	4295      	cmp	r5, r2
 8001344:	bf18      	it	ne
 8001346:	429d      	cmpne	r5, r3
 8001348:	d0d3      	beq.n	80012f2 <USART_ITConfig+0x5a>
 800134a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800134e:	429d      	cmp	r5, r3
 8001350:	bf18      	it	ne
 8001352:	2d60      	cmpne	r5, #96	; 0x60
 8001354:	d0cd      	beq.n	80012f2 <USART_ITConfig+0x5a>
 8001356:	f244 0010 	movw	r0, #16400	; 0x4010
 800135a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800135e:	f240 41d5 	movw	r1, #1237	; 0x4d5
 8001362:	f000 f9fd 	bl	8001760 <assert_failed>
 8001366:	e7c4      	b.n	80012f2 <USART_ITConfig+0x5a>
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
  uint32_t usartxbase = 0x00;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8001368:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800136c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001370:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001374:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001378:	4290      	cmp	r0, r2
 800137a:	bf18      	it	ne
 800137c:	4298      	cmpne	r0, r3
 800137e:	d0aa      	beq.n	80012d6 <USART_ITConfig+0x3e>
 8001380:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8001384:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8001388:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800138c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001390:	4290      	cmp	r0, r2
 8001392:	bf18      	it	ne
 8001394:	4298      	cmpne	r0, r3
 8001396:	d09e      	beq.n	80012d6 <USART_ITConfig+0x3e>
 8001398:	f244 0010 	movw	r0, #16400	; 0x4010
 800139c:	f6c0 0000 	movt	r0, #2048	; 0x800
 80013a0:	f240 41d4 	movw	r1, #1236	; 0x4d4
 80013a4:	f000 f9dc 	bl	8001760 <assert_failed>
 80013a8:	e795      	b.n	80012d6 <USART_ITConfig+0x3e>
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80013aa:	4313      	orrs	r3, r2
 80013ac:	6023      	str	r3, [r4, #0]
 80013ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* The CTS interrupt is not available for UART4 and UART5 */
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 80013b0:	b15e      	cbz	r6, 80013ca <USART_ITConfig+0x132>
 80013b2:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 80013b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013ba:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80013be:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80013c2:	4294      	cmp	r4, r2
 80013c4:	bf18      	it	ne
 80013c6:	429c      	cmpne	r4, r3
 80013c8:	d102      	bne.n	80013d0 <USART_ITConfig+0x138>
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80013ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ce:	e7ad      	b.n	800132c <USART_ITConfig+0x94>
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* The CTS interrupt is not available for UART4 and UART5 */
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 80013d0:	f244 0010 	movw	r0, #16400	; 0x4010
 80013d4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80013d8:	f240 41db 	movw	r1, #1243	; 0x4db
 80013dc:	f000 f9c0 	bl	8001760 <assert_failed>
 80013e0:	e7f3      	b.n	80013ca <USART_ITConfig+0x132>
 80013e2:	bf00      	nop

080013e4 <USART_GetITStatus>:
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80013e4:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 80013e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ec:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80013f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80013f4:	4290      	cmp	r0, r2
 80013f6:	bf18      	it	ne
 80013f8:	4298      	cmpne	r0, r3
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80013fa:	b570      	push	{r4, r5, r6, lr}
 80013fc:	4604      	mov	r4, r0
 80013fe:	460d      	mov	r5, r1
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8001400:	bf0c      	ite	eq
 8001402:	2600      	moveq	r6, #0
 8001404:	2601      	movne	r6, #1
 8001406:	d00b      	beq.n	8001420 <USART_GetITStatus+0x3c>
 8001408:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800140c:	f44f 4198 	mov.w	r1, #19456	; 0x4c00
 8001410:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001414:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8001418:	4284      	cmp	r4, r0
 800141a:	bf18      	it	ne
 800141c:	428c      	cmpne	r4, r1
 800141e:	d151      	bne.n	80014c4 <USART_GetITStatus+0xe0>
  assert_param(IS_USART_GET_IT(USART_IT)); 
 8001420:	f240 7127 	movw	r1, #1831	; 0x727
 8001424:	2d28      	cmp	r5, #40	; 0x28
 8001426:	bf18      	it	ne
 8001428:	428d      	cmpne	r5, r1
 800142a:	d007      	beq.n	800143c <USART_GetITStatus+0x58>
 800142c:	f240 6226 	movw	r2, #1574	; 0x626
 8001430:	f240 5325 	movw	r3, #1317	; 0x525
 8001434:	4295      	cmp	r5, r2
 8001436:	bf18      	it	ne
 8001438:	429d      	cmpne	r5, r3
 800143a:	d121      	bne.n	8001480 <USART_GetITStatus+0x9c>

  /* The CTS interrupt is not available for UART4 and UART5 */ 
  if (USART_IT == USART_IT_CTS)
 800143c:	f640 116a 	movw	r1, #2410	; 0x96a
 8001440:	428d      	cmp	r5, r1
 8001442:	d064      	beq.n	800150e <USART_GetITStatus+0x12a>
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001444:	2001      	movs	r0, #1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001446:	f3c5 1342 	ubfx	r3, r5, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 800144a:	f005 021f 	and.w	r2, r5, #31
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800144e:	4283      	cmp	r3, r0
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001450:	fa00 f202 	lsl.w	r2, r0, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001454:	d057      	beq.n	8001506 <USART_GetITStatus+0x122>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001456:	2b02      	cmp	r3, #2
 8001458:	d069      	beq.n	800152e <USART_GetITStatus+0x14a>
  {
    itmask &= USARTx->CR2;
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800145a:	8aa0      	ldrh	r0, [r4, #20]
 800145c:	b280      	uxth	r0, r0
 800145e:	4010      	ands	r0, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8001460:	8823      	ldrh	r3, [r4, #0]
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8001462:	2101      	movs	r1, #1
 8001464:	0a2d      	lsrs	r5, r5, #8
  bitpos &= USARTx->SR;
 8001466:	b29b      	uxth	r3, r3
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8001468:	fa01 f505 	lsl.w	r5, r1, r5
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800146c:	421d      	tst	r5, r3
 800146e:	bf0c      	ite	eq
 8001470:	2300      	moveq	r3, #0
 8001472:	2301      	movne	r3, #1
  else
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
 8001474:	2800      	cmp	r0, #0
 8001476:	bf0c      	ite	eq
 8001478:	2000      	moveq	r0, #0
 800147a:	f003 0001 	andne.w	r0, r3, #1
 800147e:	bd70      	pop	{r4, r5, r6, pc}
{
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
 8001480:	f240 4224 	movw	r2, #1060	; 0x424
 8001484:	f640 0346 	movw	r3, #2118	; 0x846
 8001488:	4295      	cmp	r5, r2
 800148a:	bf18      	it	ne
 800148c:	429d      	cmpne	r5, r3
 800148e:	d0d5      	beq.n	800143c <USART_GetITStatus+0x58>
 8001490:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8001494:	429d      	cmp	r5, r3
 8001496:	d03a      	beq.n	800150e <USART_GetITStatus+0x12a>
 8001498:	f240 3325 	movw	r3, #805	; 0x325
 800149c:	429d      	cmp	r5, r3
 800149e:	d0d1      	beq.n	8001444 <USART_GetITStatus+0x60>
 80014a0:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80014a4:	402b      	ands	r3, r5
 80014a6:	f5b5 7f18 	cmp.w	r5, #608	; 0x260
 80014aa:	bf18      	it	ne
 80014ac:	f5b3 7fb0 	cmpne.w	r3, #352	; 0x160
 80014b0:	d0c8      	beq.n	8001444 <USART_GetITStatus+0x60>
 80014b2:	f244 0010 	movw	r0, #16400	; 0x4010
 80014b6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80014ba:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 80014be:	f000 f94f 	bl	8001760 <assert_failed>
 80014c2:	e7bf      	b.n	8001444 <USART_GetITStatus+0x60>
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80014c4:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 80014c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014cc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80014d0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80014d4:	4294      	cmp	r4, r2
 80014d6:	bf18      	it	ne
 80014d8:	429c      	cmpne	r4, r3
 80014da:	d0a1      	beq.n	8001420 <USART_GetITStatus+0x3c>
 80014dc:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 80014e0:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80014e4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80014e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80014ec:	4294      	cmp	r4, r2
 80014ee:	bf18      	it	ne
 80014f0:	429c      	cmpne	r4, r3
 80014f2:	d095      	beq.n	8001420 <USART_GetITStatus+0x3c>
 80014f4:	f244 0010 	movw	r0, #16400	; 0x4010
 80014f8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80014fc:	f240 5167 	movw	r1, #1383	; 0x567
 8001500:	f000 f92e 	bl	8001760 <assert_failed>
 8001504:	e78c      	b.n	8001420 <USART_GetITStatus+0x3c>
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 8001506:	89a0      	ldrh	r0, [r4, #12]
 8001508:	b280      	uxth	r0, r0
 800150a:	4010      	ands	r0, r2
 800150c:	e7a8      	b.n	8001460 <USART_GetITStatus+0x7c>
  assert_param(IS_USART_GET_IT(USART_IT)); 

  /* The CTS interrupt is not available for UART4 and UART5 */ 
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 800150e:	b15e      	cbz	r6, 8001528 <USART_GetITStatus+0x144>
 8001510:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8001514:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001518:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800151c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001520:	4294      	cmp	r4, r2
 8001522:	bf18      	it	ne
 8001524:	429c      	cmpne	r4, r3
 8001526:	d106      	bne.n	8001536 <USART_GetITStatus+0x152>
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001528:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800152c:	e795      	b.n	800145a <USART_GetITStatus+0x76>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
  {
    itmask &= USARTx->CR2;
 800152e:	8a20      	ldrh	r0, [r4, #16]
 8001530:	b280      	uxth	r0, r0
 8001532:	4010      	ands	r0, r2
 8001534:	e794      	b.n	8001460 <USART_GetITStatus+0x7c>
  assert_param(IS_USART_GET_IT(USART_IT)); 

  /* The CTS interrupt is not available for UART4 and UART5 */ 
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8001536:	f244 0010 	movw	r0, #16400	; 0x4010
 800153a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800153e:	f240 516d 	movw	r1, #1389	; 0x56d
 8001542:	f000 f90d 	bl	8001760 <assert_failed>
 8001546:	e7ef      	b.n	8001528 <USART_GetITStatus+0x144>

08001548 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001548:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800154c:	f2ce 0200 	movt	r2, #57344	; 0xe000
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001550:	f44f 5360 	mov.w	r3, #14336	; 0x3800
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001554:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001558:	f2c4 0302 	movt	r3, #16386	; 0x4002
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800155c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001560:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001564:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001566:	2200      	movs	r2, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001568:	f041 0101 	orr.w	r1, r1, #1
 800156c:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800156e:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001570:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001572:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001576:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800157a:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800157e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8001582:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001584:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001586:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001588:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800158a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800158e:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001590:	60da      	str	r2, [r3, #12]
{
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F446xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001592:	9200      	str	r2, [sp, #0]
 8001594:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800159c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800159e:	461a      	mov	r2, r3
 80015a0:	e003      	b.n	80015aa <SystemInit+0x62>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80015a2:	9b00      	ldr	r3, [sp, #0]
 80015a4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80015a8:	d009      	beq.n	80015be <SystemInit+0x76>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80015aa:	6813      	ldr	r3, [r2, #0]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 80015b2:	9b00      	ldr	r3, [sp, #0]
 80015b4:	3301      	adds	r3, #1
 80015b6:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80015b8:	9b01      	ldr	r3, [sp, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f1      	beq.n	80015a2 <SystemInit+0x5a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80015be:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80015cc:	bf18      	it	ne
 80015ce:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80015d0:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 80015d2:	9b01      	ldr	r3, [sp, #4]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d008      	beq.n	80015ea <SystemInit+0xa2>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015d8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80015dc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80015e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015e4:	609a      	str	r2, [r3, #8]
#endif
}
 80015e6:	b002      	add	sp, #8
 80015e8:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80015ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
    PWR->CR |= PWR_CR_VOS;
 80015f2:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80015f6:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80015f8:	f2c4 0200 	movt	r2, #16384	; 0x4000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80015fc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001600:	6419      	str	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001602:	6811      	ldr	r1, [r2, #0]
 8001604:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001608:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
#endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx || STM32F446xx */

#if defined(STM32F401xx)
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8001612:	6899      	ldr	r1, [r3, #8]
#endif /* STM32F401xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001614:	f245 4208 	movw	r2, #21512	; 0x5408
#if defined(STM32F401xx)
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8001618:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
#endif /* STM32F401xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800161c:	f2c0 7241 	movt	r2, #1857	; 0x741
#if defined(STM32F401xx)
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8001620:	6099      	str	r1, [r3, #8]
#endif /* STM32F401xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001622:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800162a:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800162c:	4619      	mov	r1, r3
 800162e:	680a      	ldr	r2, [r1, #0]
 8001630:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001634:	0192      	lsls	r2, r2, #6
 8001636:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800163a:	d5f8      	bpl.n	800162e <SystemInit+0xe6>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F40_41xxx  */

#if defined(STM32F401xx)
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800163c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8001640:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001644:	f240 7102 	movw	r1, #1794	; 0x702
 8001648:	6011      	str	r1, [r2, #0]
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	f022 0203 	bic.w	r2, r2, #3
 8001650:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	f042 0202 	orr.w	r2, r2, #2
 8001658:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	f002 020c 	and.w	r2, r2, #12
 8001660:	2a08      	cmp	r2, #8
 8001662:	d1fa      	bne.n	800165a <SystemInit+0x112>
 8001664:	e7b8      	b.n	80015d8 <SystemInit+0x90>
 8001666:	bf00      	nop

08001668 <vTask2>:
			}
		vTaskDelay(1);
	}
}
void vTask2( void * pvParameters )
{
 8001668:	b508      	push	{r3, lr}
 800166a:	f240 0410 	movw	r4, #16
 800166e:	f2c2 0400 	movt	r4, #8192	; 0x2000
	for(;;)
	{
		LED_On();
 8001672:	f000 f893 	bl	800179c <LED_On>
		vDebugPrintf("Task2 is created !!\n\r");
 8001676:	f244 004c 	movw	r0, #16460	; 0x404c
 800167a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800167e:	f000 fb9f 	bl	8001dc0 <vDebugPrintf>
//	ptr = pvPortMalloc(j*sizeof(uint8_t));
//	if(ptr == NULL)
//	{
//		return -1;
//	}
	vDebugPrintf("malloc %d bytes \r\n",j);
 8001682:	f244 0064 	movw	r0, #16484	; 0x4064
 8001686:	f6c0 0000 	movt	r0, #2048	; 0x800
 800168a:	8821      	ldrh	r1, [r4, #0]
 800168c:	f000 fb98 	bl	8001dc0 <vDebugPrintf>
	for(i =0;i<j;i++)
 8001690:	8822      	ldrh	r2, [r4, #0]
 8001692:	b122      	cbz	r2, 800169e <vTask2+0x36>
 8001694:	2300      	movs	r3, #0
 8001696:	3301      	adds	r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	429a      	cmp	r2, r3
 800169c:	d8fb      	bhi.n	8001696 <vTask2+0x2e>
		{
			*ptr = i;
			ptr++;
		}
	j++;
 800169e:	3201      	adds	r2, #1
		vDebugPrintf("Task2 is created !!\n\r");
		if(vFuncCallMalloc() == -1)
		{
			vDebugPrintf("out of stack \n\r");
		}
		vTaskDelay(1);
 80016a0:	2001      	movs	r0, #1
	for(i =0;i<j;i++)
		{
			*ptr = i;
			ptr++;
		}
	j++;
 80016a2:	8022      	strh	r2, [r4, #0]
		vDebugPrintf("Task2 is created !!\n\r");
		if(vFuncCallMalloc() == -1)
		{
			vDebugPrintf("out of stack \n\r");
		}
		vTaskDelay(1);
 80016a4:	f001 f832 	bl	800270c <vTaskDelay>
	}
 80016a8:	e7e3      	b.n	8001672 <vTask2+0xa>
 80016aa:	bf00      	nop

080016ac <vTask1>:

}


void vTask1( void * pvParameters )
{
 80016ac:	b508      	push	{r3, lr}
 80016ae:	f240 0410 	movw	r4, #16
 80016b2:	f2c2 0400 	movt	r4, #8192	; 0x2000

	for(;;)
	{

		LED_On();
 80016b6:	f000 f871 	bl	800179c <LED_On>
		vDebugPrintf("Task1 is created !!\n\r");
 80016ba:	f244 0078 	movw	r0, #16504	; 0x4078
 80016be:	f6c0 0000 	movt	r0, #2048	; 0x800
 80016c2:	f000 fb7d 	bl	8001dc0 <vDebugPrintf>
//	ptr = pvPortMalloc(j*sizeof(uint8_t));
//	if(ptr == NULL)
//	{
//		return -1;
//	}
	vDebugPrintf("malloc %d bytes \r\n",j);
 80016c6:	f244 0064 	movw	r0, #16484	; 0x4064
 80016ca:	f6c0 0000 	movt	r0, #2048	; 0x800
 80016ce:	8821      	ldrh	r1, [r4, #0]
 80016d0:	f000 fb76 	bl	8001dc0 <vDebugPrintf>
	for(i =0;i<j;i++)
 80016d4:	8822      	ldrh	r2, [r4, #0]
 80016d6:	b122      	cbz	r2, 80016e2 <vTask1+0x36>
 80016d8:	2300      	movs	r3, #0
 80016da:	3301      	adds	r3, #1
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	429a      	cmp	r2, r3
 80016e0:	d8fb      	bhi.n	80016da <vTask1+0x2e>
		{
			*ptr = i;
			ptr++;
		}
	j++;
 80016e2:	3201      	adds	r2, #1
		vDebugPrintf("Task1 is created !!\n\r");
		if(vFuncCallMalloc() == -1)
			{
				vDebugPrintf("out of stack \n\r");
			}
		vTaskDelay(1);
 80016e4:	2001      	movs	r0, #1
	for(i =0;i<j;i++)
		{
			*ptr = i;
			ptr++;
		}
	j++;
 80016e6:	8022      	strh	r2, [r4, #0]
		vDebugPrintf("Task1 is created !!\n\r");
		if(vFuncCallMalloc() == -1)
			{
				vDebugPrintf("out of stack \n\r");
			}
		vTaskDelay(1);
 80016e8:	f001 f810 	bl	800270c <vTaskDelay>
	}
 80016ec:	e7e3      	b.n	80016b6 <vTask1+0xa>
 80016ee:	bf00      	nop

080016f0 <main>:




int main(void)
{
 80016f0:	b500      	push	{lr}
 80016f2:	b085      	sub	sp, #20



    InitFifo();
 80016f4:	f000 fa9c 	bl	8001c30 <InitFifo>
    USART_Config();
 80016f8:	f000 faee 	bl	8001cd8 <USART_Config>
	LED_Init();
 80016fc:	f000 f832 	bl	8001764 <LED_Init>
	 vDebugPrintf("hello %d %d\n\r", 1000,2000);
 8001700:	f244 0090 	movw	r0, #16528	; 0x4090
 8001704:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001708:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800170c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001710:	f000 fb56 	bl	8001dc0 <vDebugPrintf>
	 xTaskCreate(	vTask1,"Task1",200,NULL,1,NULL);
 8001714:	2400      	movs	r4, #0
 8001716:	2501      	movs	r5, #1
 8001718:	f241 60ad 	movw	r0, #5805	; 0x16ad
 800171c:	f244 01a0 	movw	r1, #16544	; 0x40a0
 8001720:	4623      	mov	r3, r4
 8001722:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001726:	22c8      	movs	r2, #200	; 0xc8
 8001728:	9500      	str	r5, [sp, #0]
 800172a:	9401      	str	r4, [sp, #4]
 800172c:	9402      	str	r4, [sp, #8]
 800172e:	9403      	str	r4, [sp, #12]
 8001730:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001734:	f000 fd0e 	bl	8002154 <xTaskGenericCreate>
	 xTaskCreate(	vTask2,"Task2",200,NULL,1,NULL);
 8001738:	f241 6069 	movw	r0, #5737	; 0x1669
 800173c:	f244 01a8 	movw	r1, #16552	; 0x40a8
 8001740:	4623      	mov	r3, r4
 8001742:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001746:	22c8      	movs	r2, #200	; 0xc8
 8001748:	9500      	str	r5, [sp, #0]
 800174a:	9401      	str	r4, [sp, #4]
 800174c:	9402      	str	r4, [sp, #8]
 800174e:	9403      	str	r4, [sp, #12]
 8001750:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001754:	f000 fcfe 	bl	8002154 <xTaskGenericCreate>

	 vTaskStartScheduler();
 8001758:	f000 fdf0 	bl	800233c <vTaskStartScheduler>
 800175c:	e7fe      	b.n	800175c <main+0x6c>
 800175e:	bf00      	nop

08001760 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
 8001760:	e7fe      	b.n	8001760 <assert_failed>
 8001762:	bf00      	nop

08001764 <LED_Init>:
#include "led.h"

void LED_Init(void)
{
 8001764:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef  GPIO_InitStructure;

	 /* GPIOD Periph clock enable */
	  RCC_AHB1PeriphClockCmd(LED_RCC_Clk, ENABLE);
 8001766:	2001      	movs	r0, #1
#include "led.h"

void LED_Init(void)
{
 8001768:	b083      	sub	sp, #12
	GPIO_InitTypeDef  GPIO_InitStructure;

	 /* GPIOD Periph clock enable */
	  RCC_AHB1PeriphClockCmd(LED_RCC_Clk, ENABLE);
 800176a:	4601      	mov	r1, r0
 800176c:	f7ff fb64 	bl	8000e38 <RCC_AHB1PeriphClockCmd>
	  GPIO_InitStructure.GPIO_Pin = LED_Pin;
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	  GPIO_Init(LED_Port, &GPIO_InitStructure);
 8001770:	2000      	movs	r0, #0
	  RCC_AHB1PeriphClockCmd(LED_RCC_Clk, ENABLE);

	  /* Configure PD12, PD13, PD14 and PD15 in output pushpull mode */
	  GPIO_InitStructure.GPIO_Pin = LED_Pin;
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001772:	2300      	movs	r3, #0
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001774:	2203      	movs	r2, #3
	  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	  GPIO_Init(LED_Port, &GPIO_InitStructure);
 8001776:	f2c4 0002 	movt	r0, #16386	; 0x4002

	 /* GPIOD Periph clock enable */
	  RCC_AHB1PeriphClockCmd(LED_RCC_Clk, ENABLE);

	  /* Configure PD12, PD13, PD14 and PD15 in output pushpull mode */
	  GPIO_InitStructure.GPIO_Pin = LED_Pin;
 800177a:	2520      	movs	r5, #32
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800177c:	2401      	movs	r4, #1
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	  GPIO_Init(LED_Port, &GPIO_InitStructure);
 800177e:	4669      	mov	r1, sp

	 /* GPIOD Periph clock enable */
	  RCC_AHB1PeriphClockCmd(LED_RCC_Clk, ENABLE);

	  /* Configure PD12, PD13, PD14 and PD15 in output pushpull mode */
	  GPIO_InitStructure.GPIO_Pin = LED_Pin;
 8001780:	9500      	str	r5, [sp, #0]
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001782:	f88d 4004 	strb.w	r4, [sp, #4]
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001786:	f88d 3006 	strb.w	r3, [sp, #6]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800178a:	f88d 3007 	strb.w	r3, [sp, #7]

	  /* Configure PD12, PD13, PD14 and PD15 in output pushpull mode */
	  GPIO_InitStructure.GPIO_Pin = LED_Pin;
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800178e:	f88d 2005 	strb.w	r2, [sp, #5]
	  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	  GPIO_Init(LED_Port, &GPIO_InitStructure);
 8001792:	f7fe fe45 	bl	8000420 <GPIO_Init>
}
 8001796:	b003      	add	sp, #12
 8001798:	bd30      	pop	{r4, r5, pc}
 800179a:	bf00      	nop

0800179c <LED_On>:

void LED_On(void)
{
	GPIO_SetBits(LED_Port, LED_Pin);
 800179c:	2000      	movs	r0, #0
 800179e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80017a2:	2120      	movs	r1, #32
 80017a4:	f7fe bf18 	b.w	80005d8 <GPIO_SetBits>

080017a8 <SPI2_IRQHandler>:
	 /* Enable SPI1 */
	SPI_Cmd(SPIx, ENABLE);
}
void SPIx_IRQHandler (void){

	if(SPI_I2S_GetITStatus(SPIx,SPI_I2S_IT_TXE)!=RESET)
 80017a8:	f44f 5060 	mov.w	r0, #14336	; 0x3800
	/* Enable RX interrupt*/
	SPI_I2S_ITConfig(SPIx,SPI_I2S_IT_RXNE,ENABLE);
	 /* Enable SPI1 */
	SPI_Cmd(SPIx, ENABLE);
}
void SPIx_IRQHandler (void){
 80017ac:	b538      	push	{r3, r4, r5, lr}

	if(SPI_I2S_GetITStatus(SPIx,SPI_I2S_IT_TXE)!=RESET)
 80017ae:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80017b2:	2171      	movs	r1, #113	; 0x71
 80017b4:	f002 fb36 	bl	8003e24 <SPI_I2S_GetITStatus>
 80017b8:	b198      	cbz	r0, 80017e2 <SPI2_IRQHandler+0x3a>
		{
#if defined(MASTER)
			CS_SET();
#endif
			if(SPI_index< DATAGRAM_MAX_LEN)
 80017ba:	f242 5388 	movw	r3, #9608	; 0x2588
 80017be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017c2:	781a      	ldrb	r2, [r3, #0]
 80017c4:	2a02      	cmp	r2, #2
 80017c6:	d836      	bhi.n	8001836 <SPI2_IRQHandler+0x8e>
			{
#if defined(MASTER)
				CS_RESET();
#endif
				SPI_I2S_SendData(SPIx, SPI_Buffer[SPI_index++]);
 80017c8:	f240 0114 	movw	r1, #20
 80017cc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80017d0:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80017d4:	5c89      	ldrb	r1, [r1, r2]
 80017d6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80017da:	3201      	adds	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
 80017de:	f002 fa83 	bl	8003ce8 <SPI_I2S_SendData>
	else
		{

		}

	if(SPI_I2S_GetITStatus(SPIx,SPI_I2S_IT_RXNE)!=RESET)
 80017e2:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 80017e6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80017ea:	2160      	movs	r1, #96	; 0x60
 80017ec:	f002 fb1a 	bl	8003e24 <SPI_I2S_GetITStatus>
 80017f0:	b300      	cbz	r0, 8001834 <SPI2_IRQHandler+0x8c>
		{
			if(SPI_MODE == SPI_TX_MODE)
 80017f2:	f242 1390 	movw	r3, #8592	; 0x2190
 80017f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b3ab      	cbz	r3, 800186a <SPI2_IRQHandler+0xc2>
				SPI_I2S_ReceiveData(SPIx);
			}
			else
			{
				GPIO_SetBits(GPIOA,GPIO_Pin_5);
				SPI_Buffer[SPI_index++] = (uint8_t)SPI_I2S_ReceiveData(SPIx);
 80017fe:	f242 5488 	movw	r4, #9608	; 0x2588
 8001802:	f2c2 0400 	movt	r4, #8192	; 0x2000
				/* Receive a dummy byte to clear the DR register*/
				SPI_I2S_ReceiveData(SPIx);
			}
			else
			{
				GPIO_SetBits(GPIOA,GPIO_Pin_5);
 8001806:	2000      	movs	r0, #0
 8001808:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800180c:	2120      	movs	r1, #32
 800180e:	f7fe fee3 	bl	80005d8 <GPIO_SetBits>
				SPI_Buffer[SPI_index++] = (uint8_t)SPI_I2S_ReceiveData(SPIx);
 8001812:	7825      	ldrb	r5, [r4, #0]
 8001814:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8001818:	1c6b      	adds	r3, r5, #1
 800181a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800181e:	7023      	strb	r3, [r4, #0]
 8001820:	f002 fa26 	bl	8003c70 <SPI_I2S_ReceiveData>
 8001824:	f240 0314 	movw	r3, #20
				if(SPI_index >= DATAGRAM_MAX_LEN)
 8001828:	7822      	ldrb	r2, [r4, #0]
				SPI_I2S_ReceiveData(SPIx);
			}
			else
			{
				GPIO_SetBits(GPIOA,GPIO_Pin_5);
				SPI_Buffer[SPI_index++] = (uint8_t)SPI_I2S_ReceiveData(SPIx);
 800182a:	f2c2 0300 	movt	r3, #8192	; 0x2000
				if(SPI_index >= DATAGRAM_MAX_LEN)
 800182e:	2a02      	cmp	r2, #2
				SPI_I2S_ReceiveData(SPIx);
			}
			else
			{
				GPIO_SetBits(GPIOA,GPIO_Pin_5);
				SPI_Buffer[SPI_index++] = (uint8_t)SPI_I2S_ReceiveData(SPIx);
 8001830:	5558      	strb	r0, [r3, r5]
				if(SPI_index >= DATAGRAM_MAX_LEN)
 8001832:	d80b      	bhi.n	800184c <SPI2_IRQHandler+0xa4>
 8001834:	bd38      	pop	{r3, r4, r5, pc}
				SPI_I2S_SendData(SPIx, SPI_Buffer[SPI_index++]);
			}
			else
			{
				SPI_index =0;
				SPI_I2S_ITConfig(SPIx,SPI_I2S_IT_TXE,ENABLE);
 8001836:	f44f 5060 	mov.w	r0, #14336	; 0x3800
#endif
				SPI_I2S_SendData(SPIx, SPI_Buffer[SPI_index++]);
			}
			else
			{
				SPI_index =0;
 800183a:	2400      	movs	r4, #0
				SPI_I2S_ITConfig(SPIx,SPI_I2S_IT_TXE,ENABLE);
 800183c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001840:	2171      	movs	r1, #113	; 0x71
 8001842:	2201      	movs	r2, #1
#endif
				SPI_I2S_SendData(SPIx, SPI_Buffer[SPI_index++]);
			}
			else
			{
				SPI_index =0;
 8001844:	701c      	strb	r4, [r3, #0]
				SPI_I2S_ITConfig(SPIx,SPI_I2S_IT_TXE,ENABLE);
 8001846:	f002 fa8b 	bl	8003d60 <SPI_I2S_ITConfig>
 800184a:	e7ca      	b.n	80017e2 <SPI2_IRQHandler+0x3a>
				GPIO_SetBits(GPIOA,GPIO_Pin_5);
				SPI_Buffer[SPI_index++] = (uint8_t)SPI_I2S_ReceiveData(SPIx);
				if(SPI_index >= DATAGRAM_MAX_LEN)
				{
					 /* Disable  SPI */
					SPI_Cmd(SPIx, DISABLE);
 800184c:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8001850:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001854:	2100      	movs	r1, #0
 8001856:	f002 f9c1 	bl	8003bdc <SPI_Cmd>
					SPI_I2S_ITConfig(SPIx, SPI_I2S_IT_TXE, DISABLE);
 800185a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800185e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001862:	2171      	movs	r1, #113	; 0x71
 8001864:	2200      	movs	r2, #0
 8001866:	f002 fa7b 	bl	8003d60 <SPI_I2S_ITConfig>
					SPI_I2S_ReceiveData(SPIx);
 800186a:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800186e:	f2c4 0000 	movt	r0, #16384	; 0x4000
				//SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_TXE, DISABLE);
				  // Read dummy byte and empty the register
				  //SPI_I2S_ReceiveData(SPI2);
			}
		}
}
 8001872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				if(SPI_index >= DATAGRAM_MAX_LEN)
				{
					 /* Disable  SPI */
					SPI_Cmd(SPIx, DISABLE);
					SPI_I2S_ITConfig(SPIx, SPI_I2S_IT_TXE, DISABLE);
					SPI_I2S_ReceiveData(SPIx);
 8001876:	f002 b9fb 	b.w	8003c70 <SPI_I2S_ReceiveData>
 800187a:	bf00      	nop

0800187c <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{

  /* Check on I2C2 AF flag and clear it */
  if (I2C_GetITStatus(I2C1, I2C_IT_AF))
 800187c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8001880:	f44f 6180 	mov.w	r1, #1024	; 0x400
			/* Enable I2C */
			I2C_Cmd(I2C1, ENABLE);
}

void I2C1_ER_IRQHandler(void)
{
 8001884:	b510      	push	{r4, lr}

  /* Check on I2C2 AF flag and clear it */
  if (I2C_GetITStatus(I2C1, I2C_IT_AF))
 8001886:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800188a:	f2c0 1100 	movt	r1, #256	; 0x100
 800188e:	f7ff f9c7 	bl	8000c20 <I2C_GetITStatus>
 8001892:	b970      	cbnz	r0, 80018b2 <I2C1_ER_IRQHandler+0x36>
  {
    I2C_ClearITPendingBit(I2C1, I2C_IT_AF);
  }
  if ((I2C_ReadRegister(I2C1, I2C_Register_SR1) & 0xFF00) != 0x00)
 8001894:	f44f 44a8 	mov.w	r4, #21504	; 0x5400
 8001898:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800189c:	4620      	mov	r0, r4
 800189e:	2114      	movs	r1, #20
 80018a0:	f7ff f880 	bl	80009a4 <I2C_ReadRegister>
 80018a4:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    	{
    		/* Clears error flags */
    		I2C1->SR1 &= 0x00FF;
 80018a8:	bf1e      	ittt	ne
 80018aa:	8aa3      	ldrhne	r3, [r4, #20]
 80018ac:	b2db      	uxtbne	r3, r3
 80018ae:	82a3      	strhne	r3, [r4, #20]
 80018b0:	bd10      	pop	{r4, pc}
{

  /* Check on I2C2 AF flag and clear it */
  if (I2C_GetITStatus(I2C1, I2C_IT_AF))
  {
    I2C_ClearITPendingBit(I2C1, I2C_IT_AF);
 80018b2:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80018b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ba:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80018be:	f2c0 1100 	movt	r1, #256	; 0x100
 80018c2:	f7ff fa27 	bl	8000d14 <I2C_ClearITPendingBit>
 80018c6:	e7e5      	b.n	8001894 <I2C1_ER_IRQHandler+0x18>

080018c8 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
	//LED_On();

  /* Get Last I2C Event */
  Event = I2C_GetLastEvent(I2C1);
 80018c8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
}



void I2C1_EV_IRQHandler(void)
{
 80018cc:	b570      	push	{r4, r5, r6, lr}
	//LED_On();

  /* Get Last I2C Event */
  Event = I2C_GetLastEvent(I2C1);
 80018ce:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80018d2:	f7ff f8e5 	bl	8000aa0 <I2C_GetLastEvent>
 80018d6:	f240 0340 	movw	r3, #64	; 0x40
 80018da:	f2c2 0300 	movt	r3, #8192	; 0x2000
  switch (Event)
 80018de:	2202      	movs	r2, #2
void I2C1_EV_IRQHandler(void)
{
	//LED_On();

  /* Get Last I2C Event */
  Event = I2C_GetLastEvent(I2C1);
 80018e0:	6018      	str	r0, [r3, #0]
  switch (Event)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f2c0 0203 	movt	r2, #3
 80018e8:	4293      	cmp	r3, r2
 80018ea:	f000 8121 	beq.w	8001b30 <I2C1_EV_IRQHandler+0x268>
 80018ee:	d818      	bhi.n	8001922 <I2C1_EV_IRQHandler+0x5a>
 80018f0:	f1b3 1f02 	cmp.w	r3, #131074	; 0x20002
 80018f4:	f000 810f 	beq.w	8001b16 <I2C1_EV_IRQHandler+0x24e>
 80018f8:	d82b      	bhi.n	8001952 <I2C1_EV_IRQHandler+0x8a>
 80018fa:	2b10      	cmp	r3, #16
 80018fc:	f000 80ce 	beq.w	8001a9c <I2C1_EV_IRQHandler+0x1d4>
 8001900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001904:	f040 8162 	bne.w	8001bcc <I2C1_EV_IRQHandler+0x304>
{
  return RxComplete_f;
}
void I2C_StopReceived(void)
{
	index = 0;
 8001908:	f242 625e 	movw	r2, #9822	; 0x265e
	RxComplete_f = SET;
 800190c:	f240 0344 	movw	r3, #68	; 0x44
{
  return RxComplete_f;
}
void I2C_StopReceived(void)
{
	index = 0;
 8001910:	f2c2 0200 	movt	r2, #8192	; 0x2000
	RxComplete_f = SET;
 8001914:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
  return RxComplete_f;
}
void I2C_StopReceived(void)
{
	index = 0;
 8001918:	2000      	movs	r0, #0
	RxComplete_f = SET;
 800191a:	2101      	movs	r1, #1
{
  return RxComplete_f;
}
void I2C_StopReceived(void)
{
	index = 0;
 800191c:	7010      	strb	r0, [r2, #0]
	RxComplete_f = SET;
 800191e:	7019      	strb	r1, [r3, #0]
 8001920:	e016      	b.n	8001950 <I2C1_EV_IRQHandler+0x88>
{
	//LED_On();

  /* Get Last I2C Event */
  Event = I2C_GetLastEvent(I2C1);
  switch (Event)
 8001922:	2284      	movs	r2, #132	; 0x84
 8001924:	f2c0 0206 	movt	r2, #6
 8001928:	4293      	cmp	r3, r2
 800192a:	d045      	beq.n	80019b8 <I2C1_EV_IRQHandler+0xf0>
 800192c:	d85c      	bhi.n	80019e8 <I2C1_EV_IRQHandler+0x120>
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	f2c0 0206 	movt	r2, #6
 8001934:	4293      	cmp	r3, r2
 8001936:	d03f      	beq.n	80019b8 <I2C1_EV_IRQHandler+0xf0>
 8001938:	2282      	movs	r2, #130	; 0x82
 800193a:	f2c0 0206 	movt	r2, #6
 800193e:	4293      	cmp	r3, r2
 8001940:	f000 812b 	beq.w	8001b9a <I2C1_EV_IRQHandler+0x2d2>
 8001944:	2240      	movs	r2, #64	; 0x40
 8001946:	f2c0 0203 	movt	r2, #3
 800194a:	4293      	cmp	r3, r2
 800194c:	f000 8106 	beq.w	8001b5c <I2C1_EV_IRQHandler+0x294>
 8001950:	bd70      	pop	{r4, r5, r6, pc}
 8001952:	2244      	movs	r2, #68	; 0x44
 8001954:	f2c0 0202 	movt	r2, #2
 8001958:	4293      	cmp	r3, r2
 800195a:	f000 80c9 	beq.w	8001af0 <I2C1_EV_IRQHandler+0x228>
 800195e:	2201      	movs	r2, #1
 8001960:	f2c0 0203 	movt	r2, #3
 8001964:	4293      	cmp	r3, r2
 8001966:	f040 80bd 	bne.w	8001ae4 <I2C1_EV_IRQHandler+0x21c>
    {

    case I2C_EVENT_MASTER_MODE_SELECT:
      /* Send slave address for writing */
        TxComplete_f = RESET;
 800196a:	f240 063c 	movw	r6, #60	; 0x3c
        RxComplete_f = RESET;
 800196e:	f240 0544 	movw	r5, #68	; 0x44
        index =0;
 8001972:	f242 635e 	movw	r3, #9822	; 0x265e
 8001976:	f2c2 0300 	movt	r3, #8192	; 0x2000
  switch (Event)
    {

    case I2C_EVENT_MASTER_MODE_SELECT:
      /* Send slave address for writing */
        TxComplete_f = RESET;
 800197a:	f2c2 0600 	movt	r6, #8192	; 0x2000
        RxComplete_f = RESET;
 800197e:	f2c2 0500 	movt	r5, #8192	; 0x2000
        index =0;
        I2C_ITConfig(I2C1,I2C_IT_BUF,ENABLE);
 8001982:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
  switch (Event)
    {

    case I2C_EVENT_MASTER_MODE_SELECT:
      /* Send slave address for writing */
        TxComplete_f = RESET;
 8001986:	2400      	movs	r4, #0
        RxComplete_f = RESET;
        index =0;
        I2C_ITConfig(I2C1,I2C_IT_BUF,ENABLE);
 8001988:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800198c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001990:	2201      	movs	r2, #1

    case I2C_EVENT_MASTER_MODE_SELECT:
      /* Send slave address for writing */
        TxComplete_f = RESET;
        RxComplete_f = RESET;
        index =0;
 8001992:	701c      	strb	r4, [r3, #0]
  switch (Event)
    {

    case I2C_EVENT_MASTER_MODE_SELECT:
      /* Send slave address for writing */
        TxComplete_f = RESET;
 8001994:	7034      	strb	r4, [r6, #0]
        RxComplete_f = RESET;
 8001996:	702c      	strb	r4, [r5, #0]
        index =0;
        I2C_ITConfig(I2C1,I2C_IT_BUF,ENABLE);
 8001998:	f7ff f83e 	bl	8000a18 <I2C_ITConfig>
        I2C_Send7bitAddress(I2C1, SLAVE_ADDRESS,  mode );
 800199c:	f242 53f4 	movw	r3, #9716	; 0x25f4
 80019a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019a4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80019a8:	781a      	ldrb	r2, [r3, #0]
 80019aa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80019ae:	21e0      	movs	r1, #224	; 0xe0
        //LED_On();
    	break;
    default:
      break;
    }
}
 80019b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      /* Send slave address for writing */
        TxComplete_f = RESET;
        RxComplete_f = RESET;
        index =0;
        I2C_ITConfig(I2C1,I2C_IT_BUF,ENABLE);
        I2C_Send7bitAddress(I2C1, SLAVE_ADDRESS,  mode );
 80019b4:	f7fe bf4e 	b.w	8000854 <I2C_Send7bitAddress>
    	index=0;
    	I2C_SendData(I2C1, buffer.data[index++]);
    	break;
    case I2C_EVENT_SLAVE_BYTE_TRANSMITTING:
    case I2C_EVENT_SLAVE_BYTE_TRANSMITTED:
    	if(index < buffer.len)
 80019b8:	f242 635e 	movw	r3, #9822	; 0x265e
 80019bc:	f242 52f8 	movw	r2, #9720	; 0x25f8
 80019c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80019c8:	781c      	ldrb	r4, [r3, #0]
 80019ca:	f892 1064 	ldrb.w	r1, [r2, #100]	; 0x64
 80019ce:	42a1      	cmp	r1, r4
 80019d0:	d9be      	bls.n	8001950 <I2C1_EV_IRQHandler+0x88>
    	I2C_SendData(I2C1, buffer.data[index++]);
 80019d2:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 80019d6:	5d11      	ldrb	r1, [r2, r4]
 80019d8:	3401      	adds	r4, #1
 80019da:	701c      	strb	r4, [r3, #0]
 80019dc:	f2c4 0000 	movt	r0, #16384	; 0x4000
        //LED_On();
    	break;
    default:
      break;
    }
}
 80019e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    	I2C_SendData(I2C1, buffer.data[index++]);
    	break;
    case I2C_EVENT_SLAVE_BYTE_TRANSMITTING:
    case I2C_EVENT_SLAVE_BYTE_TRANSMITTED:
    	if(index < buffer.len)
    	I2C_SendData(I2C1, buffer.data[index++]);
 80019e4:	f7fe bf9e 	b.w	8000924 <I2C_SendData>
{
	//LED_On();

  /* Get Last I2C Event */
  Event = I2C_GetLastEvent(I2C1);
  switch (Event)
 80019e8:	2282      	movs	r2, #130	; 0x82
 80019ea:	f2c0 0207 	movt	r2, #7
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d040      	beq.n	8001a74 <I2C1_EV_IRQHandler+0x1ac>
 80019f2:	2284      	movs	r2, #132	; 0x84
 80019f4:	f2c0 0207 	movt	r2, #7
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d004      	beq.n	8001a06 <I2C1_EV_IRQHandler+0x13e>
 80019fc:	2280      	movs	r2, #128	; 0x80
 80019fe:	f2c0 0207 	movt	r2, #7
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d1a4      	bne.n	8001950 <I2C1_EV_IRQHandler+0x88>
    case I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED:
      I2C_SendData(I2C1, buffer.data[index++]);
      break;
    case I2C_EVENT_MASTER_BYTE_TRANSMITTING:
    case I2C_EVENT_MASTER_BYTE_TRANSMITTED:
      if(index >= buffer.len)
 8001a06:	f242 635e 	movw	r3, #9822	; 0x265e
 8001a0a:	f242 52f8 	movw	r2, #9720	; 0x25f8
 8001a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a12:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001a16:	781c      	ldrb	r4, [r3, #0]
 8001a18:	f892 1064 	ldrb.w	r1, [r2, #100]	; 0x64
 8001a1c:	42a1      	cmp	r1, r4
        {
          I2C_GenerateSTOP(I2C1,ENABLE);
 8001a1e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
    case I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED:
      I2C_SendData(I2C1, buffer.data[index++]);
      break;
    case I2C_EVENT_MASTER_BYTE_TRANSMITTING:
    case I2C_EVENT_MASTER_BYTE_TRANSMITTED:
      if(index >= buffer.len)
 8001a22:	d8d8      	bhi.n	80019d6 <I2C1_EV_IRQHandler+0x10e>
        {
          I2C_GenerateSTOP(I2C1,ENABLE);
 8001a24:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001a28:	2101      	movs	r1, #1
 8001a2a:	f7fe fedd 	bl	80007e8 <I2C_GenerateSTOP>
          while(I2C_GetFlagStatus(I2C1,I2C_FLAG_BUSY));
 8001a2e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8001a32:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001a36:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001a3a:	f7ff f855 	bl	8000ae8 <I2C_GetFlagStatus>
 8001a3e:	4604      	mov	r4, r0
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d1f4      	bne.n	8001a2e <I2C1_EV_IRQHandler+0x166>
          TxComplete_f = SET;
 8001a44:	f240 033c 	movw	r3, #60	; 0x3c
 8001a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
          I2C_ITConfig(I2C1,I2C_IT_BUF,DISABLE);
 8001a4c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
    case I2C_EVENT_MASTER_BYTE_TRANSMITTED:
      if(index >= buffer.len)
        {
          I2C_GenerateSTOP(I2C1,ENABLE);
          while(I2C_GetFlagStatus(I2C1,I2C_FLAG_BUSY));
          TxComplete_f = SET;
 8001a50:	2501      	movs	r5, #1
          I2C_ITConfig(I2C1,I2C_IT_BUF,DISABLE);
 8001a52:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001a56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a5a:	4622      	mov	r2, r4
    case I2C_EVENT_MASTER_BYTE_TRANSMITTED:
      if(index >= buffer.len)
        {
          I2C_GenerateSTOP(I2C1,ENABLE);
          while(I2C_GetFlagStatus(I2C1,I2C_FLAG_BUSY));
          TxComplete_f = SET;
 8001a5c:	701d      	strb	r5, [r3, #0]
          I2C_ITConfig(I2C1,I2C_IT_BUF,DISABLE);
 8001a5e:	f7fe ffdb 	bl	8000a18 <I2C_ITConfig>
          I2C_Cmd(I2C1, DISABLE);
 8001a62:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8001a66:	4621      	mov	r1, r4
 8001a68:	f2c4 0000 	movt	r0, #16384	; 0x4000
        //LED_On();
    	break;
    default:
      break;
    }
}
 8001a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        {
          I2C_GenerateSTOP(I2C1,ENABLE);
          while(I2C_GetFlagStatus(I2C1,I2C_FLAG_BUSY));
          TxComplete_f = SET;
          I2C_ITConfig(I2C1,I2C_IT_BUF,DISABLE);
          I2C_Cmd(I2C1, DISABLE);
 8001a70:	f7fe be84 	b.w	800077c <I2C_Cmd>
        index =0;
        I2C_ITConfig(I2C1,I2C_IT_BUF,ENABLE);
        I2C_Send7bitAddress(I2C1, SLAVE_ADDRESS,  mode );
      break;
    case I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED:
      I2C_SendData(I2C1, buffer.data[index++]);
 8001a74:	f242 635e 	movw	r3, #9822	; 0x265e
 8001a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a7c:	f242 52f8 	movw	r2, #9720	; 0x25f8
 8001a80:	7819      	ldrb	r1, [r3, #0]
 8001a82:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001a86:	1c4c      	adds	r4, r1, #1
 8001a88:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8001a8c:	701c      	strb	r4, [r3, #0]
 8001a8e:	5c51      	ldrb	r1, [r2, r1]
 8001a90:	f2c4 0000 	movt	r0, #16384	; 0x4000
        //LED_On();
    	break;
    default:
      break;
    }
}
 8001a94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        index =0;
        I2C_ITConfig(I2C1,I2C_IT_BUF,ENABLE);
        I2C_Send7bitAddress(I2C1, SLAVE_ADDRESS,  mode );
      break;
    case I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED:
      I2C_SendData(I2C1, buffer.data[index++]);
 8001a98:	f7fe bf44 	b.w	8000924 <I2C_SendData>
    case I2C_EVENT_SLAVE_BYTE_RECEIVED:
    case I2C_EVENT_SLAVE_BYTE_RECEIVED| I2C_SR1_BTF:
    	buffer.data[index++]=I2C_ReceiveData(I2C1);
       	break;
    case I2C_EVENT_SLAVE_STOP_DETECTED:
    	buffer.len = index;
 8001a9c:	f242 645e 	movw	r4, #9822	; 0x265e
 8001aa0:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001aa4:	f242 53f8 	movw	r3, #9720	; 0x25f8
 8001aa8:	7822      	ldrb	r2, [r4, #0]
 8001aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    	//clear STPOF by reading SR1 register followed by writing to the CR1 register
    	//I2C_GetLastEvent(I2C1);
    	I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF);
 8001aae:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	f2c1 0100 	movt	r1, #4096	; 0x1000
 8001ab8:	f2c4 0000 	movt	r0, #16384	; 0x4000
    case I2C_EVENT_SLAVE_BYTE_RECEIVED:
    case I2C_EVENT_SLAVE_BYTE_RECEIVED| I2C_SR1_BTF:
    	buffer.data[index++]=I2C_ReceiveData(I2C1);
       	break;
    case I2C_EVENT_SLAVE_STOP_DETECTED:
    	buffer.len = index;
 8001abc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    	//clear STPOF by reading SR1 register followed by writing to the CR1 register
    	//I2C_GetLastEvent(I2C1);
    	I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF);
 8001ac0:	f7ff f812 	bl	8000ae8 <I2C_GetFlagStatus>
    	I2C_Cmd(I2C1, ENABLE);
 8001ac4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8001ac8:	2101      	movs	r1, #1
 8001aca:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001ace:	f7fe fe55 	bl	800077c <I2C_Cmd>
  return RxComplete_f;
}
void I2C_StopReceived(void)
{
	index = 0;
	RxComplete_f = SET;
 8001ad2:	f240 0344 	movw	r3, #68	; 0x44
 8001ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
  return RxComplete_f;
}
void I2C_StopReceived(void)
{
	index = 0;
 8001ada:	2100      	movs	r1, #0
	RxComplete_f = SET;
 8001adc:	2201      	movs	r2, #1
{
  return RxComplete_f;
}
void I2C_StopReceived(void)
{
	index = 0;
 8001ade:	7021      	strb	r1, [r4, #0]
	RxComplete_f = SET;
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	bd70      	pop	{r4, r5, r6, pc}
{
	//LED_On();

  /* Get Last I2C Event */
  Event = I2C_GetLastEvent(I2C1);
  switch (Event)
 8001ae4:	2240      	movs	r2, #64	; 0x40
 8001ae6:	f2c0 0202 	movt	r2, #2
 8001aea:	4293      	cmp	r3, r2
 8001aec:	f47f af30 	bne.w	8001950 <I2C1_EV_IRQHandler+0x88>

    	index =0;
       	break;
    case I2C_EVENT_SLAVE_BYTE_RECEIVED:
    case I2C_EVENT_SLAVE_BYTE_RECEIVED| I2C_SR1_BTF:
    	buffer.data[index++]=I2C_ReceiveData(I2C1);
 8001af0:	f242 635e 	movw	r3, #9822	; 0x265e
 8001af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001af8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8001afc:	781c      	ldrb	r4, [r3, #0]
 8001afe:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001b02:	1c62      	adds	r2, r4, #1
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	f7fe ff2d 	bl	8000964 <I2C_ReceiveData>
 8001b0a:	f242 53f8 	movw	r3, #9720	; 0x25f8
 8001b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b12:	5518      	strb	r0, [r3, r4]
       	break;
 8001b14:	bd70      	pop	{r4, r5, r6, pc}


    /**************SLAVE RECEIVE EVENT*********************************/
    case I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED :
    	//read SR1 followed by reading SR2 in order to clear ADDR bit
    	I2C_GetLastEvent(I2C1);
 8001b16:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8001b1a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001b1e:	f7fe ffbf 	bl	8000aa0 <I2C_GetLastEvent>

    	index =0;
 8001b22:	f242 635e 	movw	r3, #9822	; 0x265e
 8001b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
       	break;
 8001b2e:	bd70      	pop	{r4, r5, r6, pc}
      I2C_SendData(I2C1, buffer.data[index++]);
      break;

    case I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED:
      //LED_On();
      byte2Read = len;
 8001b30:	f242 6263 	movw	r2, #9827	; 0x2663
 8001b34:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001b38:	f242 538c 	movw	r3, #9612	; 0x258c
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
      if(byte2Read == 1)
 8001b42:	2a01      	cmp	r2, #1
      I2C_SendData(I2C1, buffer.data[index++]);
      break;

    case I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED:
      //LED_On();
      byte2Read = len;
 8001b44:	701a      	strb	r2, [r3, #0]
      if(byte2Read == 1)
 8001b46:	f47f af03 	bne.w	8001950 <I2C1_EV_IRQHandler+0x88>
        I2C_AcknowledgeConfig(I2C1,DISABLE);
 8001b4a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8001b4e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001b52:	2100      	movs	r1, #0
        //LED_On();
    	break;
    default:
      break;
    }
}
 8001b54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

    case I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED:
      //LED_On();
      byte2Read = len;
      if(byte2Read == 1)
        I2C_AcknowledgeConfig(I2C1,DISABLE);
 8001b58:	f7fe beae 	b.w	80008b8 <I2C_AcknowledgeConfig>
      break;
    case I2C_EVENT_MASTER_BYTE_RECEIVED:
      if(byte2Read ==2)
 8001b5c:	f242 548c 	movw	r4, #9612	; 0x258c
 8001b60:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001b64:	7821      	ldrb	r1, [r4, #0]
 8001b66:	2902      	cmp	r1, #2
 8001b68:	d059      	beq.n	8001c1e <I2C1_EV_IRQHandler+0x356>
        I2C_AcknowledgeConfig(I2C1,DISABLE);
      if(byte2Read == 1)
 8001b6a:	2901      	cmp	r1, #1
 8001b6c:	d02f      	beq.n	8001bce <I2C1_EV_IRQHandler+0x306>
        while(I2C_GetFlagStatus(I2C1,I2C_FLAG_BUSY));
        RxComplete_f = SET;
        I2C_ITConfig(I2C1,I2C_IT_BUF,DISABLE);
        I2C_Cmd(I2C1, DISABLE);
        }
      buffer.data[index++] = I2C_ReceiveData(I2C1);
 8001b6e:	f242 635e 	movw	r3, #9822	; 0x265e
 8001b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b76:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8001b7a:	781d      	ldrb	r5, [r3, #0]
 8001b7c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001b80:	1c6a      	adds	r2, r5, #1
 8001b82:	701a      	strb	r2, [r3, #0]
 8001b84:	f7fe feee 	bl	8000964 <I2C_ReceiveData>
 8001b88:	f242 53f8 	movw	r3, #9720	; 0x25f8
      byte2Read --;
 8001b8c:	7822      	ldrb	r2, [r4, #0]
        while(I2C_GetFlagStatus(I2C1,I2C_FLAG_BUSY));
        RxComplete_f = SET;
        I2C_ITConfig(I2C1,I2C_IT_BUF,DISABLE);
        I2C_Cmd(I2C1, DISABLE);
        }
      buffer.data[index++] = I2C_ReceiveData(I2C1);
 8001b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
      byte2Read --;
 8001b92:	3a01      	subs	r2, #1
        while(I2C_GetFlagStatus(I2C1,I2C_FLAG_BUSY));
        RxComplete_f = SET;
        I2C_ITConfig(I2C1,I2C_IT_BUF,DISABLE);
        I2C_Cmd(I2C1, DISABLE);
        }
      buffer.data[index++] = I2C_ReceiveData(I2C1);
 8001b94:	5558      	strb	r0, [r3, r5]
      byte2Read --;
 8001b96:	7022      	strb	r2, [r4, #0]
      break;
 8001b98:	bd70      	pop	{r4, r5, r6, pc}
    	break;

    /*****************SLAVE TRANSMITT EVENT*******************************/
    case I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED:
    	//read SR1 followed by reading SR2 in order to clear ADDR bit
    	I2C_GetLastEvent(I2C1);
 8001b9a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8001b9e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001ba2:	f7fe ff7d 	bl	8000aa0 <I2C_GetLastEvent>
    	//LED_On();
    	index=0;
    	I2C_SendData(I2C1, buffer.data[index++]);
 8001ba6:	f242 52f8 	movw	r2, #9720	; 0x25f8
 8001baa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001bae:	f242 635e 	movw	r3, #9822	; 0x265e
 8001bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bb6:	7811      	ldrb	r1, [r2, #0]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8001bbe:	701a      	strb	r2, [r3, #0]
 8001bc0:	f2c4 0000 	movt	r0, #16384	; 0x4000
        //LED_On();
    	break;
    default:
      break;
    }
}
 8001bc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    case I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED:
    	//read SR1 followed by reading SR2 in order to clear ADDR bit
    	I2C_GetLastEvent(I2C1);
    	//LED_On();
    	index=0;
    	I2C_SendData(I2C1, buffer.data[index++]);
 8001bc8:	f7fe beac 	b.w	8000924 <I2C_SendData>
 8001bcc:	bd70      	pop	{r4, r5, r6, pc}
    case I2C_EVENT_MASTER_BYTE_RECEIVED:
      if(byte2Read ==2)
        I2C_AcknowledgeConfig(I2C1,DISABLE);
      if(byte2Read == 1)
        {
        I2C_GenerateSTOP(I2C1,ENABLE);
 8001bce:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8001bd2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001bd6:	f7fe fe07 	bl	80007e8 <I2C_GenerateSTOP>
        while(I2C_GetFlagStatus(I2C1,I2C_FLAG_BUSY));
 8001bda:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8001bde:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001be2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001be6:	f7fe ff7f 	bl	8000ae8 <I2C_GetFlagStatus>
 8001bea:	4605      	mov	r5, r0
 8001bec:	2800      	cmp	r0, #0
 8001bee:	d1f4      	bne.n	8001bda <I2C1_EV_IRQHandler+0x312>
        RxComplete_f = SET;
 8001bf0:	f240 0344 	movw	r3, #68	; 0x44
 8001bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
        I2C_ITConfig(I2C1,I2C_IT_BUF,DISABLE);
 8001bf8:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
        I2C_AcknowledgeConfig(I2C1,DISABLE);
      if(byte2Read == 1)
        {
        I2C_GenerateSTOP(I2C1,ENABLE);
        while(I2C_GetFlagStatus(I2C1,I2C_FLAG_BUSY));
        RxComplete_f = SET;
 8001bfc:	2601      	movs	r6, #1
        I2C_ITConfig(I2C1,I2C_IT_BUF,DISABLE);
 8001bfe:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c06:	462a      	mov	r2, r5
        I2C_AcknowledgeConfig(I2C1,DISABLE);
      if(byte2Read == 1)
        {
        I2C_GenerateSTOP(I2C1,ENABLE);
        while(I2C_GetFlagStatus(I2C1,I2C_FLAG_BUSY));
        RxComplete_f = SET;
 8001c08:	701e      	strb	r6, [r3, #0]
        I2C_ITConfig(I2C1,I2C_IT_BUF,DISABLE);
 8001c0a:	f7fe ff05 	bl	8000a18 <I2C_ITConfig>
        I2C_Cmd(I2C1, DISABLE);
 8001c0e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8001c12:	4629      	mov	r1, r5
 8001c14:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001c18:	f7fe fdb0 	bl	800077c <I2C_Cmd>
 8001c1c:	e7a7      	b.n	8001b6e <I2C1_EV_IRQHandler+0x2a6>
      if(byte2Read == 1)
        I2C_AcknowledgeConfig(I2C1,DISABLE);
      break;
    case I2C_EVENT_MASTER_BYTE_RECEIVED:
      if(byte2Read ==2)
        I2C_AcknowledgeConfig(I2C1,DISABLE);
 8001c1e:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8001c22:	2100      	movs	r1, #0
 8001c24:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001c28:	f7fe fe46 	bl	80008b8 <I2C_AcknowledgeConfig>
 8001c2c:	7821      	ldrb	r1, [r4, #0]
 8001c2e:	e79c      	b.n	8001b6a <I2C1_EV_IRQHandler+0x2a2>

08001c30 <InitFifo>:
 *      Author: toandang
 */
#include "fifo.h"

void InitFifo(void) {
    PUTPT=GETPT=&Fifo[0]; /* Empty when PUTPT=GETPT */
 8001c30:	f242 118c 	movw	r1, #8588	; 0x218c
 8001c34:	f242 129c 	movw	r2, #8604	; 0x219c
 8001c38:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001c3c:	f242 13a0 	movw	r3, #8608	; 0x21a0
 8001c40:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c48:	600b      	str	r3, [r1, #0]
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop

08001c50 <PutFifo>:
}
int PutFifo (char data) { char *Ppt; /* Temporary put pointer */
 8001c50:	b538      	push	{r3, r4, r5, lr}
    Ppt=PUTPT; /* Copy of put pointer */
 8001c52:	f242 149c 	movw	r4, #8604	; 0x219c
 8001c56:	f2c2 0400 	movt	r4, #8192	; 0x2000
    *(Ppt++)=data; /* Try to put data into fifo */
    USART_ITConfig(USART2,USART_IT_TXE,ENABLE);
 8001c5a:	f240 7127 	movw	r1, #1831	; 0x727

void InitFifo(void) {
    PUTPT=GETPT=&Fifo[0]; /* Empty when PUTPT=GETPT */
}
int PutFifo (char data) { char *Ppt; /* Temporary put pointer */
    Ppt=PUTPT; /* Copy of put pointer */
 8001c5e:	6825      	ldr	r5, [r4, #0]
    *(Ppt++)=data; /* Try to put data into fifo */
 8001c60:	7028      	strb	r0, [r5, #0]
    USART_ITConfig(USART2,USART_IT_TXE,ENABLE);
 8001c62:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8001c66:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f7ff fb14 	bl	8001298 <USART_ITConfig>
    if (Ppt == &Fifo[FifoSize]) Ppt = &Fifo[0]; /* Wrap */
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <PutFifo+0x44>)
void InitFifo(void) {
    PUTPT=GETPT=&Fifo[0]; /* Empty when PUTPT=GETPT */
}
int PutFifo (char data) { char *Ppt; /* Temporary put pointer */
    Ppt=PUTPT; /* Copy of put pointer */
    *(Ppt++)=data; /* Try to put data into fifo */
 8001c72:	1c6a      	adds	r2, r5, #1
    USART_ITConfig(USART2,USART_IT_TXE,ENABLE);
    if (Ppt == &Fifo[FifoSize]) Ppt = &Fifo[0]; /* Wrap */
 8001c74:	429a      	cmp	r2, r3
    if (Ppt == GETPT ){
 8001c76:	f242 138c 	movw	r3, #8588	; 0x218c
 8001c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
int PutFifo (char data) { char *Ppt; /* Temporary put pointer */
    Ppt=PUTPT; /* Copy of put pointer */
    *(Ppt++)=data; /* Try to put data into fifo */
    USART_ITConfig(USART2,USART_IT_TXE,ENABLE);
    if (Ppt == &Fifo[FifoSize]) Ppt = &Fifo[0]; /* Wrap */
 8001c7e:	bf08      	it	eq
 8001c80:	f1a5 0263 	subeq.w	r2, r5, #99	; 0x63
    if (Ppt == GETPT ){
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	429a      	cmp	r2, r3
        return(0);}   /* Failed, fifo was full */
    else{
        PUTPT=Ppt;
        return(-1);   /* Successful */
 8001c88:	bf1a      	itte	ne
 8001c8a:	f04f 30ff 	movne.w	r0, #4294967295
    USART_ITConfig(USART2,USART_IT_TXE,ENABLE);
    if (Ppt == &Fifo[FifoSize]) Ppt = &Fifo[0]; /* Wrap */
    if (Ppt == GETPT ){
        return(0);}   /* Failed, fifo was full */
    else{
        PUTPT=Ppt;
 8001c8e:	6022      	strne	r2, [r4, #0]
    Ppt=PUTPT; /* Copy of put pointer */
    *(Ppt++)=data; /* Try to put data into fifo */
    USART_ITConfig(USART2,USART_IT_TXE,ENABLE);
    if (Ppt == &Fifo[FifoSize]) Ppt = &Fifo[0]; /* Wrap */
    if (Ppt == GETPT ){
        return(0);}   /* Failed, fifo was full */
 8001c90:	2000      	moveq	r0, #0
    else{
        PUTPT=Ppt;
        return(-1);   /* Successful */
    }
}
 8001c92:	bd38      	pop	{r3, r4, r5, pc}
 8001c94:	20002204 	.word	0x20002204

08001c98 <GetFifo>:
int GetFifo (char *datapt) {
    if (PUTPT== GETPT){
 8001c98:	f242 138c 	movw	r3, #8588	; 0x218c
 8001c9c:	f242 129c 	movw	r2, #8604	; 0x219c
 8001ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ca4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001ca8:	6819      	ldr	r1, [r3, #0]
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	428a      	cmp	r2, r1
 8001cae:	d00f      	beq.n	8001cd0 <GetFifo+0x38>
        return(0);}   /* Empty if PUTPT=GETPT */
    else{
        *datapt=*(GETPT++);
 8001cb0:	1c4a      	adds	r2, r1, #1
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	780a      	ldrb	r2, [r1, #0]
        if (GETPT == &Fifo[FifoSize])
 8001cb6:	4907      	ldr	r1, [pc, #28]	; (8001cd4 <GetFifo+0x3c>)
}
int GetFifo (char *datapt) {
    if (PUTPT== GETPT){
        return(0);}   /* Empty if PUTPT=GETPT */
    else{
        *datapt=*(GETPT++);
 8001cb8:	7002      	strb	r2, [r0, #0]
        if (GETPT == &Fifo[FifoSize])
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	428a      	cmp	r2, r1
 8001cbe:	d002      	beq.n	8001cc6 <GetFifo+0x2e>
            GETPT = &Fifo[0];
        return(-1);
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
    }
}
 8001cc4:	4770      	bx	lr
    if (PUTPT== GETPT){
        return(0);}   /* Empty if PUTPT=GETPT */
    else{
        *datapt=*(GETPT++);
        if (GETPT == &Fifo[FifoSize])
            GETPT = &Fifo[0];
 8001cc6:	3a64      	subs	r2, #100	; 0x64
 8001cc8:	601a      	str	r2, [r3, #0]
        return(-1);
 8001cca:	f04f 30ff 	mov.w	r0, #4294967295
 8001cce:	4770      	bx	lr
        return(-1);   /* Successful */
    }
}
int GetFifo (char *datapt) {
    if (PUTPT== GETPT){
        return(0);}   /* Empty if PUTPT=GETPT */
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	4770      	bx	lr
 8001cd4:	20002204 	.word	0x20002204

08001cd8 <USART_Config>:
 *      Author: toandang
 */
#include "usart.h"

void USART_Config(void)
{
 8001cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cdc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;
  USART_InitTypeDef USART_InitStructure;

  NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8001cde:	a808      	add	r0, sp, #32
 8001ce0:	f44f 7393 	mov.w	r3, #294	; 0x126
 8001ce4:	f2c0 1300 	movt	r3, #256	; 0x100
 8001ce8:	f840 3d1c 	str.w	r3, [r0, #-28]!
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
 8001cec:	f7fe fb38 	bl	8000360 <NVIC_Init>

  // sort out clocks
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA, ENABLE);
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	4601      	mov	r1, r0
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001cf4:	2700      	movs	r7, #0
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);

  // sort out clocks
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA, ENABLE);
 8001cf6:	f7ff f89f 	bl	8000e38 <RCC_AHB1PeriphClockCmd>
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001cfa:	f2c4 0702 	movt	r7, #16386	; 0x4002
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);

  // sort out clocks
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8001cfe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001d02:	2101      	movs	r1, #1
 8001d04:	f7ff f8ca 	bl	8000e9c <RCC_APB1PeriphClockCmd>
  /* Configure USART2 Tx (PA.02) as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001d08:	2400      	movs	r4, #0
  // sort out clocks
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
  /* Configure USART2 Tx (PA.02) as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001d0a:	2602      	movs	r6, #2

  // sort out clocks
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
  /* Configure USART2 Tx (PA.02) as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8001d0c:	2304      	movs	r3, #4
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001d0e:	4638      	mov	r0, r7
  /* Configure USART2 Tx (PA.02) as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001d10:	f04f 0801 	mov.w	r8, #1
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001d14:	a902      	add	r1, sp, #8
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Tx;
  /* Configure USART */
  USART_Init(USART2, &USART_InitStructure);
 8001d16:	f44f 4588 	mov.w	r5, #17408	; 0x4400

  // sort out clocks
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
  /* Configure USART2 Tx (PA.02) as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8001d1a:	9302      	str	r3, [sp, #8]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Tx;
  /* Configure USART */
  USART_Init(USART2, &USART_InitStructure);
 8001d1c:	f2c4 0500 	movt	r5, #16384	; 0x4000
  // sort out clocks
  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
  /* Configure USART2 Tx (PA.02) as alternate function push-pull */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001d20:	f88d 600d 	strb.w	r6, [sp, #13]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001d24:	f88d 600c 	strb.w	r6, [sp, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001d28:	f88d 400e 	strb.w	r4, [sp, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001d2c:	f88d 800f 	strb.w	r8, [sp, #15]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001d30:	f7fe fb76 	bl	8000420 <GPIO_Init>
  // Map USART2 to A.02
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8001d34:	4638      	mov	r0, r7
 8001d36:	4631      	mov	r1, r6
 8001d38:	2207      	movs	r2, #7
 8001d3a:	f7fe fca5 	bl	8000688 <GPIO_PinAFConfig>
  // Initialize USART
  USART_InitStructure.USART_BaudRate = 115200;
 8001d3e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Tx;
 8001d42:	2308      	movs	r3, #8
  /* Configure USART */
  USART_Init(USART2, &USART_InitStructure);
 8001d44:	4628      	mov	r0, r5
 8001d46:	a904      	add	r1, sp, #16
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
  // Map USART2 to A.02
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
  // Initialize USART
  USART_InitStructure.USART_BaudRate = 115200;
 8001d48:	9204      	str	r2, [sp, #16]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Tx;
 8001d4a:	f8ad 301a 	strh.w	r3, [sp, #26]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
  // Map USART2 to A.02
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
  // Initialize USART
  USART_InitStructure.USART_BaudRate = 115200;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001d4e:	f8ad 4014 	strh.w	r4, [sp, #20]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001d52:	f8ad 4016 	strh.w	r4, [sp, #22]
  USART_InitStructure.USART_Parity = USART_Parity_No;
 8001d56:	f8ad 4018 	strh.w	r4, [sp, #24]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001d5a:	f8ad 401c 	strh.w	r4, [sp, #28]
  USART_InitStructure.USART_Mode = USART_Mode_Tx;
  /* Configure USART */
  USART_Init(USART2, &USART_InitStructure);
 8001d5e:	f7ff f8cb 	bl	8000ef8 <USART_Init>
  /* Enable the USART */
  USART_Cmd(USART2, ENABLE);
 8001d62:	4628      	mov	r0, r5
 8001d64:	4641      	mov	r1, r8
 8001d66:	f7ff f9f5 	bl	8001154 <USART_Cmd>
}
 8001d6a:	b008      	add	sp, #32
 8001d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001d70 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001d70:	b500      	push	{lr}
  uint8_t data;
  int status;
  if (USART_GetITStatus(USART2,USART_IT_TXE)!= RESET)
 8001d72:	f44f 4088 	mov.w	r0, #17408	; 0x4400
  /* Enable the USART */
  USART_Cmd(USART2, ENABLE);
}

void USART2_IRQHandler(void)
{
 8001d76:	b083      	sub	sp, #12
  uint8_t data;
  int status;
  if (USART_GetITStatus(USART2,USART_IT_TXE)!= RESET)
 8001d78:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001d7c:	f240 7127 	movw	r1, #1831	; 0x727
 8001d80:	f7ff fb30 	bl	80013e4 <USART_GetITStatus>
 8001d84:	b910      	cbnz	r0, 8001d8c <USART2_IRQHandler+0x1c>
          }
        //GetFifo( &data);
        USART_SendData(USART2, data);

      }
}
 8001d86:	b003      	add	sp, #12
 8001d88:	f85d fb04 	ldr.w	pc, [sp], #4
{
  uint8_t data;
  int status;
  if (USART_GetITStatus(USART2,USART_IT_TXE)!= RESET)
      {
        LED_On();
 8001d8c:	f7ff fd06 	bl	800179c <LED_On>
        status = GetFifo( &data);
 8001d90:	4668      	mov	r0, sp
 8001d92:	f7ff ff81 	bl	8001c98 <GetFifo>
        if(!status)
 8001d96:	4602      	mov	r2, r0
          {
            USART_ITConfig(USART2,USART_IT_TXE,DISABLE);
 8001d98:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8001d9c:	f2c4 0000 	movt	r0, #16384	; 0x4000
  int status;
  if (USART_GetITStatus(USART2,USART_IT_TXE)!= RESET)
      {
        LED_On();
        status = GetFifo( &data);
        if(!status)
 8001da0:	b132      	cbz	r2, 8001db0 <USART2_IRQHandler+0x40>
          {
            USART_ITConfig(USART2,USART_IT_TXE,DISABLE);
            return;
          }
        //GetFifo( &data);
        USART_SendData(USART2, data);
 8001da2:	f89d 1000 	ldrb.w	r1, [sp]
 8001da6:	f7ff fa2b 	bl	8001200 <USART_SendData>

      }
}
 8001daa:	b003      	add	sp, #12
 8001dac:	f85d fb04 	ldr.w	pc, [sp], #4
      {
        LED_On();
        status = GetFifo( &data);
        if(!status)
          {
            USART_ITConfig(USART2,USART_IT_TXE,DISABLE);
 8001db0:	f240 7127 	movw	r1, #1831	; 0x727
 8001db4:	f7ff fa70 	bl	8001298 <USART_ITConfig>
          }
        //GetFifo( &data);
        USART_SendData(USART2, data);

      }
}
 8001db8:	b003      	add	sp, #12
 8001dba:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dbe:	bf00      	nop

08001dc0 <vDebugPrintf>:
  while(*ch!= 0)
    {
      PutFifo(*ch++);
    }
}
void vDebugPrintf(const char *fmt, ...) {
 8001dc0:	b40f      	push	{r0, r1, r2, r3}
 8001dc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dc6:	b0a1      	sub	sp, #132	; 0x84
 8001dc8:	ad28      	add	r5, sp, #160	; 0xa0
				sTmp[pos++] = '%';
				break;

			// Else, must be something else not handled.
			default:
				sTmp[pos++] = '?';
 8001dca:	273f      	movs	r7, #63	; 0x3f
  while(*ch!= 0)
    {
      PutFifo(*ch++);
    }
}
void vDebugPrintf(const char *fmt, ...) {
 8001dcc:	f855 4b04 	ldr.w	r4, [r5], #4
    int i;

	/* Print the string, suspending the scheduler as method of mutual
	exclusion. */
    //__disable_irq();
	vTaskSuspendAll();
 8001dd0:	f000 fb52 	bl	8002478 <vTaskSuspendAll>
      PutFifo(*ch++);
    }
}
void vDebugPrintf(const char *fmt, ...) {
	char sTmp[80];	// String build area.  String lives on the stack!
	uint8_t pos=0;
 8001dd4:	2300      	movs	r3, #0
    char *p = buf + 33;
    uint32_t c, n;

    *--p = '\0';
    do {
        n = u32Number / u8Base;
 8001dd6:	f64c 40cd 	movw	r0, #52429	; 0xcccd
	/* Print the string, suspending the scheduler as method of mutual
	exclusion. */
    //__disable_irq();
	vTaskSuspendAll();

    va_start(ap, fmt);
 8001dda:	9501      	str	r5, [sp, #4]
    char *p = buf + 33;
    uint32_t c, n;

    *--p = '\0';
    do {
        n = u32Number / u8Base;
 8001ddc:	f6cc 40cc 	movt	r0, #52428	; 0xcccc

    char buf[33];
    char *p = buf + 33;
    uint32_t c, n;

    *--p = '\0';
 8001de0:	461d      	mov	r5, r3
				vNum2String(sTmp, &pos, va_arg(ap, uint32_t), 10);
				break;

			// %x - value in hex
			case 'x':
				sTmp[pos++] = '0';
 8001de2:	2630      	movs	r6, #48	; 0x30

			// %i - integer
			case 'i':
				i = va_arg(ap, int32_t);
				if(i < 0){
					sTmp[pos++] = '-';
 8001de4:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
    //__disable_irq();
	vTaskSuspendAll();

    va_start(ap, fmt);

    while ((c = *bp++)) {
 8001de8:	7822      	ldrb	r2, [r4, #0]
 8001dea:	b15a      	cbz	r2, 8001e04 <vDebugPrintf+0x44>
        if (c != '%') {
 8001dec:	2a25      	cmp	r2, #37	; 0x25
 8001dee:	d01f      	beq.n	8001e30 <vDebugPrintf+0x70>
            sTmp[pos++] = c;
 8001df0:	a920      	add	r1, sp, #128	; 0x80
 8001df2:	4419      	add	r1, r3
    //__disable_irq();
	vTaskSuspendAll();

    va_start(ap, fmt);

    while ((c = *bp++)) {
 8001df4:	3401      	adds	r4, #1
        if (c != '%') {
            sTmp[pos++] = c;
 8001df6:	f801 2c50 	strb.w	r2, [r1, #-80]
    //__disable_irq();
	vTaskSuspendAll();

    va_start(ap, fmt);

    while ((c = *bp++)) {
 8001dfa:	7822      	ldrb	r2, [r4, #0]
        if (c != '%') {
            sTmp[pos++] = c;
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	b2db      	uxtb	r3, r3
    //__disable_irq();
	vTaskSuspendAll();

    va_start(ap, fmt);

    while ((c = *bp++)) {
 8001e00:	2a00      	cmp	r2, #0
 8001e02:	d1f3      	bne.n	8001dec <vDebugPrintf+0x2c>
			default:
				sTmp[pos++] = '?';
				break;
        }
    }
    sTmp[pos++] = 0;		// Mark the end of the string.
 8001e04:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 8001e08:	4463      	add	r3, ip
 8001e0a:	ac0c      	add	r4, sp, #48	; 0x30
 8001e0c:	f803 2c50 	strb.w	r2, [r3, #-80]
      }
}

void USARTPutchar(char* ch)
{
  while(*ch!= 0)
 8001e10:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8001e14:	b128      	cbz	r0, 8001e22 <vDebugPrintf+0x62>
    {
      PutFifo(*ch++);
 8001e16:	f7ff ff1b 	bl	8001c50 <PutFifo>
      }
}

void USARTPutchar(char* ch)
{
  while(*ch!= 0)
 8001e1a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	d1f9      	bne.n	8001e16 <vDebugPrintf+0x56>
    }
    sTmp[pos++] = 0;		// Mark the end of the string.
    USARTPutchar(sTmp);	// Copy the string into the OS queue.

    /* Resume the scheduler as method of mutual exclusion. */
	xTaskResumeAll();
 8001e22:	f000 fbfb 	bl	800261c <xTaskResumeAll>
	//__enable_irq();
    return;
}
 8001e26:	b021      	add	sp, #132	; 0x84
 8001e28:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e2c:	b004      	add	sp, #16
 8001e2e:	4770      	bx	lr
        if (c != '%') {
            sTmp[pos++] = c;
            continue;
        }

        switch ((c = *bp++)) {
 8001e30:	7861      	ldrb	r1, [r4, #1]
 8001e32:	2964      	cmp	r1, #100	; 0x64
 8001e34:	f104 0402 	add.w	r4, r4, #2
 8001e38:	f000 80ca 	beq.w	8001fd0 <vDebugPrintf+0x210>
 8001e3c:	d80d      	bhi.n	8001e5a <vDebugPrintf+0x9a>
 8001e3e:	2962      	cmp	r1, #98	; 0x62
 8001e40:	f000 8089 	beq.w	8001f56 <vDebugPrintf+0x196>
 8001e44:	f200 80f7 	bhi.w	8002036 <vDebugPrintf+0x276>
 8001e48:	2925      	cmp	r1, #37	; 0x25
 8001e4a:	d10d      	bne.n	8001e68 <vDebugPrintf+0xa8>
				} while (*p);
				break;

			// %% - output % character
			case '%':
				sTmp[pos++] = '%';
 8001e4c:	aa20      	add	r2, sp, #128	; 0x80
 8001e4e:	441a      	add	r2, r3
 8001e50:	3301      	adds	r3, #1
 8001e52:	f802 1c50 	strb.w	r1, [r2, #-80]
 8001e56:	b2db      	uxtb	r3, r3
				break;
 8001e58:	e7c6      	b.n	8001de8 <vDebugPrintf+0x28>
        if (c != '%') {
            sTmp[pos++] = c;
            continue;
        }

        switch ((c = *bp++)) {
 8001e5a:	2973      	cmp	r1, #115	; 0x73
 8001e5c:	f000 80f7 	beq.w	800204e <vDebugPrintf+0x28e>
 8001e60:	2978      	cmp	r1, #120	; 0x78
 8001e62:	d03b      	beq.n	8001edc <vDebugPrintf+0x11c>
 8001e64:	2969      	cmp	r1, #105	; 0x69
 8001e66:	d006      	beq.n	8001e76 <vDebugPrintf+0xb6>
				sTmp[pos++] = '%';
				break;

			// Else, must be something else not handled.
			default:
				sTmp[pos++] = '?';
 8001e68:	aa20      	add	r2, sp, #128	; 0x80
 8001e6a:	441a      	add	r2, r3
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f802 7c50 	strb.w	r7, [r2, #-80]
 8001e72:	b2db      	uxtb	r3, r3
				break;
 8001e74:	e7b8      	b.n	8001de8 <vDebugPrintf+0x28>
				sTmp[pos++] = va_arg(ap, int);
				break;

			// %i - integer
			case 'i':
				i = va_arg(ap, int32_t);
 8001e76:	9a01      	ldr	r2, [sp, #4]
 8001e78:	6811      	ldr	r1, [r2, #0]
 8001e7a:	3204      	adds	r2, #4
				if(i < 0){
 8001e7c:	2900      	cmp	r1, #0
				sTmp[pos++] = va_arg(ap, int);
				break;

			// %i - integer
			case 'i':
				i = va_arg(ap, int32_t);
 8001e7e:	9201      	str	r2, [sp, #4]

    char buf[33];
    char *p = buf + 33;
    uint32_t c, n;

    *--p = '\0';
 8001e80:	bfa4      	itt	ge
 8001e82:	f88d 5028 	strbge.w	r5, [sp, #40]	; 0x28
 8001e86:	f10d 0c27 	addge.w	ip, sp, #39	; 0x27
				break;

			// %i - integer
			case 'i':
				i = va_arg(ap, int32_t);
				if(i < 0){
 8001e8a:	da01      	bge.n	8001e90 <vDebugPrintf+0xd0>
 8001e8c:	e0f5      	b.n	800207a <vDebugPrintf+0x2ba>
        if (c < 10) {
            *--p = '0' + c;
        } else {
            *--p = 'a' + (c - 10);
        }
        u32Number /= u8Base;
 8001e8e:	4611      	mov	r1, r2
    char *p = buf + 33;
    uint32_t c, n;

    *--p = '\0';
    do {
        n = u32Number / u8Base;
 8001e90:	fba0 8201 	umull	r8, r2, r0, r1
 8001e94:	08d2      	lsrs	r2, r2, #3
        c = u32Number - (n * u8Base);
 8001e96:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 8001e9a:	eba1 0148 	sub.w	r1, r1, r8, lsl #1
        if (c < 10) {
            *--p = '0' + c;
 8001e9e:	fa5f f881 	uxtb.w	r8, r1
 8001ea2:	f108 0930 	add.w	r9, r8, #48	; 0x30
        } else {
            *--p = 'a' + (c - 10);
 8001ea6:	f108 0857 	add.w	r8, r8, #87	; 0x57
 8001eaa:	2909      	cmp	r1, #9
 8001eac:	bf94      	ite	ls
 8001eae:	4649      	movls	r1, r9
 8001eb0:	4641      	movhi	r1, r8
 8001eb2:	b2c9      	uxtb	r1, r1
 8001eb4:	46e0      	mov	r8, ip
 8001eb6:	f80c 1901 	strb.w	r1, [ip], #-1
        }
        u32Number /= u8Base;
    } while (u32Number != 0);
 8001eba:	2a00      	cmp	r2, #0
 8001ebc:	d1e7      	bne.n	8001e8e <vDebugPrintf+0xce>

    while (*p){
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	d092      	beq.n	8001de8 <vDebugPrintf+0x28>
 8001ec2:	4642      	mov	r2, r8
    	s[ *pPos ] = *p;
 8001ec4:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 8001ec8:	449c      	add	ip, r3
    	*pPos += 1;
 8001eca:	3301      	adds	r3, #1
        }
        u32Number /= u8Base;
    } while (u32Number != 0);

    while (*p){
    	s[ *pPos ] = *p;
 8001ecc:	f80c 1c50 	strb.w	r1, [ip, #-80]
            *--p = 'a' + (c - 10);
        }
        u32Number /= u8Base;
    } while (u32Number != 0);

    while (*p){
 8001ed0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    	s[ *pPos ] = *p;
    	*pPos += 1;
 8001ed4:	b2db      	uxtb	r3, r3
            *--p = 'a' + (c - 10);
        }
        u32Number /= u8Base;
    } while (u32Number != 0);

    while (*p){
 8001ed6:	2900      	cmp	r1, #0
 8001ed8:	d1f4      	bne.n	8001ec4 <vDebugPrintf+0x104>
 8001eda:	e785      	b.n	8001de8 <vDebugPrintf+0x28>
				break;

			// %x - value in hex
			case 'x':
				sTmp[pos++] = '0';
				sTmp[pos++] = 'x';
 8001edc:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
				vNum2String(sTmp, &pos, va_arg(ap, uint32_t), 16);
 8001ee0:	9a01      	ldr	r2, [sp, #4]

    char buf[33];
    char *p = buf + 33;
    uint32_t c, n;

    *--p = '\0';
 8001ee2:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
				vNum2String(sTmp, &pos, va_arg(ap, uint32_t), 10);
				break;

			// %x - value in hex
			case 'x':
				sTmp[pos++] = '0';
 8001ee6:	f103 0801 	add.w	r8, r3, #1
 8001eea:	46e1      	mov	r9, ip
				sTmp[pos++] = 'x';
 8001eec:	fa5c f888 	uxtab	r8, ip, r8
				vNum2String(sTmp, &pos, va_arg(ap, uint32_t), 10);
				break;

			// %x - value in hex
			case 'x':
				sTmp[pos++] = '0';
 8001ef0:	4499      	add	r9, r3
				sTmp[pos++] = 'x';
				vNum2String(sTmp, &pos, va_arg(ap, uint32_t), 16);
 8001ef2:	f102 0c04 	add.w	ip, r2, #4
				break;

			// %x - value in hex
			case 'x':
				sTmp[pos++] = '0';
				sTmp[pos++] = 'x';
 8001ef6:	3302      	adds	r3, #2
				vNum2String(sTmp, &pos, va_arg(ap, uint32_t), 10);
				break;

			// %x - value in hex
			case 'x':
				sTmp[pos++] = '0';
 8001ef8:	f809 6c50 	strb.w	r6, [r9, #-80]
				sTmp[pos++] = 'x';
				vNum2String(sTmp, &pos, va_arg(ap, uint32_t), 16);
 8001efc:	f8cd c004 	str.w	ip, [sp, #4]
 8001f00:	6812      	ldr	r2, [r2, #0]
				break;

			// %x - value in hex
			case 'x':
				sTmp[pos++] = '0';
				sTmp[pos++] = 'x';
 8001f02:	f808 1c50 	strb.w	r1, [r8, #-80]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f10d 0c27 	add.w	ip, sp, #39	; 0x27
 8001f0c:	e000      	b.n	8001f10 <vDebugPrintf+0x150>
        if (c < 10) {
            *--p = '0' + c;
        } else {
            *--p = 'a' + (c - 10);
        }
        u32Number /= u8Base;
 8001f0e:	460a      	mov	r2, r1
    char *p = buf + 33;
    uint32_t c, n;

    *--p = '\0';
    do {
        n = u32Number / u8Base;
 8001f10:	0911      	lsrs	r1, r2, #4
        c = u32Number - (n * u8Base);
 8001f12:	eba2 1201 	sub.w	r2, r2, r1, lsl #4
        if (c < 10) {
            *--p = '0' + c;
 8001f16:	fa5f f882 	uxtb.w	r8, r2
 8001f1a:	f108 0930 	add.w	r9, r8, #48	; 0x30
        } else {
            *--p = 'a' + (c - 10);
 8001f1e:	f108 0857 	add.w	r8, r8, #87	; 0x57
 8001f22:	2a09      	cmp	r2, #9
 8001f24:	bf94      	ite	ls
 8001f26:	464a      	movls	r2, r9
 8001f28:	4642      	movhi	r2, r8
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	46e0      	mov	r8, ip
 8001f2e:	f80c 2901 	strb.w	r2, [ip], #-1
        }
        u32Number /= u8Base;
    } while (u32Number != 0);
 8001f32:	2900      	cmp	r1, #0
 8001f34:	d1eb      	bne.n	8001f0e <vDebugPrintf+0x14e>

    while (*p){
 8001f36:	2a00      	cmp	r2, #0
 8001f38:	f43f af56 	beq.w	8001de8 <vDebugPrintf+0x28>
 8001f3c:	4641      	mov	r1, r8
    	s[ *pPos ] = *p;
 8001f3e:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 8001f42:	449c      	add	ip, r3
    	*pPos += 1;
 8001f44:	3301      	adds	r3, #1
        }
        u32Number /= u8Base;
    } while (u32Number != 0);

    while (*p){
    	s[ *pPos ] = *p;
 8001f46:	f80c 2c50 	strb.w	r2, [ip, #-80]
            *--p = 'a' + (c - 10);
        }
        u32Number /= u8Base;
    } while (u32Number != 0);

    while (*p){
 8001f4a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    	s[ *pPos ] = *p;
    	*pPos += 1;
 8001f4e:	b2db      	uxtb	r3, r3
            *--p = 'a' + (c - 10);
        }
        u32Number /= u8Base;
    } while (u32Number != 0);

    while (*p){
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d1f4      	bne.n	8001f3e <vDebugPrintf+0x17e>
 8001f54:	e748      	b.n	8001de8 <vDebugPrintf+0x28>
				break;

			// %b - binary
			case 'b':
				sTmp[pos++] = '0';
				sTmp[pos++] = 'b';
 8001f56:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
				vNum2String(sTmp, &pos, va_arg(ap, uint32_t), 2);
 8001f5a:	9a01      	ldr	r2, [sp, #4]

    char buf[33];
    char *p = buf + 33;
    uint32_t c, n;

    *--p = '\0';
 8001f5c:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
				vNum2String(sTmp, &pos, va_arg(ap, uint32_t), 16);
				break;

			// %b - binary
			case 'b':
				sTmp[pos++] = '0';
 8001f60:	f103 0801 	add.w	r8, r3, #1
 8001f64:	46e1      	mov	r9, ip
				sTmp[pos++] = 'b';
 8001f66:	fa5c f888 	uxtab	r8, ip, r8
				vNum2String(sTmp, &pos, va_arg(ap, uint32_t), 16);
				break;

			// %b - binary
			case 'b':
				sTmp[pos++] = '0';
 8001f6a:	4499      	add	r9, r3
				sTmp[pos++] = 'b';
				vNum2String(sTmp, &pos, va_arg(ap, uint32_t), 2);
 8001f6c:	f102 0c04 	add.w	ip, r2, #4
				break;

			// %b - binary
			case 'b':
				sTmp[pos++] = '0';
				sTmp[pos++] = 'b';
 8001f70:	3302      	adds	r3, #2
				vNum2String(sTmp, &pos, va_arg(ap, uint32_t), 16);
				break;

			// %b - binary
			case 'b':
				sTmp[pos++] = '0';
 8001f72:	f809 6c50 	strb.w	r6, [r9, #-80]
				sTmp[pos++] = 'b';
				vNum2String(sTmp, &pos, va_arg(ap, uint32_t), 2);
 8001f76:	f8cd c004 	str.w	ip, [sp, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
				break;

			// %b - binary
			case 'b':
				sTmp[pos++] = '0';
				sTmp[pos++] = 'b';
 8001f7c:	f808 1c50 	strb.w	r1, [r8, #-80]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f10d 0c27 	add.w	ip, sp, #39	; 0x27
 8001f86:	e000      	b.n	8001f8a <vDebugPrintf+0x1ca>
        if (c < 10) {
            *--p = '0' + c;
        } else {
            *--p = 'a' + (c - 10);
        }
        u32Number /= u8Base;
 8001f88:	460a      	mov	r2, r1
    char *p = buf + 33;
    uint32_t c, n;

    *--p = '\0';
    do {
        n = u32Number / u8Base;
 8001f8a:	0851      	lsrs	r1, r2, #1
        c = u32Number - (n * u8Base);
 8001f8c:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
        if (c < 10) {
            *--p = '0' + c;
 8001f90:	fa5f f882 	uxtb.w	r8, r2
 8001f94:	f108 0930 	add.w	r9, r8, #48	; 0x30
        } else {
            *--p = 'a' + (c - 10);
 8001f98:	f108 0857 	add.w	r8, r8, #87	; 0x57
 8001f9c:	2a09      	cmp	r2, #9
 8001f9e:	bf94      	ite	ls
 8001fa0:	464a      	movls	r2, r9
 8001fa2:	4642      	movhi	r2, r8
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	46e0      	mov	r8, ip
 8001fa8:	f80c 2901 	strb.w	r2, [ip], #-1
        }
        u32Number /= u8Base;
    } while (u32Number != 0);
 8001fac:	2900      	cmp	r1, #0
 8001fae:	d1eb      	bne.n	8001f88 <vDebugPrintf+0x1c8>

    while (*p){
 8001fb0:	2a00      	cmp	r2, #0
 8001fb2:	f43f af19 	beq.w	8001de8 <vDebugPrintf+0x28>
 8001fb6:	4641      	mov	r1, r8
    	s[ *pPos ] = *p;
 8001fb8:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 8001fbc:	449c      	add	ip, r3
    	*pPos += 1;
 8001fbe:	3301      	adds	r3, #1
        }
        u32Number /= u8Base;
    } while (u32Number != 0);

    while (*p){
    	s[ *pPos ] = *p;
 8001fc0:	f80c 2c50 	strb.w	r2, [ip, #-80]
            *--p = 'a' + (c - 10);
        }
        u32Number /= u8Base;
    } while (u32Number != 0);

    while (*p){
 8001fc4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    	s[ *pPos ] = *p;
    	*pPos += 1;
 8001fc8:	b2db      	uxtb	r3, r3
            *--p = 'a' + (c - 10);
        }
        u32Number /= u8Base;
    } while (u32Number != 0);

    while (*p){
 8001fca:	2a00      	cmp	r2, #0
 8001fcc:	d1f4      	bne.n	8001fb8 <vDebugPrintf+0x1f8>
 8001fce:	e70b      	b.n	8001de8 <vDebugPrintf+0x28>
        }

        switch ((c = *bp++)) {
			// d - decimal value
			case 'd':
				vNum2String(sTmp, &pos, va_arg(ap, uint32_t), 10);
 8001fd0:	9a01      	ldr	r2, [sp, #4]

    char buf[33];
    char *p = buf + 33;
    uint32_t c, n;

    *--p = '\0';
 8001fd2:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
        }

        switch ((c = *bp++)) {
			// d - decimal value
			case 'd':
				vNum2String(sTmp, &pos, va_arg(ap, uint32_t), 10);
 8001fd6:	f102 0c04 	add.w	ip, r2, #4
 8001fda:	f8cd c004 	str.w	ip, [sp, #4]
 8001fde:	6811      	ldr	r1, [r2, #0]
 8001fe0:	f10d 0c27 	add.w	ip, sp, #39	; 0x27
 8001fe4:	e000      	b.n	8001fe8 <vDebugPrintf+0x228>
        if (c < 10) {
            *--p = '0' + c;
        } else {
            *--p = 'a' + (c - 10);
        }
        u32Number /= u8Base;
 8001fe6:	4611      	mov	r1, r2
    char *p = buf + 33;
    uint32_t c, n;

    *--p = '\0';
    do {
        n = u32Number / u8Base;
 8001fe8:	fba0 8201 	umull	r8, r2, r0, r1
 8001fec:	08d2      	lsrs	r2, r2, #3
        c = u32Number - (n * u8Base);
 8001fee:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 8001ff2:	eba1 0148 	sub.w	r1, r1, r8, lsl #1
        if (c < 10) {
            *--p = '0' + c;
 8001ff6:	fa5f f881 	uxtb.w	r8, r1
 8001ffa:	f108 0930 	add.w	r9, r8, #48	; 0x30
        } else {
            *--p = 'a' + (c - 10);
 8001ffe:	f108 0857 	add.w	r8, r8, #87	; 0x57
 8002002:	2909      	cmp	r1, #9
 8002004:	bf94      	ite	ls
 8002006:	4649      	movls	r1, r9
 8002008:	4641      	movhi	r1, r8
 800200a:	b2c9      	uxtb	r1, r1
 800200c:	46e0      	mov	r8, ip
 800200e:	f80c 1901 	strb.w	r1, [ip], #-1
        }
        u32Number /= u8Base;
    } while (u32Number != 0);
 8002012:	2a00      	cmp	r2, #0
 8002014:	d1e7      	bne.n	8001fe6 <vDebugPrintf+0x226>

    while (*p){
 8002016:	2900      	cmp	r1, #0
 8002018:	f43f aee6 	beq.w	8001de8 <vDebugPrintf+0x28>
 800201c:	4642      	mov	r2, r8
    	s[ *pPos ] = *p;
 800201e:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 8002022:	449c      	add	ip, r3
    	*pPos += 1;
 8002024:	3301      	adds	r3, #1
        }
        u32Number /= u8Base;
    } while (u32Number != 0);

    while (*p){
    	s[ *pPos ] = *p;
 8002026:	f80c 1c50 	strb.w	r1, [ip, #-80]
            *--p = 'a' + (c - 10);
        }
        u32Number /= u8Base;
    } while (u32Number != 0);

    while (*p){
 800202a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    	s[ *pPos ] = *p;
    	*pPos += 1;
 800202e:	b2db      	uxtb	r3, r3
            *--p = 'a' + (c - 10);
        }
        u32Number /= u8Base;
    } while (u32Number != 0);

    while (*p){
 8002030:	2900      	cmp	r1, #0
 8002032:	d1f4      	bne.n	800201e <vDebugPrintf+0x25e>
 8002034:	e6d8      	b.n	8001de8 <vDebugPrintf+0x28>
				vNum2String(sTmp, &pos, va_arg(ap, uint32_t), 2);
				break;

			// %c - character
			case 'c':
				sTmp[pos++] = va_arg(ap, int);
 8002036:	9a01      	ldr	r2, [sp, #4]
 8002038:	a920      	add	r1, sp, #128	; 0x80
 800203a:	f8d2 c000 	ldr.w	ip, [r2]
 800203e:	4419      	add	r1, r3
 8002040:	3204      	adds	r2, #4
 8002042:	3301      	adds	r3, #1
 8002044:	9201      	str	r2, [sp, #4]
 8002046:	f801 cc50 	strb.w	ip, [r1, #-80]
 800204a:	b2db      	uxtb	r3, r3
				break;
 800204c:	e6cc      	b.n	8001de8 <vDebugPrintf+0x28>
				}
				break;

			// %s - string
			case 's':
				p = va_arg(ap, char *);
 800204e:	9a01      	ldr	r2, [sp, #4]
 8002050:	6811      	ldr	r1, [r2, #0]
 8002052:	3204      	adds	r2, #4
 8002054:	9201      	str	r2, [sp, #4]
 8002056:	f891 c000 	ldrb.w	ip, [r1]
 800205a:	461a      	mov	r2, r3
 800205c:	e001      	b.n	8002062 <vDebugPrintf+0x2a2>
 800205e:	4694      	mov	ip, r2
				do {
					sTmp[pos++] = *p++;
 8002060:	461a      	mov	r2, r3
 8002062:	f10d 0880 	add.w	r8, sp, #128	; 0x80
 8002066:	4490      	add	r8, r2
				} while (*p);
 8002068:	f811 2f01 	ldrb.w	r2, [r1, #1]!

			// %s - string
			case 's':
				p = va_arg(ap, char *);
				do {
					sTmp[pos++] = *p++;
 800206c:	f808 cc50 	strb.w	ip, [r8, #-80]
 8002070:	3301      	adds	r3, #1
 8002072:	b2db      	uxtb	r3, r3
				} while (*p);
 8002074:	2a00      	cmp	r2, #0
 8002076:	d1f2      	bne.n	800205e <vDebugPrintf+0x29e>
 8002078:	e6b6      	b.n	8001de8 <vDebugPrintf+0x28>

			// %i - integer
			case 'i':
				i = va_arg(ap, int32_t);
				if(i < 0){
					sTmp[pos++] = '-';
 800207a:	aa20      	add	r2, sp, #128	; 0x80
 800207c:	441a      	add	r2, r3
 800207e:	3301      	adds	r3, #1
					vNum2String(sTmp, &pos, (~i)+1, 10);
 8002080:	4249      	negs	r1, r1

    char buf[33];
    char *p = buf + 33;
    uint32_t c, n;

    *--p = '\0';
 8002082:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28

			// %i - integer
			case 'i':
				i = va_arg(ap, int32_t);
				if(i < 0){
					sTmp[pos++] = '-';
 8002086:	f802 ec50 	strb.w	lr, [r2, #-80]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f10d 0c27 	add.w	ip, sp, #39	; 0x27
 8002090:	e000      	b.n	8002094 <vDebugPrintf+0x2d4>
        if (c < 10) {
            *--p = '0' + c;
        } else {
            *--p = 'a' + (c - 10);
        }
        u32Number /= u8Base;
 8002092:	4611      	mov	r1, r2
    char *p = buf + 33;
    uint32_t c, n;

    *--p = '\0';
    do {
        n = u32Number / u8Base;
 8002094:	fba0 8201 	umull	r8, r2, r0, r1
 8002098:	08d2      	lsrs	r2, r2, #3
        c = u32Number - (n * u8Base);
 800209a:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 800209e:	eba1 0848 	sub.w	r8, r1, r8, lsl #1
        if (c < 10) {
            *--p = '0' + c;
 80020a2:	fa5f f988 	uxtb.w	r9, r8
 80020a6:	f109 0130 	add.w	r1, r9, #48	; 0x30
        } else {
            *--p = 'a' + (c - 10);
 80020aa:	f109 0957 	add.w	r9, r9, #87	; 0x57
 80020ae:	f1b8 0f09 	cmp.w	r8, #9
 80020b2:	bf88      	it	hi
 80020b4:	4649      	movhi	r1, r9
 80020b6:	b2c9      	uxtb	r1, r1
 80020b8:	46e0      	mov	r8, ip
 80020ba:	f80c 1901 	strb.w	r1, [ip], #-1
        }
        u32Number /= u8Base;
    } while (u32Number != 0);
 80020be:	2a00      	cmp	r2, #0
 80020c0:	d1e7      	bne.n	8002092 <vDebugPrintf+0x2d2>

    while (*p){
 80020c2:	2900      	cmp	r1, #0
 80020c4:	f43f ae90 	beq.w	8001de8 <vDebugPrintf+0x28>
 80020c8:	4642      	mov	r2, r8
    	s[ *pPos ] = *p;
 80020ca:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 80020ce:	449c      	add	ip, r3
    	*pPos += 1;
 80020d0:	3301      	adds	r3, #1
        }
        u32Number /= u8Base;
    } while (u32Number != 0);

    while (*p){
    	s[ *pPos ] = *p;
 80020d2:	f80c 1c50 	strb.w	r1, [ip, #-80]
            *--p = 'a' + (c - 10);
        }
        u32Number /= u8Base;
    } while (u32Number != 0);

    while (*p){
 80020d6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    	s[ *pPos ] = *p;
    	*pPos += 1;
 80020da:	b2db      	uxtb	r3, r3
            *--p = 'a' + (c - 10);
        }
        u32Number /= u8Base;
    } while (u32Number != 0);

    while (*p){
 80020dc:	2900      	cmp	r1, #0
 80020de:	d1f4      	bne.n	80020ca <vDebugPrintf+0x30a>
 80020e0:	e682      	b.n	8001de8 <vDebugPrintf+0x28>
 80020e2:	bf00      	nop

080020e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80020e4:	b538      	push	{r3, r4, r5, lr}
 80020e6:	f240 0568 	movw	r5, #104	; 0x68
 80020ea:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80020ee:	2400      	movs	r4, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80020f0:	1928      	adds	r0, r5, r4
 80020f2:	3414      	adds	r4, #20
 80020f4:	f001 f986 	bl	8003404 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020f8:	2c64      	cmp	r4, #100	; 0x64
 80020fa:	d1f9      	bne.n	80020f0 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80020fc:	f240 05fc 	movw	r5, #252	; 0xfc
 8002100:	f2c2 0500 	movt	r5, #8192	; 0x2000
	vListInitialise( &xDelayedTaskList2 );
 8002104:	f240 1410 	movw	r4, #272	; 0x110
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002108:	4628      	mov	r0, r5
	vListInitialise( &xDelayedTaskList2 );
 800210a:	f2c2 0400 	movt	r4, #8192	; 0x2000
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800210e:	f001 f979 	bl	8003404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002112:	4620      	mov	r0, r4
 8002114:	f001 f976 	bl	8003404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002118:	f240 00d8 	movw	r0, #216	; 0xd8
 800211c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002120:	f001 f970 	bl	8003404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002124:	f240 0054 	movw	r0, #84	; 0x54
 8002128:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800212c:	f001 f96a 	bl	8003404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002130:	f240 1028 	movw	r0, #296	; 0x128
 8002134:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002138:	f001 f964 	bl	8003404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800213c:	f240 0248 	movw	r2, #72	; 0x48
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002140:	f240 03f4 	movw	r3, #244	; 0xf4
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002144:	f2c2 0200 	movt	r2, #8192	; 0x2000
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002148:	f2c2 0300 	movt	r3, #8192	; 0x2000
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800214c:	6015      	str	r5, [r2, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800214e:	601c      	str	r4, [r3, #0]
 8002150:	bd38      	pop	{r3, r4, r5, pc}
 8002152:	bf00      	nop

08002154 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002154:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002158:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800215a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800215e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
 8002160:	4681      	mov	r9, r0
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002162:	460d      	mov	r5, r1
 8002164:	4690      	mov	r8, r2
 8002166:	469b      	mov	fp, r3
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
 8002168:	2800      	cmp	r0, #0
 800216a:	f000 80c5 	beq.w	80022f8 <xTaskGenericCreate+0x1a4>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 800216e:	2f04      	cmp	r7, #4
 8002170:	d902      	bls.n	8002178 <xTaskGenericCreate+0x24>
 8002172:	f001 fc25 	bl	80039c0 <ulPortSetInterruptMask>
 8002176:	e7fe      	b.n	8002176 <xTaskGenericCreate+0x22>
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002178:	2048      	movs	r0, #72	; 0x48
 800217a:	f001 fba3 	bl	80038c4 <pvPortMalloc>

	if( pxNewTCB != NULL )
 800217e:	4604      	mov	r4, r0
 8002180:	2800      	cmp	r0, #0
 8002182:	f000 80d7 	beq.w	8002334 <xTaskGenericCreate+0x1e0>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002186:	2e00      	cmp	r6, #0
 8002188:	f000 80c9 	beq.w	800231e <xTaskGenericCreate+0x1ca>
 800218c:	6306      	str	r6, [r0, #48]	; 0x30
 800218e:	4630      	mov	r0, r6
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8002190:	782a      	ldrb	r2, [r5, #0]
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8002192:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8002196:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800219a:	3b01      	subs	r3, #1
		pxTCB->pcTaskName[ x ] = pcName[ x ];

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800219c:	782a      	ldrb	r2, [r5, #0]
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800219e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80021a2:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80021a6:	2a00      	cmp	r2, #0
 80021a8:	d047      	beq.n	800223a <xTaskGenericCreate+0xe6>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80021aa:	786b      	ldrb	r3, [r5, #1]
 80021ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80021b0:	786b      	ldrb	r3, [r5, #1]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d041      	beq.n	800223a <xTaskGenericCreate+0xe6>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80021b6:	78ab      	ldrb	r3, [r5, #2]
 80021b8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80021bc:	78ab      	ldrb	r3, [r5, #2]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d03b      	beq.n	800223a <xTaskGenericCreate+0xe6>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80021c2:	78eb      	ldrb	r3, [r5, #3]
 80021c4:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80021c8:	78eb      	ldrb	r3, [r5, #3]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d035      	beq.n	800223a <xTaskGenericCreate+0xe6>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80021ce:	792b      	ldrb	r3, [r5, #4]
 80021d0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80021d4:	792b      	ldrb	r3, [r5, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d02f      	beq.n	800223a <xTaskGenericCreate+0xe6>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80021da:	796b      	ldrb	r3, [r5, #5]
 80021dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80021e0:	796b      	ldrb	r3, [r5, #5]
 80021e2:	b353      	cbz	r3, 800223a <xTaskGenericCreate+0xe6>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80021e4:	79ab      	ldrb	r3, [r5, #6]
 80021e6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80021ea:	79ab      	ldrb	r3, [r5, #6]
 80021ec:	b32b      	cbz	r3, 800223a <xTaskGenericCreate+0xe6>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80021ee:	79eb      	ldrb	r3, [r5, #7]
 80021f0:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80021f4:	79eb      	ldrb	r3, [r5, #7]
 80021f6:	b303      	cbz	r3, 800223a <xTaskGenericCreate+0xe6>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80021f8:	7a2b      	ldrb	r3, [r5, #8]
 80021fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80021fe:	7a2b      	ldrb	r3, [r5, #8]
 8002200:	b1db      	cbz	r3, 800223a <xTaskGenericCreate+0xe6>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8002202:	7a6b      	ldrb	r3, [r5, #9]
 8002204:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002208:	7a6b      	ldrb	r3, [r5, #9]
 800220a:	b1b3      	cbz	r3, 800223a <xTaskGenericCreate+0xe6>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800220c:	7aab      	ldrb	r3, [r5, #10]
 800220e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002212:	7aab      	ldrb	r3, [r5, #10]
 8002214:	b18b      	cbz	r3, 800223a <xTaskGenericCreate+0xe6>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8002216:	7aeb      	ldrb	r3, [r5, #11]
 8002218:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800221c:	7aeb      	ldrb	r3, [r5, #11]
 800221e:	b163      	cbz	r3, 800223a <xTaskGenericCreate+0xe6>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8002220:	7b2b      	ldrb	r3, [r5, #12]
 8002222:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002226:	7b2b      	ldrb	r3, [r5, #12]
 8002228:	b13b      	cbz	r3, 800223a <xTaskGenericCreate+0xe6>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800222a:	7b6b      	ldrb	r3, [r5, #13]
 800222c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002230:	7b6b      	ldrb	r3, [r5, #13]
 8002232:	b113      	cbz	r3, 800223a <xTaskGenericCreate+0xe6>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8002234:	7bab      	ldrb	r3, [r5, #14]
 8002236:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800223a:	2300      	movs	r3, #0
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800223c:	f104 0804 	add.w	r8, r4, #4
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8002244:	4640      	mov	r0, r8
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8002246:	62e7      	str	r7, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8002248:	6467      	str	r7, [r4, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800224a:	f001 f8e7 	bl	800341c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800224e:	f104 0018 	add.w	r0, r4, #24
 8002252:	f001 f8e3 	bl	800341c <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002256:	f1c7 0305 	rsb	r3, r7, #5
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800225a:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800225c:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800225e:	4630      	mov	r0, r6
 8002260:	4649      	mov	r1, r9
 8002262:	465a      	mov	r2, fp
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002264:	61a3      	str	r3, [r4, #24]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002266:	f001 fb79 	bl	800395c <pxPortInitialiseStack>
 800226a:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 800226c:	f1ba 0f00 	cmp.w	sl, #0
 8002270:	d001      	beq.n	8002276 <xTaskGenericCreate+0x122>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002272:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8002276:	f001 fbb9 	bl	80039ec <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 800227a:	f240 03d0 	movw	r3, #208	; 0xd0
 800227e:	f2c2 0300 	movt	r3, #8192	; 0x2000
			if( pxCurrentTCB == NULL )
 8002282:	f240 06d4 	movw	r6, #212	; 0xd4

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 8002286:	681a      	ldr	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8002288:	f2c2 0600 	movt	r6, #8192	; 0x2000

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 800228c:	3201      	adds	r2, #1
 800228e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8002290:	6832      	ldr	r2, [r6, #0]
 8002292:	2a00      	cmp	r2, #0
 8002294:	d038      	beq.n	8002308 <xTaskGenericCreate+0x1b4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8002296:	f240 054c 	movw	r5, #76	; 0x4c
 800229a:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800229e:	682b      	ldr	r3, [r5, #0]
 80022a0:	b923      	cbnz	r3, 80022ac <xTaskGenericCreate+0x158>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80022a2:	6833      	ldr	r3, [r6, #0]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
 80022a8:	bf28      	it	cs
 80022aa:	6034      	strcs	r4, [r6, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80022ac:	f240 00f8 	movw	r0, #248	; 0xf8
 80022b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80022b4:	f240 123c 	movw	r2, #316	; 0x13c
 80022b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80022bc:	6801      	ldr	r1, [r0, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80022be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022c0:	6814      	ldr	r4, [r2, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80022c2:	3101      	adds	r1, #1
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80022c4:	42a3      	cmp	r3, r4
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80022c6:	6001      	str	r1, [r0, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80022c8:	f240 0068 	movw	r0, #104	; 0x68
 80022cc:	bf88      	it	hi
 80022ce:	6013      	strhi	r3, [r2, #0]
 80022d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80022d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022d8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80022dc:	4641      	mov	r1, r8
 80022de:	f001 f8a1 	bl	8003424 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80022e2:	f001 fb97 	bl	8003a14 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 80022e6:	682b      	ldr	r3, [r5, #0]
 80022e8:	b11b      	cbz	r3, 80022f2 <xTaskGenericCreate+0x19e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80022ea:	6833      	ldr	r3, [r6, #0]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	429f      	cmp	r7, r3
 80022f0:	d805      	bhi.n	80022fe <xTaskGenericCreate+0x1aa>
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
 80022f2:	2001      	movs	r0, #1
 80022f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
 80022f8:	f001 fb62 	bl	80039c0 <ulPortSetInterruptMask>
 80022fc:	e7fe      	b.n	80022fc <xTaskGenericCreate+0x1a8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
			{
				taskYIELD_IF_USING_PREEMPTION();
 80022fe:	f001 fb53 	bl	80039a8 <vPortYield>
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
 8002302:	2001      	movs	r0, #1
 8002304:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uxCurrentNumberOfTasks++;
			if( pxCurrentTCB == NULL )
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8002308:	6034      	str	r4, [r6, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	f240 054c 	movw	r5, #76	; 0x4c
 8002312:	d101      	bne.n	8002318 <xTaskGenericCreate+0x1c4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8002314:	f7ff fee6 	bl	80020e4 <prvInitialiseTaskLists>
 8002318:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800231c:	e7c6      	b.n	80022ac <xTaskGenericCreate+0x158>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800231e:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8002322:	f001 facf 	bl	80038c4 <pvPortMalloc>
 8002326:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8002328:	2800      	cmp	r0, #0
 800232a:	f47f af31 	bne.w	8002190 <xTaskGenericCreate+0x3c>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 800232e:	4620      	mov	r0, r4
 8002330:	f001 faf6 	bl	8003920 <vPortFree>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8002338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800233c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800233e:	2048      	movs	r0, #72	; 0x48
 8002340:	f001 fac0 	bl	80038c4 <pvPortMalloc>

	if( pxNewTCB != NULL )
 8002344:	4604      	mov	r4, r0
 8002346:	2800      	cmp	r0, #0
 8002348:	f000 8081 	beq.w	800244e <vTaskStartScheduler+0x112>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800234c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002350:	f001 fab8 	bl	80038c4 <pvPortMalloc>
 8002354:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8002356:	2800      	cmp	r0, #0
 8002358:	d07d      	beq.n	8002456 <vTaskStartScheduler+0x11a>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800235a:	f04f 0e49 	mov.w	lr, #73	; 0x49
 800235e:	2500      	movs	r5, #0
 8002360:	2144      	movs	r1, #68	; 0x44
 8002362:	224c      	movs	r2, #76	; 0x4c
 8002364:	2345      	movs	r3, #69	; 0x45
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8002366:	1d27      	adds	r7, r4, #4
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8002368:	f884 e034 	strb.w	lr, [r4, #52]	; 0x34
 800236c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 8002370:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
 8002374:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8002378:	f500 767f 	add.w	r6, r0, #1020	; 0x3fc
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800237c:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8002380:	4638      	mov	r0, r7
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002382:	f884 5043 	strb.w	r5, [r4, #67]	; 0x43
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8002386:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8002388:	6465      	str	r5, [r4, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800238a:	f001 f847 	bl	800341c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800238e:	f104 0018 	add.w	r0, r4, #24
 8002392:	f001 f843 	bl	800341c <vListInitialiseItem>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002396:	f026 0607 	bic.w	r6, r6, #7
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800239a:	2305      	movs	r3, #5
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800239c:	f242 7199 	movw	r1, #10137	; 0x2799
 80023a0:	462a      	mov	r2, r5
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023a2:	61a3      	str	r3, [r4, #24]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023a4:	4630      	mov	r0, r6
 80023a6:	f6c0 0100 	movt	r1, #2048	; 0x800
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80023aa:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80023ac:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023ae:	f001 fad5 	bl	800395c <pxPortInitialiseStack>
 80023b2:	6020      	str	r0, [r4, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 80023b4:	f001 fb1a 	bl	80039ec <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80023b8:	f240 03d0 	movw	r3, #208	; 0xd0
 80023bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
			if( pxCurrentTCB == NULL )
 80023c0:	f240 06d4 	movw	r6, #212	; 0xd4

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 80023c4:	681a      	ldr	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 80023c6:	f2c2 0600 	movt	r6, #8192	; 0x2000

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 80023ca:	3201      	adds	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 80023ce:	6832      	ldr	r2, [r6, #0]
 80023d0:	2a00      	cmp	r2, #0
 80023d2:	d045      	beq.n	8002460 <vTaskStartScheduler+0x124>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80023d4:	f240 054c 	movw	r5, #76	; 0x4c
 80023d8:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80023dc:	682b      	ldr	r3, [r5, #0]
 80023de:	b91b      	cbnz	r3, 80023e8 <vTaskStartScheduler+0xac>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80023e0:	6833      	ldr	r3, [r6, #0]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	b903      	cbnz	r3, 80023e8 <vTaskStartScheduler+0xac>
					{
						pxCurrentTCB = pxNewTCB;
 80023e6:	6034      	str	r4, [r6, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80023e8:	f240 01f8 	movw	r1, #248	; 0xf8
 80023ec:	f2c2 0100 	movt	r1, #8192	; 0x2000
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80023f0:	f240 123c 	movw	r2, #316	; 0x13c
 80023f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80023f8:	6808      	ldr	r0, [r1, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80023fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023fc:	6814      	ldr	r4, [r2, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80023fe:	3001      	adds	r0, #1
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8002400:	42a3      	cmp	r3, r4
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8002402:	6008      	str	r0, [r1, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8002404:	f240 0068 	movw	r0, #104	; 0x68
 8002408:	bf88      	it	hi
 800240a:	6013      	strhi	r3, [r2, #0]
 800240c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002410:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002414:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002418:	4639      	mov	r1, r7
 800241a:	f001 f803 	bl	8003424 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 800241e:	f001 faf9 	bl	8003a14 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8002422:	682b      	ldr	r3, [r5, #0]
 8002424:	b103      	cbz	r3, 8002428 <vTaskStartScheduler+0xec>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8002426:	6833      	ldr	r3, [r6, #0]

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
		{
			xReturn = xTimerCreateTimerTask();
 8002428:	f001 f83a 	bl	80034a0 <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800242c:	2801      	cmp	r0, #1

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
		{
			xReturn = xTimerCreateTimerTask();
 800242e:	4604      	mov	r4, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002430:	d10c      	bne.n	800244c <vTaskStartScheduler+0x110>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002432:	f001 fac5 	bl	80039c0 <ulPortSetInterruptMask>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
		xTickCount = ( TickType_t ) 0U;
 8002436:	f240 03f0 	movw	r3, #240	; 0xf0
 800243a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800243e:	2200      	movs	r2, #0
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8002440:	602c      	str	r4, [r5, #0]
		xTickCount = ( TickType_t ) 0U;
 8002442:	601a      	str	r2, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8002444:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002448:	f001 bb44 	b.w	8003ad4 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 800244c:	b104      	cbz	r4, 8002450 <vTaskStartScheduler+0x114>
 800244e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002450:	f001 fab6 	bl	80039c0 <ulPortSetInterruptMask>
 8002454:	e7fe      	b.n	8002454 <vTaskStartScheduler+0x118>
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

		if( pxNewTCB->pxStack == NULL )
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8002456:	4620      	mov	r0, r4
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8002458:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

		if( pxNewTCB->pxStack == NULL )
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 800245c:	f001 ba60 	b.w	8003920 <vPortFree>
			uxCurrentNumberOfTasks++;
			if( pxCurrentTCB == NULL )
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8002460:	6034      	str	r4, [r6, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b01      	cmp	r3, #1
 8002466:	f240 054c 	movw	r5, #76	; 0x4c
 800246a:	d101      	bne.n	8002470 <vTaskStartScheduler+0x134>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 800246c:	f7ff fe3a 	bl	80020e4 <prvInitialiseTaskLists>
 8002470:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8002474:	e7b8      	b.n	80023e8 <vTaskStartScheduler+0xac>
 8002476:	bf00      	nop

08002478 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002478:	f240 03cc 	movw	r3, #204	; 0xcc
 800247c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	3201      	adds	r2, #1
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	4770      	bx	lr

08002488 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002488:	b510      	push	{r4, lr}
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 800248a:	f001 faaf 	bl	80039ec <vPortEnterCritical>
	{
		xTicks = xTickCount;
 800248e:	f240 03f0 	movw	r3, #240	; 0xf0
 8002492:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002496:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8002498:	f001 fabc 	bl	8003a14 <vPortExitCritical>

	return xTicks;
}
 800249c:	4620      	mov	r0, r4
 800249e:	bd10      	pop	{r4, pc}

080024a0 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80024a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024a4:	f240 03cc 	movw	r3, #204	; 0xcc
 80024a8:	f2c2 0300 	movt	r3, #8192	; 0x2000

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80024ac:	b083      	sub	sp, #12

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d165      	bne.n	8002580 <xTaskIncrementTick+0xe0>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 80024b4:	f240 03f0 	movw	r3, #240	; 0xf0
 80024b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024bc:	f240 0418 	movw	r4, #24
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	3201      	adds	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80024c6:	f8d3 9000 	ldr.w	r9, [r3]
 80024ca:	f2c2 0400 	movt	r4, #8192	; 0x2000

			if( xConstTickCount == ( TickType_t ) 0U )
 80024ce:	f1b9 0f00 	cmp.w	r9, #0
 80024d2:	d069      	beq.n	80025a8 <xTaskIncrementTick+0x108>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 80024d4:	6823      	ldr	r3, [r4, #0]
 80024d6:	4599      	cmp	r9, r3
 80024d8:	d370      	bcc.n	80025bc <xTaskIncrementTick+0x11c>
 80024da:	f240 0848 	movw	r8, #72	; 0x48
 80024de:	f240 0668 	movw	r6, #104	; 0x68
 80024e2:	f240 0bd4 	movw	fp, #212	; 0xd4
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 80024e6:	f240 173c 	movw	r7, #316	; 0x13c
 80024ea:	f2c2 0800 	movt	r8, #8192	; 0x2000
 80024ee:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80024f2:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 80024f6:	f2c2 0700 	movt	r7, #8192	; 0x2000

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 80024fa:	2500      	movs	r5, #0
 80024fc:	e02d      	b.n	800255a <xTaskIncrementTick+0xba>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80024fe:	f240 0348 	movw	r3, #72	; 0x48
 8002502:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68d2      	ldr	r2, [r2, #12]
 800250a:	f8d2 a00c 	ldr.w	sl, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800250e:	f8da 1004 	ldr.w	r1, [sl, #4]
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002512:	f10a 0304 	add.w	r3, sl, #4
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );

						if( xConstTickCount < xItemValue )
 8002516:	4589      	cmp	r9, r1
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002518:	9301      	str	r3, [sp, #4]
 800251a:	4618      	mov	r0, r3
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );

						if( xConstTickCount < xItemValue )
 800251c:	d374      	bcc.n	8002608 <xTaskIncrementTick+0x168>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800251e:	f000 ffab 	bl	8003478 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002522:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002526:	f10a 0018 	add.w	r0, sl, #24
						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800252a:	b109      	cbz	r1, 8002530 <xTaskIncrementTick+0x90>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800252c:	f000 ffa4 	bl	8003478 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8002530:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	9901      	ldr	r1, [sp, #4]
 8002538:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800253c:	4293      	cmp	r3, r2
 800253e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8002542:	bf88      	it	hi
 8002544:	603b      	strhi	r3, [r7, #0]
 8002546:	f000 ff6d 	bl	8003424 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800254a:	f8db 0000 	ldr.w	r0, [fp]
 800254e:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
 8002552:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 8002554:	4291      	cmp	r1, r2
 8002556:	bf28      	it	cs
 8002558:	2501      	movcs	r5, #1
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800255a:	f8d8 2000 	ldr.w	r2, [r8]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	2a00      	cmp	r2, #0
 8002562:	d1cc      	bne.n	80024fe <xTaskIncrementTick+0x5e>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8002564:	f04f 32ff 	mov.w	r2, #4294967295
 8002568:	6022      	str	r2, [r4, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800256a:	f8db 3000 	ldr.w	r3, [fp]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002574:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
 8002578:	2b01      	cmp	r3, #1
 800257a:	bf88      	it	hi
 800257c:	2501      	movhi	r5, #1
 800257e:	e007      	b.n	8002590 <xTaskIncrementTick+0xf0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002580:	f240 1324 	movw	r3, #292	; 0x124
 8002584:	f2c2 0300 	movt	r3, #8192	; 0x2000

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002588:	2500      	movs	r5, #0
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	3201      	adds	r2, #1
 800258e:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002590:	f240 1340 	movw	r3, #320	; 0x140
 8002594:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002598:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
 800259a:	2b00      	cmp	r3, #0
 800259c:	bf18      	it	ne
 800259e:	2501      	movne	r5, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 80025a0:	4628      	mov	r0, r5
 80025a2:	b003      	add	sp, #12
 80025a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			block. */
			const TickType_t xConstTickCount = xTickCount;

			if( xConstTickCount == ( TickType_t ) 0U )
			{
				taskSWITCH_DELAYED_LISTS();
 80025a8:	f240 0348 	movw	r3, #72	; 0x48
 80025ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	b162      	cbz	r2, 80025d0 <xTaskIncrementTick+0x130>
 80025b6:	f001 fa03 	bl	80039c0 <ulPortSetInterruptMask>
 80025ba:	e7fe      	b.n	80025ba <xTaskIncrementTick+0x11a>
 80025bc:	f240 0668 	movw	r6, #104	; 0x68
 80025c0:	f240 0bd4 	movw	fp, #212	; 0xd4
 80025c4:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80025c8:	f2c2 0b00 	movt	fp, #8192	; 0x2000

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80025cc:	2500      	movs	r5, #0
 80025ce:	e7cc      	b.n	800256a <xTaskIncrementTick+0xca>
			block. */
			const TickType_t xConstTickCount = xTickCount;

			if( xConstTickCount == ( TickType_t ) 0U )
			{
				taskSWITCH_DELAYED_LISTS();
 80025d0:	f240 01f4 	movw	r1, #244	; 0xf4
 80025d4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	680c      	ldr	r4, [r1, #0]
 80025dc:	f240 02ec 	movw	r2, #236	; 0xec
 80025e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80025e4:	601c      	str	r4, [r3, #0]
 80025e6:	6008      	str	r0, [r1, #0]
 80025e8:	6811      	ldr	r1, [r2, #0]
 80025ea:	3101      	adds	r1, #1
 80025ec:	6011      	str	r1, [r2, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	b15a      	cbz	r2, 800260c <xTaskIncrementTick+0x16c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f240 0418 	movw	r4, #24
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002604:	6023      	str	r3, [r4, #0]
 8002606:	e765      	b.n	80024d4 <xTaskIncrementTick+0x34>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8002608:	6021      	str	r1, [r4, #0]
							break;
 800260a:	e7ae      	b.n	800256a <xTaskIncrementTick+0xca>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800260c:	f240 0418 	movw	r4, #24
 8002610:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002614:	f04f 33ff 	mov.w	r3, #4294967295
 8002618:	6023      	str	r3, [r4, #0]
 800261a:	e75b      	b.n	80024d4 <xTaskIncrementTick+0x34>

0800261c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800261c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002620:	f240 04cc 	movw	r4, #204	; 0xcc
 8002624:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	b913      	cbnz	r3, 8002632 <xTaskResumeAll+0x16>
 800262c:	f001 f9c8 	bl	80039c0 <ulPortSetInterruptMask>
 8002630:	e7fe      	b.n	8002630 <xTaskResumeAll+0x14>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002632:	f001 f9db 	bl	80039ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	3b01      	subs	r3, #1
 800263a:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800263c:	6823      	ldr	r3, [r4, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d148      	bne.n	80026d4 <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002642:	f240 03d0 	movw	r3, #208	; 0xd0
 8002646:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d041      	beq.n	80026d4 <xTaskResumeAll+0xb8>
 8002650:	f240 06d8 	movw	r6, #216	; 0xd8
 8002654:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8002658:	f240 1540 	movw	r5, #320	; 0x140
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 800265c:	f240 143c 	movw	r4, #316	; 0x13c
 8002660:	f240 0968 	movw	r9, #104	; 0x68

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002664:	f240 08d4 	movw	r8, #212	; 0xd4
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002668:	46b2      	mov	sl, r6
 800266a:	f2c2 0500 	movt	r5, #8192	; 0x2000
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 800266e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002672:	f2c2 0900 	movt	r9, #8192	; 0x2000

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002676:	f2c2 0800 	movt	r8, #8192	; 0x2000
 800267a:	e01f      	b.n	80026bc <xTaskResumeAll+0xa0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800267c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8002680:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002682:	f107 0b04 	add.w	fp, r7, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002686:	f107 0018 	add.w	r0, r7, #24
 800268a:	f000 fef5 	bl	8003478 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800268e:	4658      	mov	r0, fp
 8002690:	f000 fef2 	bl	8003478 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002696:	6822      	ldr	r2, [r4, #0]
 8002698:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800269c:	4293      	cmp	r3, r2
 800269e:	4659      	mov	r1, fp
 80026a0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80026a4:	bf88      	it	hi
 80026a6:	6023      	strhi	r3, [r4, #0]
 80026a8:	f000 febc 	bl	8003424 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026ac:	f8d8 3000 	ldr.w	r3, [r8]
 80026b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	4299      	cmp	r1, r3
					{
						xYieldPending = pdTRUE;
 80026b6:	bf24      	itt	cs
 80026b8:	2301      	movcs	r3, #1
 80026ba:	602b      	strcs	r3, [r5, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026bc:	6833      	ldr	r3, [r6, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1dc      	bne.n	800267c <xTaskResumeAll+0x60>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 80026c2:	f240 1424 	movw	r4, #292	; 0x124
 80026c6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	b943      	cbnz	r3, 80026e0 <xTaskResumeAll+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 80026ce:	682c      	ldr	r4, [r5, #0]
 80026d0:	2c01      	cmp	r4, #1
 80026d2:	d014      	beq.n	80026fe <xTaskResumeAll+0xe2>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 80026d4:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80026d6:	f001 f99d 	bl	8003a14 <vPortExitCritical>

	return xAlreadyYielded;
}
 80026da:	4620      	mov	r0, r4
 80026dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f3      	beq.n	80026ce <xTaskResumeAll+0xb2>
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 80026e6:	2601      	movs	r6, #1
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
 80026e8:	f7ff feda 	bl	80024a0 <xTaskIncrementTick>
 80026ec:	b100      	cbz	r0, 80026f0 <xTaskResumeAll+0xd4>
						{
							xYieldPending = pdTRUE;
 80026ee:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 80026f0:	6823      	ldr	r3, [r4, #0]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f5      	bne.n	80026e8 <xTaskResumeAll+0xcc>
 80026fc:	e7e7      	b.n	80026ce <xTaskResumeAll+0xb2>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80026fe:	f001 f953 	bl	80039a8 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002702:	f001 f987 	bl	8003a14 <vPortExitCritical>

	return xAlreadyYielded;
}
 8002706:	4620      	mov	r0, r4
 8002708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800270c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800270c:	b570      	push	{r4, r5, r6, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800270e:	4602      	mov	r2, r0
 8002710:	b918      	cbnz	r0, 800271a <vTaskDelay+0xe>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8002716:	f001 b947 	b.w	80039a8 <vPortYield>


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800271a:	f240 03cc 	movw	r3, #204	; 0xcc
 800271e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002722:	6819      	ldr	r1, [r3, #0]
 8002724:	bb59      	cbnz	r1, 800277e <vTaskDelay+0x72>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002726:	6819      	ldr	r1, [r3, #0]
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8002728:	f240 06f0 	movw	r6, #240	; 0xf0

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800272c:	f240 04d4 	movw	r4, #212	; 0xd4
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002730:	3101      	adds	r1, #1
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8002732:	f2c2 0600 	movt	r6, #8192	; 0x2000

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002736:	f2c2 0400 	movt	r4, #8192	; 0x2000
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800273a:	6019      	str	r1, [r3, #0]
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800273c:	6835      	ldr	r5, [r6, #0]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800273e:	6820      	ldr	r0, [r4, #0]
 8002740:	3004      	adds	r0, #4
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8002742:	4415      	add	r5, r2

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002744:	f000 fe98 	bl	8003478 <uxListRemove>
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002748:	6822      	ldr	r2, [r4, #0]

	if( xTimeToWake < xTickCount )
 800274a:	6833      	ldr	r3, [r6, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800274c:	6055      	str	r5, [r2, #4]

	if( xTimeToWake < xTickCount )
 800274e:	429d      	cmp	r5, r3
 8002750:	d318      	bcc.n	8002784 <vTaskDelay+0x78>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002752:	f240 0348 	movw	r3, #72	; 0x48
 8002756:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	6821      	ldr	r1, [r4, #0]
 800275e:	3104      	adds	r1, #4
 8002760:	f000 fe70 	bl	8003444 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8002764:	f240 0318 	movw	r3, #24
 8002768:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4295      	cmp	r5, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002770:	bf38      	it	cc
 8002772:	601d      	strcc	r5, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
 8002774:	f7ff ff52 	bl	800261c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002778:	2800      	cmp	r0, #0
 800277a:	d0ca      	beq.n	8002712 <vTaskDelay+0x6>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800277c:	bd70      	pop	{r4, r5, r6, pc}


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800277e:	f001 f91f 	bl	80039c0 <ulPortSetInterruptMask>
 8002782:	e7fe      	b.n	8002782 <vTaskDelay+0x76>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002784:	f240 03f4 	movw	r3, #244	; 0xf4
 8002788:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	6821      	ldr	r1, [r4, #0]
 8002790:	3104      	adds	r1, #4
 8002792:	f000 fe57 	bl	8003444 <vListInsert>
 8002796:	e7ed      	b.n	8002774 <vTaskDelay+0x68>

08002798 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002798:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800279c:	f240 0654 	movw	r6, #84	; 0x54
 80027a0:	b083      	sub	sp, #12
 80027a2:	f240 0550 	movw	r5, #80	; 0x50
 80027a6:	f240 02d0 	movw	r2, #208	; 0xd0
 80027aa:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80027ae:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80027b2:	f240 04cc 	movw	r4, #204	; 0xcc
 80027b6:	f240 0968 	movw	r9, #104	; 0x68
 80027ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80027be:	46b2      	mov	sl, r6
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 80027c0:	46a8      	mov	r8, r5
 80027c2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80027c6:	9201      	str	r2, [sp, #4]
 80027c8:	f2c2 0900 	movt	r9, #8192	; 0x2000
 80027cc:	e006      	b.n	80027dc <prvIdleTask+0x44>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80027ce:	6823      	ldr	r3, [r4, #0]
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80027d0:	6837      	ldr	r7, [r6, #0]
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80027d2:	3301      	adds	r3, #1
 80027d4:	6023      	str	r3, [r4, #0]
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
 80027d6:	f7ff ff21 	bl	800261c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80027da:	b94f      	cbnz	r7, 80027f0 <prvIdleTask+0x58>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 80027dc:	682b      	ldr	r3, [r5, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f5      	bne.n	80027ce <prvIdleTask+0x36>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80027e2:	f8d9 3000 	ldr.w	r3, [r9]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d9f8      	bls.n	80027dc <prvIdleTask+0x44>
			{
				taskYIELD();
 80027ea:	f001 f8dd 	bl	80039a8 <vPortYield>
 80027ee:	e7f5      	b.n	80027dc <prvIdleTask+0x44>

			if( xListIsEmpty == pdFALSE )
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80027f0:	f001 f8fc 	bl	80039ec <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80027f4:	f8da 300c 	ldr.w	r3, [sl, #12]
 80027f8:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80027fc:	f10b 0004 	add.w	r0, fp, #4
 8002800:	f000 fe3a 	bl	8003478 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002804:	9a01      	ldr	r2, [sp, #4]
 8002806:	6813      	ldr	r3, [r2, #0]
 8002808:	3b01      	subs	r3, #1
 800280a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800280c:	f8d8 3000 	ldr.w	r3, [r8]
 8002810:	3b01      	subs	r3, #1
 8002812:	f8c8 3000 	str.w	r3, [r8]
				}
				taskEXIT_CRITICAL();
 8002816:	f001 f8fd 	bl	8003a14 <vPortExitCritical>
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
 800281a:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 800281e:	f001 f87f 	bl	8003920 <vPortFree>
		vPortFree( pxTCB );
 8002822:	4658      	mov	r0, fp
 8002824:	f001 f87c 	bl	8003920 <vPortFree>
 8002828:	e7d8      	b.n	80027dc <prvIdleTask+0x44>
 800282a:	bf00      	nop

0800282c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800282c:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800282e:	f240 03cc 	movw	r3, #204	; 0xcc
 8002832:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002836:	6819      	ldr	r1, [r3, #0]
 8002838:	2900      	cmp	r1, #0
 800283a:	d135      	bne.n	80028a8 <vTaskSwitchContext+0x7c>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 800283c:	f240 1240 	movw	r2, #320	; 0x140
 8002840:	f2c2 0200 	movt	r2, #8192	; 0x2000
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002844:	f240 133c 	movw	r3, #316	; 0x13c
 8002848:	f2c2 0300 	movt	r3, #8192	; 0x2000
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 800284c:	6011      	str	r1, [r2, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 800284e:	6819      	ldr	r1, [r3, #0]
 8002850:	f240 0268 	movw	r2, #104	; 0x68
 8002854:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002858:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800285c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002860:	b979      	cbnz	r1, 8002882 <vTaskSwitchContext+0x56>
 8002862:	6819      	ldr	r1, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	b911      	cbnz	r1, 800286e <vTaskSwitchContext+0x42>
 8002868:	e025      	b.n	80028b6 <vTaskSwitchContext+0x8a>
 800286a:	6801      	ldr	r1, [r0, #0]
 800286c:	b319      	cbz	r1, 80028b6 <vTaskSwitchContext+0x8a>
 800286e:	6819      	ldr	r1, [r3, #0]
 8002870:	3901      	subs	r1, #1
 8002872:	6019      	str	r1, [r3, #0]
 8002874:	6819      	ldr	r1, [r3, #0]
 8002876:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800287a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800287e:	2900      	cmp	r1, #0
 8002880:	d0f3      	beq.n	800286a <vTaskSwitchContext+0x3e>
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002888:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800288c:	f102 0108 	add.w	r1, r2, #8
 8002890:	6853      	ldr	r3, [r2, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	428b      	cmp	r3, r1
 8002896:	6053      	str	r3, [r2, #4]
 8002898:	d010      	beq.n	80028bc <vTaskSwitchContext+0x90>
 800289a:	f240 02d4 	movw	r2, #212	; 0xd4
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	bd08      	pop	{r3, pc}
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80028a8:	f240 1340 	movw	r3, #320	; 0x140
 80028ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028b0:	2201      	movs	r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	bd08      	pop	{r3, pc}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 80028b6:	f001 f883 	bl	80039c0 <ulPortSetInterruptMask>
 80028ba:	e7fe      	b.n	80028ba <vTaskSwitchContext+0x8e>
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	6053      	str	r3, [r2, #4]
 80028c0:	e7eb      	b.n	800289a <vTaskSwitchContext+0x6e>
 80028c2:	bf00      	nop

080028c4 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80028c4:	b538      	push	{r3, r4, r5, lr}
 80028c6:	460d      	mov	r5, r1
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 80028c8:	2800      	cmp	r0, #0
 80028ca:	d03f      	beq.n	800294c <vTaskPlaceOnEventList+0x88>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80028cc:	f240 04d4 	movw	r4, #212	; 0xd4
 80028d0:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80028d4:	6821      	ldr	r1, [r4, #0]
 80028d6:	3118      	adds	r1, #24
 80028d8:	f000 fdb4 	bl	8003444 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80028dc:	6820      	ldr	r0, [r4, #0]
 80028de:	3004      	adds	r0, #4
 80028e0:	f000 fdca 	bl	8003478 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80028e4:	1c6b      	adds	r3, r5, #1
 80028e6:	d027      	beq.n	8002938 <vTaskPlaceOnEventList+0x74>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 80028e8:	f240 03f0 	movw	r3, #240	; 0xf0
 80028ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028f0:	6819      	ldr	r1, [r3, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80028f2:	6822      	ldr	r2, [r4, #0]

	if( xTimeToWake < xTickCount )
 80028f4:	681b      	ldr	r3, [r3, #0]
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 80028f6:	440d      	add	r5, r1
static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 80028f8:	429d      	cmp	r5, r3
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80028fa:	6055      	str	r5, [r2, #4]

	if( xTimeToWake < xTickCount )
 80028fc:	d311      	bcc.n	8002922 <vTaskPlaceOnEventList+0x5e>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80028fe:	f240 0348 	movw	r3, #72	; 0x48
 8002902:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	6821      	ldr	r1, [r4, #0]
 800290a:	3104      	adds	r1, #4
 800290c:	f000 fd9a 	bl	8003444 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8002910:	f240 0318 	movw	r3, #24
 8002914:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4295      	cmp	r5, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 800291c:	bf38      	it	cc
 800291e:	601d      	strcc	r5, [r3, #0]
 8002920:	bd38      	pop	{r3, r4, r5, pc}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002922:	f240 03f4 	movw	r3, #244	; 0xf4
 8002926:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	6821      	ldr	r1, [r4, #0]
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800292e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002932:	3104      	adds	r1, #4
 8002934:	f000 bd86 	b.w	8003444 <vListInsert>
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002938:	6821      	ldr	r1, [r4, #0]
 800293a:	f240 1028 	movw	r0, #296	; 0x128
 800293e:	3104      	adds	r1, #4
 8002940:	f2c2 0000 	movt	r0, #8192	; 0x2000
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002948:	f000 bd6c 	b.w	8003424 <vListInsertEnd>

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 800294c:	f001 f838 	bl	80039c0 <ulPortSetInterruptMask>
 8002950:	e7fe      	b.n	8002950 <vTaskPlaceOnEventList+0x8c>
 8002952:	bf00      	nop

08002954 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
 8002954:	b538      	push	{r3, r4, r5, lr}
 8002956:	460d      	mov	r5, r1
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
 8002958:	b340      	cbz	r0, 80029ac <vTaskPlaceOnEventListRestricted+0x58>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800295a:	f240 04d4 	movw	r4, #212	; 0xd4
 800295e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002962:	6821      	ldr	r1, [r4, #0]
 8002964:	3118      	adds	r1, #24
 8002966:	f000 fd5d 	bl	8003424 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800296a:	6820      	ldr	r0, [r4, #0]
 800296c:	3004      	adds	r0, #4
 800296e:	f000 fd83 	bl	8003478 <uxListRemove>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8002972:	f240 03f0 	movw	r3, #240	; 0xf0
 8002976:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800297a:	6819      	ldr	r1, [r3, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800297c:	6822      	ldr	r2, [r4, #0]

	if( xTimeToWake < xTickCount )
 800297e:	681b      	ldr	r3, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8002980:	440d      	add	r5, r1
static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 8002982:	429d      	cmp	r5, r3
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002984:	6055      	str	r5, [r2, #4]

	if( xTimeToWake < xTickCount )
 8002986:	d314      	bcc.n	80029b2 <vTaskPlaceOnEventListRestricted+0x5e>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002988:	f240 0348 	movw	r3, #72	; 0x48
 800298c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	6821      	ldr	r1, [r4, #0]
 8002994:	3104      	adds	r1, #4
 8002996:	f000 fd55 	bl	8003444 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 800299a:	f240 0318 	movw	r3, #24
 800299e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4295      	cmp	r5, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 80029a6:	bf38      	it	cc
 80029a8:	601d      	strcc	r5, [r3, #0]
 80029aa:	bd38      	pop	{r3, r4, r5, pc}

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
 80029ac:	f001 f808 	bl	80039c0 <ulPortSetInterruptMask>
 80029b0:	e7fe      	b.n	80029b0 <vTaskPlaceOnEventListRestricted+0x5c>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80029b2:	f240 03f4 	movw	r3, #244	; 0xf4
 80029b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	6821      	ldr	r1, [r4, #0]
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
 80029be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80029c2:	3104      	adds	r1, #4
 80029c4:	f000 bd3e 	b.w	8003444 <vListInsert>

080029c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80029c8:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80029ca:	68c3      	ldr	r3, [r0, #12]
 80029cc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80029ce:	2c00      	cmp	r4, #0
 80029d0:	d03c      	beq.n	8002a4c <xTaskRemoveFromEventList+0x84>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80029d2:	f104 0518 	add.w	r5, r4, #24
 80029d6:	4628      	mov	r0, r5
 80029d8:	f000 fd4e 	bl	8003478 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029dc:	f240 03cc 	movw	r3, #204	; 0xcc
 80029e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	bb4b      	cbnz	r3, 8002a3c <xTaskRemoveFromEventList+0x74>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80029e8:	1d25      	adds	r5, r4, #4
 80029ea:	4628      	mov	r0, r5
 80029ec:	f000 fd44 	bl	8003478 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80029f0:	f240 123c 	movw	r2, #316	; 0x13c
 80029f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80029f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029fa:	6811      	ldr	r1, [r2, #0]
 80029fc:	f240 0068 	movw	r0, #104	; 0x68
 8002a00:	428b      	cmp	r3, r1
 8002a02:	bf88      	it	hi
 8002a04:	6013      	strhi	r3, [r2, #0]
 8002a06:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a0e:	4629      	mov	r1, r5
 8002a10:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002a14:	f000 fd06 	bl	8003424 <vListInsertEnd>
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a18:	f240 03d4 	movw	r3, #212	; 0xd4
 8002a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002a28:	bf81      	itttt	hi
 8002a2a:	f240 1340 	movwhi	r3, #320	; 0x140
 8002a2e:	f2c2 0300 	movthi	r3, #8192	; 0x2000
 8002a32:	2001      	movhi	r0, #1
 8002a34:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 8002a36:	bf98      	it	ls
 8002a38:	2000      	movls	r0, #0
	}

	return xReturn;
}
 8002a3a:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002a3c:	f240 00d8 	movw	r0, #216	; 0xd8
 8002a40:	4629      	mov	r1, r5
 8002a42:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a46:	f000 fced 	bl	8003424 <vListInsertEnd>
 8002a4a:	e7e5      	b.n	8002a18 <xTaskRemoveFromEventList+0x50>
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
	configASSERT( pxUnblockedTCB );
 8002a4c:	f000 ffb8 	bl	80039c0 <ulPortSetInterruptMask>
 8002a50:	e7fe      	b.n	8002a50 <xTaskRemoveFromEventList+0x88>
 8002a52:	bf00      	nop

08002a54 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002a54:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8002a56:	b160      	cbz	r0, 8002a72 <vTaskSetTimeOutState+0x1e>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002a58:	f240 02ec 	movw	r2, #236	; 0xec
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002a5c:	f240 03f0 	movw	r3, #240	; 0xf0
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002a60:	f2c2 0200 	movt	r2, #8192	; 0x2000
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002a64:	f2c2 0300 	movt	r3, #8192	; 0x2000
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002a68:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	e880 000c 	stmia.w	r0, {r2, r3}
 8002a70:	bd08      	pop	{r3, pc}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
 8002a72:	f000 ffa5 	bl	80039c0 <ulPortSetInterruptMask>
 8002a76:	e7fe      	b.n	8002a76 <vTaskSetTimeOutState+0x22>

08002a78 <xTaskCheckForTimeOut>:
	pxTimeOut->xTimeOnEntering = xTickCount;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002a7a:	4604      	mov	r4, r0
	pxTimeOut->xTimeOnEntering = xTickCount;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002a7c:	460d      	mov	r5, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002a7e:	2800      	cmp	r0, #0
 8002a80:	d031      	beq.n	8002ae6 <xTaskCheckForTimeOut+0x6e>
	configASSERT( pxTicksToWait );
 8002a82:	b369      	cbz	r1, 8002ae0 <xTaskCheckForTimeOut+0x68>

	taskENTER_CRITICAL();
 8002a84:	f000 ffb2 	bl	80039ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002a88:	f240 03f0 	movw	r3, #240	; 0xf0

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002a8c:	682e      	ldr	r6, [r5, #0]
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002a92:	1c72      	adds	r2, r6, #1
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002a94:	6818      	ldr	r0, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002a96:	d01e      	beq.n	8002ad6 <xTaskCheckForTimeOut+0x5e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002a98:	f240 02ec 	movw	r2, #236	; 0xec
 8002a9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002aa0:	6821      	ldr	r1, [r4, #0]
 8002aa2:	6817      	ldr	r7, [r2, #0]
 8002aa4:	42b9      	cmp	r1, r7
 8002aa6:	6861      	ldr	r1, [r4, #4]
 8002aa8:	d001      	beq.n	8002aae <xTaskCheckForTimeOut+0x36>
 8002aaa:	4288      	cmp	r0, r1
 8002aac:	d20e      	bcs.n	8002acc <xTaskCheckForTimeOut+0x54>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8002aae:	1a47      	subs	r7, r0, r1
 8002ab0:	42be      	cmp	r6, r7
 8002ab2:	d90b      	bls.n	8002acc <xTaskCheckForTimeOut+0x54>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8002ab4:	1a30      	subs	r0, r6, r0
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ab6:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002ab8:	681b      	ldr	r3, [r3, #0]
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8002aba:	4401      	add	r1, r0
 8002abc:	6029      	str	r1, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
 8002abe:	2500      	movs	r5, #0

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002ac0:	e884 000c 	stmia.w	r4, {r2, r3}
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8002ac4:	f000 ffa6 	bl	8003a14 <vPortExitCritical>

	return xReturn;
}
 8002ac8:	4628      	mov	r0, r5
 8002aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8002acc:	2501      	movs	r5, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8002ace:	f000 ffa1 	bl	8003a14 <vPortExitCritical>

	return xReturn;
}
 8002ad2:	4628      	mov	r0, r5
 8002ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
 8002ad6:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8002ad8:	f000 ff9c 	bl	8003a14 <vPortExitCritical>

	return xReturn;
}
 8002adc:	4628      	mov	r0, r5
 8002ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );
 8002ae0:	f000 ff6e 	bl	80039c0 <ulPortSetInterruptMask>
 8002ae4:	e7fe      	b.n	8002ae4 <xTaskCheckForTimeOut+0x6c>

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002ae6:	f000 ff6b 	bl	80039c0 <ulPortSetInterruptMask>
 8002aea:	e7fe      	b.n	8002aea <xTaskCheckForTimeOut+0x72>

08002aec <vTaskMissedYield>:
}
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8002aec:	f240 1340 	movw	r3, #320	; 0x140
 8002af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002af4:	2201      	movs	r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop

08002afc <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8002afc:	f240 03d4 	movw	r3, #212	; 0xd4
 8002b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b04:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
 8002b06:	4770      	bx	lr

08002b08 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002b08:	f240 034c 	movw	r3, #76	; 0x4c
 8002b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	b14b      	cbz	r3, 8002b28 <xTaskGetSchedulerState+0x20>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b14:	f240 03cc 	movw	r3, #204	; 0xcc
 8002b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b1c:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	bf0c      	ite	eq
 8002b22:	2002      	moveq	r0, #2
 8002b24:	2000      	movne	r0, #0
 8002b26:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002b28:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8002b2a:	4770      	bx	lr

08002b2c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002b2e:	4604      	mov	r4, r0
 8002b30:	b1f8      	cbz	r0, 8002b72 <vTaskPriorityInherit+0x46>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002b32:	f240 05d4 	movw	r5, #212	; 0xd4
 8002b36:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8002b3a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b3c:	682a      	ldr	r2, [r5, #0]
 8002b3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d216      	bcs.n	8002b72 <vTaskPriorityInherit+0x46>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002b44:	6982      	ldr	r2, [r0, #24]
 8002b46:	2a00      	cmp	r2, #0
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b48:	bfa4      	itt	ge
 8002b4a:	682a      	ldrge	r2, [r5, #0]
 8002b4c:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002b4e:	f240 0668 	movw	r6, #104	; 0x68
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b52:	bfa4      	itt	ge
 8002b54:	f1c2 0205 	rsbge	r2, r2, #5
 8002b58:	6182      	strge	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002b5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b5e:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8002b62:	6942      	ldr	r2, [r0, #20]
 8002b64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d003      	beq.n	8002b74 <vTaskPriorityInherit+0x48>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002b6c:	682b      	ldr	r3, [r5, #0]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002b74:	1d07      	adds	r7, r0, #4
 8002b76:	4638      	mov	r0, r7
 8002b78:	f000 fc7e 	bl	8003478 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 8002b7c:	f240 123c 	movw	r2, #316	; 0x13c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002b80:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8002b82:	f2c2 0200 	movt	r2, #8192	; 0x2000
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002b88:	6811      	ldr	r1, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002b8a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002b8c:	428b      	cmp	r3, r1
 8002b8e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002b92:	bf88      	it	hi
 8002b94:	6013      	strhi	r3, [r2, #0]
 8002b96:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8002b9a:	4639      	mov	r1, r7
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002b9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 8002ba0:	f000 bc40 	b.w	8003424 <vListInsertEnd>

08002ba4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002ba4:	b538      	push	{r3, r4, r5, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	b320      	cbz	r0, 8002bf4 <vTaskPriorityDisinherit+0x50>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002baa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002bac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d020      	beq.n	8002bf4 <vTaskPriorityDisinherit+0x50>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002bb2:	1d05      	adds	r5, r0, #4
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	f000 fc5f 	bl	8003478 <uxListRemove>
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002bba:	69a2      	ldr	r2, [r4, #24]
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002bbc:	6c63      	ldr	r3, [r4, #68]	; 0x44

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002bbe:	2a00      	cmp	r2, #0
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bc0:	bfa4      	itt	ge
 8002bc2:	f1c3 0205 	rsbge	r2, r3, #5
 8002bc6:	61a2      	strge	r2, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
 8002bc8:	f240 123c 	movw	r2, #316	; 0x13c
 8002bcc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002bd0:	f240 0068 	movw	r0, #104	; 0x68
 8002bd4:	6811      	ldr	r1, [r2, #0]
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002bd6:	62e3      	str	r3, [r4, #44]	; 0x2c
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
 8002bd8:	428b      	cmp	r3, r1
 8002bda:	bf88      	it	hi
 8002bdc:	6013      	strhi	r3, [r2, #0]
 8002bde:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002be2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002be6:	4629      	mov	r1, r5
 8002be8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
 8002bf0:	f000 bc18 	b.w	8003424 <vListInsertEnd>
 8002bf4:	bd38      	pop	{r3, r4, r5, pc}
 8002bf6:	bf00      	nop

08002bf8 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002bf8:	b430      	push	{r4, r5}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8002bfa:	6805      	ldr	r5, [r0, #0]
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002bfc:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8002bfe:	b165      	cbz	r5, 8002c1a <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002c00:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002c02:	68c4      	ldr	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c04:	6840      	ldr	r0, [r0, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002c06:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c08:	4284      	cmp	r4, r0

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002c0a:	60dc      	str	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002c0c:	bf28      	it	cs
 8002c0e:	60dd      	strcs	r5, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002c10:	4608      	mov	r0, r1
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c12:	bc30      	pop	{r4, r5}
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002c14:	68d9      	ldr	r1, [r3, #12]
 8002c16:	f7fd bb4f 	b.w	80002b8 <memcpy>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c1a:	bc30      	pop	{r4, r5}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop

08002c20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c20:	b538      	push	{r3, r4, r5, lr}
 8002c22:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002c24:	f000 fee2 	bl	80039ec <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002c28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	dd14      	ble.n	8002c58 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c30:	b193      	cbz	r3, 8002c58 <prvUnlockQueue+0x38>
 8002c32:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8002c36:	e007      	b.n	8002c48 <prvUnlockQueue+0x28>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8002c38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002c3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	dd09      	ble.n	8002c58 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c46:	b13b      	cbz	r3, 8002c58 <prvUnlockQueue+0x38>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c48:	4628      	mov	r0, r5
 8002c4a:	f7ff febd 	bl	80029c8 <xTaskRemoveFromEventList>
 8002c4e:	2800      	cmp	r0, #0
 8002c50:	d0f2      	beq.n	8002c38 <prvUnlockQueue+0x18>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8002c52:	f7ff ff4b 	bl	8002aec <vTaskMissedYield>
 8002c56:	e7ef      	b.n	8002c38 <prvUnlockQueue+0x18>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8002c58:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8002c5e:	f000 fed9 	bl	8003a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c62:	f000 fec3 	bl	80039ec <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002c66:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	dd14      	ble.n	8002c96 <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c6c:	6923      	ldr	r3, [r4, #16]
 8002c6e:	b193      	cbz	r3, 8002c96 <prvUnlockQueue+0x76>
 8002c70:	f104 0510 	add.w	r5, r4, #16
 8002c74:	e007      	b.n	8002c86 <prvUnlockQueue+0x66>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8002c76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002c7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	dd09      	ble.n	8002c96 <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c82:	6923      	ldr	r3, [r4, #16]
 8002c84:	b13b      	cbz	r3, 8002c96 <prvUnlockQueue+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c86:	4628      	mov	r0, r5
 8002c88:	f7ff fe9e 	bl	80029c8 <xTaskRemoveFromEventList>
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	d0f2      	beq.n	8002c76 <prvUnlockQueue+0x56>
				{
					vTaskMissedYield();
 8002c90:	f7ff ff2c 	bl	8002aec <vTaskMissedYield>
 8002c94:	e7ef      	b.n	8002c76 <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8002c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 8002ca0:	f000 beb8 	b.w	8003a14 <vPortExitCritical>

08002ca4 <xQueueGenericCreate>:
	return pdPASS;
}
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8002ca4:	b570      	push	{r4, r5, r6, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
 8002ca6:	4605      	mov	r5, r0
	return pdPASS;
}
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8002ca8:	460e      	mov	r6, r1
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
 8002caa:	b378      	cbz	r0, 8002d0c <xQueueGenericCreate+0x68>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8002cac:	204c      	movs	r0, #76	; 0x4c
 8002cae:	f000 fe09 	bl	80038c4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002cb2:	4604      	mov	r4, r0
 8002cb4:	b350      	cbz	r0, 8002d0c <xQueueGenericCreate+0x68>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cb6:	fb06 f005 	mul.w	r0, r6, r5

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
 8002cba:	3001      	adds	r0, #1
 8002cbc:	f000 fe02 	bl	80038c4 <pvPortMalloc>
 8002cc0:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
 8002cc2:	b300      	cbz	r0, 8002d06 <xQueueGenericCreate+0x62>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8002cc4:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8002cc6:	6426      	str	r6, [r4, #64]	; 0x40
{
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8002cc8:	f000 fe90 	bl	80039ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ccc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002cce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	fb02 f201 	mul.w	r2, r2, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002cd6:	1a51      	subs	r1, r2, r1

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002cd8:	1898      	adds	r0, r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002cda:	185d      	adds	r5, r3, r1
		pxQueue->xRxLock = queueUNLOCKED;
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ce4:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8002ce6:	6462      	str	r2, [r4, #68]	; 0x44

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ce8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
		pxQueue->xTxLock = queueUNLOCKED;
 8002cea:	64a2      	str	r2, [r4, #72]	; 0x48
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cec:	f104 0010 	add.w	r0, r4, #16
	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002cf0:	60e5      	str	r5, [r4, #12]
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cf2:	f000 fb87 	bl	8003404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cf6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002cfa:	f000 fb83 	bl	8003404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002cfe:	f000 fe89 	bl	8003a14 <vPortExitCritical>
	}

	configASSERT( xReturn );

	return xReturn;
}
 8002d02:	4620      	mov	r0, r4
 8002d04:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8002d06:	4620      	mov	r0, r4
 8002d08:	f000 fe0a 	bl	8003920 <vPortFree>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002d0c:	f000 fe58 	bl	80039c0 <ulPortSetInterruptMask>
 8002d10:	e7fe      	b.n	8002d10 <xQueueGenericCreate+0x6c>
 8002d12:	bf00      	nop

08002d14 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d18:	b085      	sub	sp, #20
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002d1a:	4604      	mov	r4, r0

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d1c:	4689      	mov	r9, r1
 8002d1e:	9201      	str	r2, [sp, #4]
 8002d20:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002d22:	2800      	cmp	r0, #0
 8002d24:	f000 80e5 	beq.w	8002ef2 <xQueueGenericSend+0x1de>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d28:	2900      	cmp	r1, #0
 8002d2a:	f000 8123 	beq.w	8002f74 <xQueueGenericSend+0x260>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d2e:	2f02      	cmp	r7, #2
 8002d30:	d057      	beq.n	8002de2 <xQueueGenericSend+0xce>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d32:	f7ff fee9 	bl	8002b08 <xTaskGetSchedulerState>
 8002d36:	b918      	cbnz	r0, 8002d40 <xQueueGenericSend+0x2c>
 8002d38:	9b01      	ldr	r3, [sp, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 8117 	bne.w	8002f6e <xQueueGenericSend+0x25a>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d40:	f000 fe54 	bl	80039ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d44:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002d46:	6be3      	ldr	r3, [r4, #60]	; 0x3c

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d48:	f04f 0b00 	mov.w	fp, #0
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d4c:	429a      	cmp	r2, r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8002d4e:	46da      	mov	sl, fp
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d50:	f104 0510 	add.w	r5, r4, #16
 8002d54:	f104 0624 	add.w	r6, r4, #36	; 0x24
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8002d58:	f04f 38ff 	mov.w	r8, #4294967295
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d5c:	d371      	bcc.n	8002e42 <xQueueGenericSend+0x12e>
 8002d5e:	2f02      	cmp	r7, #2
 8002d60:	f000 80da 	beq.w	8002f18 <xQueueGenericSend+0x204>
				function. */
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d64:	9801      	ldr	r0, [sp, #4]
 8002d66:	2800      	cmp	r0, #0
 8002d68:	f000 80cf 	beq.w	8002f0a <xQueueGenericSend+0x1f6>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d6c:	f1bb 0f00 	cmp.w	fp, #0
 8002d70:	f000 80bb 	beq.w	8002eea <xQueueGenericSend+0x1d6>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d74:	f000 fe4e 	bl	8003a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d78:	f7ff fb7e 	bl	8002478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d7c:	f000 fe36 	bl	80039ec <vPortEnterCritical>
 8002d80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d82:	3301      	adds	r3, #1
 8002d84:	bf08      	it	eq
 8002d86:	f8c4 a044 	streq.w	sl, [r4, #68]	; 0x44
 8002d8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	bf08      	it	eq
 8002d90:	f8c4 a048 	streq.w	sl, [r4, #72]	; 0x48
 8002d94:	f000 fe3e 	bl	8003a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d98:	a802      	add	r0, sp, #8
 8002d9a:	a901      	add	r1, sp, #4
 8002d9c:	f7ff fe6c 	bl	8002a78 <xTaskCheckForTimeOut>
 8002da0:	2800      	cmp	r0, #0
 8002da2:	f040 80a9 	bne.w	8002ef8 <xQueueGenericSend+0x1e4>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002da6:	f000 fe21 	bl	80039ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002daa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002dac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d05a      	beq.n	8002e68 <xQueueGenericSend+0x154>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002db2:	f000 fe2f 	bl	8003a14 <vPortExitCritical>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002db6:	f000 fe19 	bl	80039ec <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002dba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	dc06      	bgt.n	8002dce <xQueueGenericSend+0xba>
 8002dc0:	e015      	b.n	8002dee <xQueueGenericSend+0xda>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8002dc2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002dc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	dd0f      	ble.n	8002dee <xQueueGenericSend+0xda>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dd0:	b16b      	cbz	r3, 8002dee <xQueueGenericSend+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dd2:	4630      	mov	r0, r6
 8002dd4:	f7ff fdf8 	bl	80029c8 <xTaskRemoveFromEventList>
 8002dd8:	2800      	cmp	r0, #0
 8002dda:	d0f2      	beq.n	8002dc2 <xQueueGenericSend+0xae>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8002ddc:	f7ff fe86 	bl	8002aec <vTaskMissedYield>
 8002de0:	e7ef      	b.n	8002dc2 <xQueueGenericSend+0xae>
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002de2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d0a4      	beq.n	8002d32 <xQueueGenericSend+0x1e>
 8002de8:	f000 fdea 	bl	80039c0 <ulPortSetInterruptMask>
 8002dec:	e7fe      	b.n	8002dec <xQueueGenericSend+0xd8>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8002dee:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8002df2:	f000 fe0f 	bl	8003a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002df6:	f000 fdf9 	bl	80039ec <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002dfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	dd12      	ble.n	8002e26 <xQueueGenericSend+0x112>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e00:	6923      	ldr	r3, [r4, #16]
 8002e02:	b943      	cbnz	r3, 8002e16 <xQueueGenericSend+0x102>
 8002e04:	e00f      	b.n	8002e26 <xQueueGenericSend+0x112>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8002e06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002e0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	dd09      	ble.n	8002e26 <xQueueGenericSend+0x112>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e12:	6922      	ldr	r2, [r4, #16]
 8002e14:	b13a      	cbz	r2, 8002e26 <xQueueGenericSend+0x112>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e16:	4628      	mov	r0, r5
 8002e18:	f7ff fdd6 	bl	80029c8 <xTaskRemoveFromEventList>
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	d0f2      	beq.n	8002e06 <xQueueGenericSend+0xf2>
				{
					vTaskMissedYield();
 8002e20:	f7ff fe64 	bl	8002aec <vTaskMissedYield>
 8002e24:	e7ef      	b.n	8002e06 <xQueueGenericSend+0xf2>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8002e26:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e2a:	f000 fdf3 	bl	8003a14 <vPortExitCritical>
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
				( void ) xTaskResumeAll();
 8002e2e:	f7ff fbf5 	bl	800261c <xTaskResumeAll>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e32:	f000 fddb 	bl	80039ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002e38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	f04f 0b01 	mov.w	fp, #1
 8002e40:	d28d      	bcs.n	8002d5e <xQueueGenericSend+0x4a>
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e42:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002e44:	2a00      	cmp	r2, #0
 8002e46:	d069      	beq.n	8002f1c <xQueueGenericSend+0x208>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e48:	2f00      	cmp	r7, #0
 8002e4a:	d178      	bne.n	8002f3e <xQueueGenericSend+0x22a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	68a0      	ldr	r0, [r4, #8]
 8002e50:	f7fd fa32 	bl	80002b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e54:	68a1      	ldr	r1, [r4, #8]
 8002e56:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e58:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e5a:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e5c:	4293      	cmp	r3, r2
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e5e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e60:	d362      	bcc.n	8002f28 <xQueueGenericSend+0x214>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	60a3      	str	r3, [r4, #8]
 8002e66:	e05f      	b.n	8002f28 <xQueueGenericSend+0x214>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002e68:	f000 fdd4 	bl	8003a14 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	9901      	ldr	r1, [sp, #4]
 8002e70:	f7ff fd28 	bl	80028c4 <vTaskPlaceOnEventList>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e74:	f000 fdba 	bl	80039ec <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002e78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	dc06      	bgt.n	8002e8c <xQueueGenericSend+0x178>
 8002e7e:	e00f      	b.n	8002ea0 <xQueueGenericSend+0x18c>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8002e80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e82:	3b01      	subs	r3, #1
 8002e84:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002e86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	dd09      	ble.n	8002ea0 <xQueueGenericSend+0x18c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e8e:	b13b      	cbz	r3, 8002ea0 <xQueueGenericSend+0x18c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e90:	4630      	mov	r0, r6
 8002e92:	f7ff fd99 	bl	80029c8 <xTaskRemoveFromEventList>
 8002e96:	2800      	cmp	r0, #0
 8002e98:	d0f2      	beq.n	8002e80 <xQueueGenericSend+0x16c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8002e9a:	f7ff fe27 	bl	8002aec <vTaskMissedYield>
 8002e9e:	e7ef      	b.n	8002e80 <xQueueGenericSend+0x16c>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8002ea0:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8002ea4:	f000 fdb6 	bl	8003a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002ea8:	f000 fda0 	bl	80039ec <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002eac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	dc06      	bgt.n	8002ec0 <xQueueGenericSend+0x1ac>
 8002eb2:	e00f      	b.n	8002ed4 <xQueueGenericSend+0x1c0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8002eb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002eba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	dd09      	ble.n	8002ed4 <xQueueGenericSend+0x1c0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ec0:	6923      	ldr	r3, [r4, #16]
 8002ec2:	b13b      	cbz	r3, 8002ed4 <xQueueGenericSend+0x1c0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f7ff fd7f 	bl	80029c8 <xTaskRemoveFromEventList>
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d0f2      	beq.n	8002eb4 <xQueueGenericSend+0x1a0>
				{
					vTaskMissedYield();
 8002ece:	f7ff fe0d 	bl	8002aec <vTaskMissedYield>
 8002ed2:	e7ef      	b.n	8002eb4 <xQueueGenericSend+0x1a0>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8002ed4:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ed8:	f000 fd9c 	bl	8003a14 <vPortExitCritical>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002edc:	f7ff fb9e 	bl	800261c <xTaskResumeAll>
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	d1a6      	bne.n	8002e32 <xQueueGenericSend+0x11e>
				{
					portYIELD_WITHIN_API();
 8002ee4:	f000 fd60 	bl	80039a8 <vPortYield>
 8002ee8:	e7a3      	b.n	8002e32 <xQueueGenericSend+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002eea:	a802      	add	r0, sp, #8
 8002eec:	f7ff fdb2 	bl	8002a54 <vTaskSetTimeOutState>
 8002ef0:	e740      	b.n	8002d74 <xQueueGenericSend+0x60>
{
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002ef2:	f000 fd65 	bl	80039c0 <ulPortSetInterruptMask>
 8002ef6:	e7fe      	b.n	8002ef6 <xQueueGenericSend+0x1e2>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ef8:	4620      	mov	r0, r4
 8002efa:	f7ff fe91 	bl	8002c20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002efe:	f7ff fb8d 	bl	800261c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f02:	2000      	movs	r0, #0
		}
	}
}
 8002f04:	b005      	add	sp, #20
 8002f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			{
				if( xTicksToWait == ( TickType_t ) 0 )
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f0a:	9000      	str	r0, [sp, #0]
 8002f0c:	f000 fd82 	bl	8003a14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f10:	9800      	ldr	r0, [sp, #0]
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
 8002f12:	b005      	add	sp, #20
 8002f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f18:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f1a:	b982      	cbnz	r2, 8002f3e <xQueueGenericSend+0x22a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f1c:	6825      	ldr	r5, [r4, #0]
 8002f1e:	b91d      	cbnz	r5, 8002f28 <xQueueGenericSend+0x214>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002f20:	6860      	ldr	r0, [r4, #4]
 8002f22:	f7ff fe3f 	bl	8002ba4 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002f26:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8002f28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8002f2c:	3201      	adds	r2, #1
 8002f2e:	63a2      	str	r2, [r4, #56]	; 0x38
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f30:	bb3b      	cbnz	r3, 8002f82 <xQueueGenericSend+0x26e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f32:	f000 fd6f 	bl	8003a14 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8002f36:	2001      	movs	r0, #1
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
 8002f38:	b005      	add	sp, #20
 8002f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f3e:	4649      	mov	r1, r9
 8002f40:	68e0      	ldr	r0, [r4, #12]
 8002f42:	f7fd f9b9 	bl	80002b8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f48:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f4a:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002f4c:	425b      	negs	r3, r3
 8002f4e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f50:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002f52:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002f54:	bf3e      	ittt	cc
 8002f56:	6862      	ldrcc	r2, [r4, #4]
 8002f58:	189b      	addcc	r3, r3, r2
 8002f5a:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f5c:	2f02      	cmp	r7, #2
 8002f5e:	d1e3      	bne.n	8002f28 <xQueueGenericSend+0x214>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0e0      	beq.n	8002f28 <xQueueGenericSend+0x214>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8002f66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	63a3      	str	r3, [r4, #56]	; 0x38
 8002f6c:	e7dc      	b.n	8002f28 <xQueueGenericSend+0x214>
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f6e:	f000 fd27 	bl	80039c0 <ulPortSetInterruptMask>
 8002f72:	e7fe      	b.n	8002f72 <xQueueGenericSend+0x25e>
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f74:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f43f aed9 	beq.w	8002d2e <xQueueGenericSend+0x1a>
 8002f7c:	f000 fd20 	bl	80039c0 <ulPortSetInterruptMask>
 8002f80:	e7fe      	b.n	8002f80 <xQueueGenericSend+0x26c>
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8002f82:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002f86:	f7ff fd1f 	bl	80029c8 <xTaskRemoveFromEventList>
 8002f8a:	2801      	cmp	r0, #1
 8002f8c:	d1d1      	bne.n	8002f32 <xQueueGenericSend+0x21e>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f8e:	f000 fd0b 	bl	80039a8 <vPortYield>
 8002f92:	e7ce      	b.n	8002f32 <xQueueGenericSend+0x21e>

08002f94 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002f98:	4604      	mov	r4, r0

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f9a:	460e      	mov	r6, r1
 8002f9c:	4690      	mov	r8, r2
 8002f9e:	461d      	mov	r5, r3
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	d02f      	beq.n	8003004 <xQueueGenericSendFromISR+0x70>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fa4:	2900      	cmp	r1, #0
 8002fa6:	d06f      	beq.n	8003088 <xQueueGenericSendFromISR+0xf4>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fa8:	2d02      	cmp	r5, #2
 8002faa:	d010      	beq.n	8002fce <xQueueGenericSendFromISR+0x3a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fac:	f000 fdf0 	bl	8003b90 <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fb0:	f000 fd06 	bl	80039c0 <ulPortSetInterruptMask>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fb4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002fb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fb8:	4293      	cmp	r3, r2
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fba:	4607      	mov	r7, r0
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002fbc:	bf98      	it	ls
 8002fbe:	2400      	movls	r4, #0
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fc0:	d80b      	bhi.n	8002fda <xQueueGenericSendFromISR+0x46>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002fc2:	4638      	mov	r0, r7
 8002fc4:	f000 fd22 	bl	8003a0c <vPortClearInterruptMask>

	return xReturn;
}
 8002fc8:	4620      	mov	r0, r4
 8002fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d033      	beq.n	800303c <xQueueGenericSendFromISR+0xa8>
 8002fd4:	f000 fcf4 	bl	80039c0 <ulPortSetInterruptMask>
 8002fd8:	e7fe      	b.n	8002fd8 <xQueueGenericSendFromISR+0x44>
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fda:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002fdc:	b9aa      	cbnz	r2, 800300a <xQueueGenericSendFromISR+0x76>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fde:	6825      	ldr	r5, [r4, #0]
 8002fe0:	2d00      	cmp	r5, #0
 8002fe2:	d04c      	beq.n	800307e <xQueueGenericSendFromISR+0xea>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8002fe4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	63a3      	str	r3, [r4, #56]	; 0x38

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8002fea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002fec:	3301      	adds	r3, #1
 8002fee:	d01b      	beq.n	8003028 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8002ff0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	64a3      	str	r3, [r4, #72]	; 0x48
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002ff6:	4638      	mov	r0, r7
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
 8002ff8:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002ffa:	f000 fd07 	bl	8003a0c <vPortClearInterruptMask>

	return xReturn;
}
 8002ffe:	4620      	mov	r0, r4
 8003000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8003004:	f000 fcdc 	bl	80039c0 <ulPortSetInterruptMask>
 8003008:	e7fe      	b.n	8003008 <xQueueGenericSendFromISR+0x74>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800300a:	bb05      	cbnz	r5, 800304e <xQueueGenericSendFromISR+0xba>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800300c:	4631      	mov	r1, r6
 800300e:	68a0      	ldr	r0, [r4, #8]
 8003010:	f7fd f952 	bl	80002b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003014:	68a1      	ldr	r1, [r4, #8]
 8003016:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003018:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800301a:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800301c:	4293      	cmp	r3, r2
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800301e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003020:	d3e0      	bcc.n	8002fe4 <xQueueGenericSendFromISR+0x50>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	60a3      	str	r3, [r4, #8]
 8003026:	e7dd      	b.n	8002fe4 <xQueueGenericSendFromISR+0x50>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800302a:	2b00      	cmp	r3, #0
 800302c:	d132      	bne.n	8003094 <xQueueGenericSendFromISR+0x100>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800302e:	4638      	mov	r0, r7
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
 8003030:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003032:	f000 fceb 	bl	8003a0c <vPortClearInterruptMask>

	return xReturn;
}
 8003036:	4620      	mov	r0, r4
 8003038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800303c:	f000 fda8 	bl	8003b90 <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003040:	f000 fcbe 	bl	80039c0 <ulPortSetInterruptMask>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003044:	6ba2      	ldr	r2, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003046:	6c22      	ldr	r2, [r4, #64]	; 0x40
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003048:	4607      	mov	r7, r0
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800304a:	2a00      	cmp	r2, #0
 800304c:	d0c7      	beq.n	8002fde <xQueueGenericSendFromISR+0x4a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800304e:	4631      	mov	r1, r6
 8003050:	68e0      	ldr	r0, [r4, #12]
 8003052:	f7fd f931 	bl	80002b8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003056:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003058:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800305a:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800305c:	425b      	negs	r3, r3
 800305e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003060:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003062:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003064:	bf3e      	ittt	cc
 8003066:	6862      	ldrcc	r2, [r4, #4]
 8003068:	189b      	addcc	r3, r3, r2
 800306a:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800306c:	2d02      	cmp	r5, #2
 800306e:	d1b9      	bne.n	8002fe4 <xQueueGenericSendFromISR+0x50>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003070:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0b6      	beq.n	8002fe4 <xQueueGenericSendFromISR+0x50>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8003076:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003078:	3b01      	subs	r3, #1
 800307a:	63a3      	str	r3, [r4, #56]	; 0x38
 800307c:	e7b2      	b.n	8002fe4 <xQueueGenericSendFromISR+0x50>
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800307e:	6860      	ldr	r0, [r4, #4]
 8003080:	f7ff fd90 	bl	8002ba4 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003084:	6065      	str	r5, [r4, #4]
 8003086:	e7ad      	b.n	8002fe4 <xQueueGenericSendFromISR+0x50>
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003088:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d08c      	beq.n	8002fa8 <xQueueGenericSendFromISR+0x14>
 800308e:	f000 fc97 	bl	80039c0 <ulPortSetInterruptMask>
 8003092:	e7fe      	b.n	8003092 <xQueueGenericSendFromISR+0xfe>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003094:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003098:	f7ff fc96 	bl	80029c8 <xTaskRemoveFromEventList>
 800309c:	2800      	cmp	r0, #0
 800309e:	d0c6      	beq.n	800302e <xQueueGenericSendFromISR+0x9a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030a0:	2401      	movs	r4, #1
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030a2:	f1b8 0f00 	cmp.w	r8, #0
 80030a6:	d08c      	beq.n	8002fc2 <xQueueGenericSendFromISR+0x2e>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80030a8:	4638      	mov	r0, r7
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030aa:	f8c8 4000 	str.w	r4, [r8]
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80030ae:	f000 fcad 	bl	8003a0c <vPortClearInterruptMask>

	return xReturn;
}
 80030b2:	4620      	mov	r0, r4
 80030b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080030b8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80030b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030bc:	b085      	sub	sp, #20
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80030be:	4604      	mov	r4, r0
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80030c0:	4688      	mov	r8, r1
 80030c2:	9201      	str	r2, [sp, #4]
 80030c4:	469a      	mov	sl, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80030c6:	2800      	cmp	r0, #0
 80030c8:	f000 80dc 	beq.w	8003284 <xQueueGenericReceive+0x1cc>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030cc:	2900      	cmp	r1, #0
 80030ce:	f000 810b 	beq.w	80032e8 <xQueueGenericReceive+0x230>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030d2:	f7ff fd19 	bl	8002b08 <xTaskGetSchedulerState>
 80030d6:	b918      	cbnz	r0, 80030e0 <xQueueGenericReceive+0x28>
 80030d8:	9b01      	ldr	r3, [sp, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f040 8101 	bne.w	80032e2 <xQueueGenericReceive+0x22a>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80030e0:	f000 fc84 	bl	80039ec <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80030e6:	f04f 0b00 	mov.w	fp, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 80030ea:	46d9      	mov	r9, fp
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030ec:	f104 0524 	add.w	r5, r4, #36	; 0x24
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80030f0:	f04f 37ff 	mov.w	r7, #4294967295
 80030f4:	f104 0610 	add.w	r6, r4, #16
	{
		taskENTER_CRITICAL();
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d16f      	bne.n	80031dc <xQueueGenericReceive+0x124>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030fc:	9801      	ldr	r0, [sp, #4]
 80030fe:	2800      	cmp	r0, #0
 8003100:	f000 80d4 	beq.w	80032ac <xQueueGenericReceive+0x1f4>
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
 8003104:	f1bb 0f00 	cmp.w	fp, #0
 8003108:	f000 80b8 	beq.w	800327c <xQueueGenericReceive+0x1c4>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800310c:	f000 fc82 	bl	8003a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003110:	f7ff f9b2 	bl	8002478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003114:	f000 fc6a 	bl	80039ec <vPortEnterCritical>
 8003118:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800311a:	3301      	adds	r3, #1
 800311c:	bf08      	it	eq
 800311e:	f8c4 9044 	streq.w	r9, [r4, #68]	; 0x44
 8003122:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003124:	3301      	adds	r3, #1
 8003126:	bf08      	it	eq
 8003128:	f8c4 9048 	streq.w	r9, [r4, #72]	; 0x48
 800312c:	f000 fc72 	bl	8003a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003130:	a802      	add	r0, sp, #8
 8003132:	a901      	add	r1, sp, #4
 8003134:	f7ff fca0 	bl	8002a78 <xTaskCheckForTimeOut>
 8003138:	2800      	cmp	r0, #0
 800313a:	f040 80ae 	bne.w	800329a <xQueueGenericReceive+0x1e2>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800313e:	f000 fc55 	bl	80039ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003142:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003144:	2b00      	cmp	r3, #0
 8003146:	d162      	bne.n	800320e <xQueueGenericReceive+0x156>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003148:	f000 fc64 	bl	8003a14 <vPortExitCritical>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 809b 	beq.w	800328a <xQueueGenericReceive+0x1d2>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003154:	4628      	mov	r0, r5
 8003156:	9901      	ldr	r1, [sp, #4]
 8003158:	f7ff fbb4 	bl	80028c4 <vTaskPlaceOnEventList>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800315c:	f000 fc46 	bl	80039ec <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8003160:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003162:	2b00      	cmp	r3, #0
 8003164:	dc06      	bgt.n	8003174 <xQueueGenericReceive+0xbc>
 8003166:	e00f      	b.n	8003188 <xQueueGenericReceive+0xd0>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8003168:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800316a:	3b01      	subs	r3, #1
 800316c:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800316e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003170:	2b00      	cmp	r3, #0
 8003172:	dd09      	ble.n	8003188 <xQueueGenericReceive+0xd0>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003174:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003176:	b13b      	cbz	r3, 8003188 <xQueueGenericReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003178:	4628      	mov	r0, r5
 800317a:	f7ff fc25 	bl	80029c8 <xTaskRemoveFromEventList>
 800317e:	2800      	cmp	r0, #0
 8003180:	d0f2      	beq.n	8003168 <xQueueGenericReceive+0xb0>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8003182:	f7ff fcb3 	bl	8002aec <vTaskMissedYield>
 8003186:	e7ef      	b.n	8003168 <xQueueGenericReceive+0xb0>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8003188:	64a7      	str	r7, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800318a:	f000 fc43 	bl	8003a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800318e:	f000 fc2d 	bl	80039ec <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8003192:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003194:	2b00      	cmp	r3, #0
 8003196:	dd12      	ble.n	80031be <xQueueGenericReceive+0x106>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003198:	6923      	ldr	r3, [r4, #16]
 800319a:	b943      	cbnz	r3, 80031ae <xQueueGenericReceive+0xf6>
 800319c:	e00f      	b.n	80031be <xQueueGenericReceive+0x106>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800319e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031a0:	3b01      	subs	r3, #1
 80031a2:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80031a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	dd09      	ble.n	80031be <xQueueGenericReceive+0x106>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031aa:	6922      	ldr	r2, [r4, #16]
 80031ac:	b13a      	cbz	r2, 80031be <xQueueGenericReceive+0x106>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031ae:	4630      	mov	r0, r6
 80031b0:	f7ff fc0a 	bl	80029c8 <xTaskRemoveFromEventList>
 80031b4:	2800      	cmp	r0, #0
 80031b6:	d0f2      	beq.n	800319e <xQueueGenericReceive+0xe6>
				{
					vTaskMissedYield();
 80031b8:	f7ff fc98 	bl	8002aec <vTaskMissedYield>
 80031bc:	e7ef      	b.n	800319e <xQueueGenericReceive+0xe6>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80031be:	6467      	str	r7, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80031c0:	f000 fc28 	bl	8003a14 <vPortExitCritical>
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
 80031c4:	f7ff fa2a 	bl	800261c <xTaskResumeAll>
 80031c8:	b908      	cbnz	r0, 80031ce <xQueueGenericReceive+0x116>
				{
					portYIELD_WITHIN_API();
 80031ca:	f000 fbed 	bl	80039a8 <vPortYield>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80031ce:	f000 fc0d 	bl	80039ec <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031d4:	f04f 0b01 	mov.w	fp, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d08f      	beq.n	80030fc <xQueueGenericReceive+0x44>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031dc:	4641      	mov	r1, r8
 80031de:	4620      	mov	r0, r4
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80031e0:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031e2:	f7ff fd09 	bl	8002bf8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80031e6:	f1ba 0f00 	cmp.w	sl, #0
 80031ea:	d166      	bne.n	80032ba <xQueueGenericReceive+0x202>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 80031ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031ee:	6823      	ldr	r3, [r4, #0]
				if( xJustPeeking == pdFALSE )
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 80031f0:	3a01      	subs	r2, #1
 80031f2:	63a2      	str	r2, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031f4:	b913      	cbnz	r3, 80031fc <xQueueGenericReceive+0x144>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80031f6:	f7ff fc81 	bl	8002afc <xTaskGetCurrentTaskHandle>
 80031fa:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031fc:	6923      	ldr	r3, [r4, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d168      	bne.n	80032d4 <xQueueGenericReceive+0x21c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8003202:	f000 fc07 	bl	8003a14 <vPortExitCritical>
				return pdPASS;
 8003206:	2001      	movs	r0, #1
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
 8003208:	b005      	add	sp, #20
 800320a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800320e:	f000 fc01 	bl	8003a14 <vPortExitCritical>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003212:	f000 fbeb 	bl	80039ec <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8003216:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003218:	2b00      	cmp	r3, #0
 800321a:	dc06      	bgt.n	800322a <xQueueGenericReceive+0x172>
 800321c:	e00f      	b.n	800323e <xQueueGenericReceive+0x186>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800321e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003220:	3b01      	subs	r3, #1
 8003222:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8003224:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003226:	2b00      	cmp	r3, #0
 8003228:	dd09      	ble.n	800323e <xQueueGenericReceive+0x186>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800322a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800322c:	b13b      	cbz	r3, 800323e <xQueueGenericReceive+0x186>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800322e:	4628      	mov	r0, r5
 8003230:	f7ff fbca 	bl	80029c8 <xTaskRemoveFromEventList>
 8003234:	2800      	cmp	r0, #0
 8003236:	d0f2      	beq.n	800321e <xQueueGenericReceive+0x166>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8003238:	f7ff fc58 	bl	8002aec <vTaskMissedYield>
 800323c:	e7ef      	b.n	800321e <xQueueGenericReceive+0x166>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800323e:	64a7      	str	r7, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8003240:	f000 fbe8 	bl	8003a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003244:	f000 fbd2 	bl	80039ec <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8003248:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800324a:	2b00      	cmp	r3, #0
 800324c:	dc06      	bgt.n	800325c <xQueueGenericReceive+0x1a4>
 800324e:	e00f      	b.n	8003270 <xQueueGenericReceive+0x1b8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8003250:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003252:	3b01      	subs	r3, #1
 8003254:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8003256:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003258:	2b00      	cmp	r3, #0
 800325a:	dd09      	ble.n	8003270 <xQueueGenericReceive+0x1b8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800325c:	6923      	ldr	r3, [r4, #16]
 800325e:	b13b      	cbz	r3, 8003270 <xQueueGenericReceive+0x1b8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003260:	4630      	mov	r0, r6
 8003262:	f7ff fbb1 	bl	80029c8 <xTaskRemoveFromEventList>
 8003266:	2800      	cmp	r0, #0
 8003268:	d0f2      	beq.n	8003250 <xQueueGenericReceive+0x198>
				{
					vTaskMissedYield();
 800326a:	f7ff fc3f 	bl	8002aec <vTaskMissedYield>
 800326e:	e7ef      	b.n	8003250 <xQueueGenericReceive+0x198>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8003270:	6467      	str	r7, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003272:	f000 fbcf 	bl	8003a14 <vPortExitCritical>
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
				( void ) xTaskResumeAll();
 8003276:	f7ff f9d1 	bl	800261c <xTaskResumeAll>
 800327a:	e7a8      	b.n	80031ce <xQueueGenericReceive+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800327c:	a802      	add	r0, sp, #8
 800327e:	f7ff fbe9 	bl	8002a54 <vTaskSetTimeOutState>
 8003282:	e743      	b.n	800310c <xQueueGenericReceive+0x54>
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8003284:	f000 fb9c 	bl	80039c0 <ulPortSetInterruptMask>
 8003288:	e7fe      	b.n	8003288 <xQueueGenericReceive+0x1d0>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
					{
						taskENTER_CRITICAL();
 800328a:	f000 fbaf 	bl	80039ec <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800328e:	6860      	ldr	r0, [r4, #4]
 8003290:	f7ff fc4c 	bl	8002b2c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8003294:	f000 fbbe 	bl	8003a14 <vPortExitCritical>
 8003298:	e75c      	b.n	8003154 <xQueueGenericReceive+0x9c>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800329a:	4620      	mov	r0, r4
 800329c:	f7ff fcc0 	bl	8002c20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032a0:	f7ff f9bc 	bl	800261c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 80032a4:	2000      	movs	r0, #0
		}
	}
}
 80032a6:	b005      	add	sp, #20
 80032a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			{
				if( xTicksToWait == ( TickType_t ) 0 )
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032ac:	9000      	str	r0, [sp, #0]
 80032ae:	f000 fbb1 	bl	8003a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032b2:	9800      	ldr	r0, [sp, #0]
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
 80032b4:	b005      	add	sp, #20
 80032b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80032bc:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d09f      	beq.n	8003202 <xQueueGenericReceive+0x14a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80032c6:	f7ff fb7f 	bl	80029c8 <xTaskRemoveFromEventList>
 80032ca:	2800      	cmp	r0, #0
 80032cc:	d099      	beq.n	8003202 <xQueueGenericReceive+0x14a>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
						{
							queueYIELD_IF_USING_PREEMPTION();
 80032ce:	f000 fb6b 	bl	80039a8 <vPortYield>
 80032d2:	e796      	b.n	8003202 <xQueueGenericReceive+0x14a>
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80032d4:	f104 0010 	add.w	r0, r4, #16
 80032d8:	f7ff fb76 	bl	80029c8 <xTaskRemoveFromEventList>
 80032dc:	2801      	cmp	r0, #1
 80032de:	d190      	bne.n	8003202 <xQueueGenericReceive+0x14a>
 80032e0:	e7f5      	b.n	80032ce <xQueueGenericReceive+0x216>

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032e2:	f000 fb6d 	bl	80039c0 <ulPortSetInterruptMask>
 80032e6:	e7fe      	b.n	80032e6 <xQueueGenericReceive+0x22e>
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f43f aef1 	beq.w	80030d2 <xQueueGenericReceive+0x1a>
 80032f0:	f000 fb66 	bl	80039c0 <ulPortSetInterruptMask>
 80032f4:	e7fe      	b.n	80032f4 <xQueueGenericReceive+0x23c>
 80032f6:	bf00      	nop

080032f8 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80032f8:	f242 6364 	movw	r3, #9828	; 0x2664
 80032fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003300:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	b18a      	cbz	r2, 800332a <vQueueAddToRegistry+0x32>
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	b1ba      	cbz	r2, 800333a <vQueueAddToRegistry+0x42>
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	b1ba      	cbz	r2, 800333e <vQueueAddToRegistry+0x46>
 800330e:	699a      	ldr	r2, [r3, #24]
 8003310:	b1ba      	cbz	r2, 8003342 <vQueueAddToRegistry+0x4a>
 8003312:	6a1a      	ldr	r2, [r3, #32]
 8003314:	b1ba      	cbz	r2, 8003346 <vQueueAddToRegistry+0x4e>
 8003316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003318:	b1ba      	cbz	r2, 800334a <vQueueAddToRegistry+0x52>
 800331a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331c:	b122      	cbz	r2, 8003328 <vQueueAddToRegistry+0x30>
 800331e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003320:	b1aa      	cbz	r2, 800334e <vQueueAddToRegistry+0x56>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003326:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003328:	2206      	movs	r2, #6
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 800332a:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800332e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003332:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003334:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003338:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800333a:	2201      	movs	r2, #1
 800333c:	e7f5      	b.n	800332a <vQueueAddToRegistry+0x32>
 800333e:	2202      	movs	r2, #2
 8003340:	e7f3      	b.n	800332a <vQueueAddToRegistry+0x32>
 8003342:	2203      	movs	r2, #3
 8003344:	e7f1      	b.n	800332a <vQueueAddToRegistry+0x32>
 8003346:	2204      	movs	r2, #4
 8003348:	e7ef      	b.n	800332a <vQueueAddToRegistry+0x32>
 800334a:	2205      	movs	r2, #5
 800334c:	e7ed      	b.n	800332a <vQueueAddToRegistry+0x32>
 800334e:	2207      	movs	r2, #7
 8003350:	e7eb      	b.n	800332a <vQueueAddToRegistry+0x32>
 8003352:	bf00      	nop

08003354 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 8003354:	b538      	push	{r3, r4, r5, lr}
 8003356:	4604      	mov	r4, r0
 8003358:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800335a:	f000 fb47 	bl	80039ec <vPortEnterCritical>
 800335e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003360:	3301      	adds	r3, #1
 8003362:	bf04      	itt	eq
 8003364:	2300      	moveq	r3, #0
 8003366:	6463      	streq	r3, [r4, #68]	; 0x44
 8003368:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800336a:	3301      	adds	r3, #1
 800336c:	bf04      	itt	eq
 800336e:	2300      	moveq	r3, #0
 8003370:	64a3      	streq	r3, [r4, #72]	; 0x48
 8003372:	f000 fb4f 	bl	8003a14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003376:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003378:	b923      	cbnz	r3, 8003384 <vQueueWaitForMessageRestricted+0x30>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800337a:	4629      	mov	r1, r5
 800337c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003380:	f7ff fae8 	bl	8002954 <vTaskPlaceOnEventListRestricted>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003384:	f000 fb32 	bl	80039ec <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8003388:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800338a:	2b00      	cmp	r3, #0
 800338c:	dd14      	ble.n	80033b8 <vQueueWaitForMessageRestricted+0x64>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800338e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003390:	b193      	cbz	r3, 80033b8 <vQueueWaitForMessageRestricted+0x64>
 8003392:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8003396:	e007      	b.n	80033a8 <vQueueWaitForMessageRestricted+0x54>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8003398:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800339a:	3b01      	subs	r3, #1
 800339c:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800339e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	dd09      	ble.n	80033b8 <vQueueWaitForMessageRestricted+0x64>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033a6:	b13b      	cbz	r3, 80033b8 <vQueueWaitForMessageRestricted+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033a8:	4628      	mov	r0, r5
 80033aa:	f7ff fb0d 	bl	80029c8 <xTaskRemoveFromEventList>
 80033ae:	2800      	cmp	r0, #0
 80033b0:	d0f2      	beq.n	8003398 <vQueueWaitForMessageRestricted+0x44>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80033b2:	f7ff fb9b 	bl	8002aec <vTaskMissedYield>
 80033b6:	e7ef      	b.n	8003398 <vQueueWaitForMessageRestricted+0x44>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80033b8:	f04f 33ff 	mov.w	r3, #4294967295
 80033bc:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80033be:	f000 fb29 	bl	8003a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033c2:	f000 fb13 	bl	80039ec <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80033c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	dd14      	ble.n	80033f6 <vQueueWaitForMessageRestricted+0xa2>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033cc:	6923      	ldr	r3, [r4, #16]
 80033ce:	b193      	cbz	r3, 80033f6 <vQueueWaitForMessageRestricted+0xa2>
 80033d0:	f104 0510 	add.w	r5, r4, #16
 80033d4:	e007      	b.n	80033e6 <vQueueWaitForMessageRestricted+0x92>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 80033d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033d8:	3b01      	subs	r3, #1
 80033da:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80033dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033de:	2b00      	cmp	r3, #0
 80033e0:	dd09      	ble.n	80033f6 <vQueueWaitForMessageRestricted+0xa2>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033e2:	6923      	ldr	r3, [r4, #16]
 80033e4:	b13b      	cbz	r3, 80033f6 <vQueueWaitForMessageRestricted+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033e6:	4628      	mov	r0, r5
 80033e8:	f7ff faee 	bl	80029c8 <xTaskRemoveFromEventList>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	d0f2      	beq.n	80033d6 <vQueueWaitForMessageRestricted+0x82>
				{
					vTaskMissedYield();
 80033f0:	f7ff fb7c 	bl	8002aec <vTaskMissedYield>
 80033f4:	e7ef      	b.n	80033d6 <vQueueWaitForMessageRestricted+0x82>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80033f6:	f04f 33ff 	mov.w	r3, #4294967295
 80033fa:	6463      	str	r3, [r4, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 80033fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 8003400:	f000 bb08 	b.w	8003a14 <vPortExitCritical>

08003404 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003404:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003408:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800340c:	2200      	movs	r2, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800340e:	6081      	str	r1, [r0, #8]
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003410:	e880 000c 	stmia.w	r0, {r2, r3}
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003414:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003416:	6103      	str	r3, [r0, #16]
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop

0800341c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800341c:	2300      	movs	r3, #0
 800341e:	6103      	str	r3, [r0, #16]
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop

08003424 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003424:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003426:	689a      	ldr	r2, [r3, #8]
	pxItem->pvContainer = NULL;
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003428:	b410      	push	{r4}
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800342a:	6804      	ldr	r4, [r0, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800342c:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800342e:	689a      	ldr	r2, [r3, #8]
ListItem_t * const pxIndex = pxList->pxIndex;

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003430:	604b      	str	r3, [r1, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003432:	3401      	adds	r4, #1
	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003434:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003436:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003438:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800343a:	6004      	str	r4, [r0, #0]
}
 800343c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop

08003444 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003444:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003446:	680d      	ldr	r5, [r1, #0]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003448:	1c6b      	adds	r3, r5, #1
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800344a:	bf18      	it	ne
 800344c:	f100 0208 	addne.w	r2, r0, #8
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003450:	d101      	bne.n	8003456 <vListInsert+0x12>
 8003452:	e00e      	b.n	8003472 <vListInsert+0x2e>
 8003454:	461a      	mov	r2, r3
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003456:	6853      	ldr	r3, [r2, #4]
 8003458:	681c      	ldr	r4, [r3, #0]
 800345a:	42a5      	cmp	r5, r4
 800345c:	d2fa      	bcs.n	8003454 <vListInsert+0x10>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800345e:	6804      	ldr	r4, [r0, #0]
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003460:	604b      	str	r3, [r1, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003462:	3401      	adds	r4, #1
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003464:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003466:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003468:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800346a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800346c:	6004      	str	r4, [r0, #0]
}
 800346e:	bc30      	pop	{r4, r5}
 8003470:	4770      	bx	lr
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003472:	6902      	ldr	r2, [r0, #16]
 8003474:	6853      	ldr	r3, [r2, #4]
 8003476:	e7f2      	b.n	800345e <vListInsert+0x1a>

08003478 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003478:	6842      	ldr	r2, [r0, #4]
 800347a:	6881      	ldr	r1, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800347c:	6903      	ldr	r3, [r0, #16]
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800347e:	b410      	push	{r4}
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003480:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003482:	6881      	ldr	r1, [r0, #8]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003484:	685c      	ldr	r4, [r3, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003486:	604a      	str	r2, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8003488:	681a      	ldr	r2, [r3, #0]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800348a:	4284      	cmp	r4, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800348c:	bf08      	it	eq
 800348e:	6059      	streq	r1, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8003490:	3a01      	subs	r2, #1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003492:	2100      	movs	r1, #0
 8003494:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8003496:	f85d 4b04 	ldr.w	r4, [sp], #4
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 800349a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800349c:	4610      	mov	r0, r2
 800349e:	4770      	bx	lr

080034a0 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80034a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80034a4:	f240 1474 	movw	r4, #372	; 0x174
 80034a8:	f2c2 0400 	movt	r4, #8192	; 0x2000
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80034ac:	b084      	sub	sp, #16
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80034ae:	f000 fa9d 	bl	80039ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80034b2:	f8d4 8000 	ldr.w	r8, [r4]
 80034b6:	f1b8 0f00 	cmp.w	r8, #0
 80034ba:	d01a      	beq.n	80034f2 <xTimerCreateTimerTask+0x52>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034bc:	f000 faaa 	bl	8003a14 <vPortExitCritical>
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();

	if( xTimerQueue != NULL )
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d03f      	beq.n	8003546 <xTimerCreateTimerTask+0xa6>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 80034c6:	2300      	movs	r3, #0
 80034c8:	2202      	movs	r2, #2
 80034ca:	f243 50a9 	movw	r0, #13737	; 0x35a9
 80034ce:	f244 01b8 	movw	r1, #16568	; 0x40b8
 80034d2:	e88d 000c 	stmia.w	sp, {r2, r3}
 80034d6:	9302      	str	r3, [sp, #8]
 80034d8:	9303      	str	r3, [sp, #12]
 80034da:	f6c0 0000 	movt	r0, #2048	; 0x800
 80034de:	f6c0 0100 	movt	r1, #2048	; 0x800
 80034e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e6:	f7fe fe35 	bl	8002154 <xTaskGenericCreate>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80034ea:	b360      	cbz	r0, 8003546 <xTimerCreateTimerTask+0xa6>
	return xReturn;
}
 80034ec:	b004      	add	sp, #16
 80034ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 80034f2:	f240 1648 	movw	r6, #328	; 0x148
 80034f6:	f2c2 0600 	movt	r6, #8192	; 0x2000
			vListInitialise( &xActiveTimerList2 );
 80034fa:	f240 155c 	movw	r5, #348	; 0x15c
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 80034fe:	4630      	mov	r0, r6
			vListInitialise( &xActiveTimerList2 );
 8003500:	f2c2 0500 	movt	r5, #8192	; 0x2000
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 8003504:	f7ff ff7e 	bl	8003404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003508:	4628      	mov	r0, r5
 800350a:	f7ff ff7b 	bl	8003404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800350e:	f240 1744 	movw	r7, #324	; 0x144
			pxOverflowTimerList = &xActiveTimerList2;
 8003512:	f240 1378 	movw	r3, #376	; 0x178
 8003516:	f2c2 0300 	movt	r3, #8192	; 0x2000
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
 800351a:	f2c2 0700 	movt	r7, #8192	; 0x2000
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800351e:	4642      	mov	r2, r8
 8003520:	200a      	movs	r0, #10
 8003522:	210c      	movs	r1, #12
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
 8003524:	603e      	str	r6, [r7, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003526:	601d      	str	r5, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003528:	f7ff fbbc 	bl	8002ca4 <xQueueGenericCreate>
 800352c:	6020      	str	r0, [r4, #0]
			configASSERT( xTimerQueue );
 800352e:	b168      	cbz	r0, 800354c <xTimerCreateTimerTask+0xac>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003530:	f244 01b0 	movw	r1, #16560	; 0x40b0
 8003534:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003538:	f7ff fede 	bl	80032f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800353c:	f000 fa6a 	bl	8003a14 <vPortExitCritical>
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();

	if( xTimerQueue != NULL )
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1bf      	bne.n	80034c6 <xTimerCreateTimerTask+0x26>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003546:	f000 fa3b 	bl	80039c0 <ulPortSetInterruptMask>
 800354a:	e7fe      	b.n	800354a <xTimerCreateTimerTask+0xaa>
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
			configASSERT( xTimerQueue );
 800354c:	f000 fa38 	bl	80039c0 <ulPortSetInterruptMask>
 8003550:	e7fe      	b.n	8003550 <xTimerCreateTimerTask+0xb0>
 8003552:	bf00      	nop

08003554 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003554:	b570      	push	{r4, r5, r6, lr}
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003556:	f240 1474 	movw	r4, #372	; 0x174
 800355a:	f2c2 0400 	movt	r4, #8192	; 0x2000
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800355e:	b084      	sub	sp, #16
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003560:	6825      	ldr	r5, [r4, #0]
 8003562:	b1ed      	cbz	r5, 80035a0 <xTimerGenericCommand+0x4c>
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003564:	2905      	cmp	r1, #5
	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003566:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003568:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800356a:	9003      	str	r0, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800356c:	dd07      	ble.n	800357e <xTimerGenericCommand+0x2a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800356e:	461a      	mov	r2, r3
 8003570:	4628      	mov	r0, r5
 8003572:	a901      	add	r1, sp, #4
 8003574:	2300      	movs	r3, #0
 8003576:	f7ff fd0d 	bl	8002f94 <xQueueGenericSendFromISR>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 800357a:	b004      	add	sp, #16
 800357c:	bd70      	pop	{r4, r5, r6, pc}
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800357e:	f7ff fac3 	bl	8002b08 <xTaskGetSchedulerState>
 8003582:	2802      	cmp	r0, #2
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003584:	bf13      	iteet	ne
 8003586:	2200      	movne	r2, #0

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003588:	6820      	ldreq	r0, [r4, #0]
 800358a:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800358c:	6820      	ldrne	r0, [r4, #0]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800358e:	bf07      	ittee	eq
 8003590:	a901      	addeq	r1, sp, #4
 8003592:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003594:	4613      	movne	r3, r2
 8003596:	a901      	addne	r1, sp, #4
 8003598:	f7ff fbbc 	bl	8002d14 <xQueueGenericSend>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 800359c:	b004      	add	sp, #16
 800359e:	bd70      	pop	{r4, r5, r6, pc}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
 80035a0:	4628      	mov	r0, r5
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 80035a2:	b004      	add	sp, #16
 80035a4:	bd70      	pop	{r4, r5, r6, pc}
 80035a6:	bf00      	nop

080035a8 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80035a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ac:	f240 1078 	movw	r0, #376	; 0x178
 80035b0:	b08b      	sub	sp, #44	; 0x2c
 80035b2:	f240 1544 	movw	r5, #324	; 0x144
 80035b6:	f240 1870 	movw	r8, #368	; 0x170
 80035ba:	f240 1474 	movw	r4, #372	; 0x174
 80035be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80035c2:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80035c6:	f2c2 0800 	movt	r8, #8192	; 0x2000
 80035ca:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80035ce:	9003      	str	r0, [sp, #12]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80035d0:	682b      	ldr	r3, [r5, #0]
 80035d2:	681e      	ldr	r6, [r3, #0]
 80035d4:	f1d6 0601 	rsbs	r6, r6, #1
 80035d8:	bf38      	it	cc
 80035da:	2600      	movcc	r6, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80035dc:	2700      	movs	r7, #0
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
	if( *pxListWasEmpty == pdFALSE )
 80035de:	b90e      	cbnz	r6, 80035e4 <prvTimerTask+0x3c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	681f      	ldr	r7, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80035e4:	f7fe ff48 	bl	8002478 <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80035e8:	f7fe ff4e 	bl	8002488 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 80035ec:	f8d8 3000 	ldr.w	r3, [r8]
 80035f0:	4298      	cmp	r0, r3
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80035f2:	4682      	mov	sl, r0

	if( xTimeNow < xLastTime )
 80035f4:	d359      	bcc.n	80036aa <prvTimerTask+0x102>
 80035f6:	f086 0301 	eor.w	r3, r6, #1
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035fa:	4287      	cmp	r7, r0
 80035fc:	bf8c      	ite	hi
 80035fe:	2300      	movhi	r3, #0
 8003600:	f003 0301 	andls.w	r3, r3, #1
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 8003604:	f240 1070 	movw	r0, #368	; 0x170
 8003608:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800360c:	f8c0 a000 	str.w	sl, [r0]
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003610:	2b00      	cmp	r3, #0
 8003612:	d177      	bne.n	8003704 <prvTimerTask+0x15c>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8003614:	ebca 0107 	rsb	r1, sl, r7
 8003618:	6820      	ldr	r0, [r4, #0]
 800361a:	f7ff fe9b 	bl	8003354 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 800361e:	f7fe fffd 	bl	800261c <xTaskResumeAll>
 8003622:	2800      	cmp	r0, #0
 8003624:	f000 8095 	beq.w	8003752 <prvTimerTask+0x1aa>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003628:	2200      	movs	r2, #0
 800362a:	4613      	mov	r3, r2
 800362c:	6820      	ldr	r0, [r4, #0]
 800362e:	a904      	add	r1, sp, #16
 8003630:	f7ff fd42 	bl	80030b8 <xQueueGenericReceive>
 8003634:	2800      	cmp	r0, #0
 8003636:	d0cb      	beq.n	80035d0 <prvTimerTask+0x28>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003638:	9b04      	ldr	r3, [sp, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	dbf4      	blt.n	8003628 <prvTimerTask+0x80>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800363e:	f8dd 9018 	ldr.w	r9, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003642:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003646:	b11b      	cbz	r3, 8003650 <prvTimerTask+0xa8>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003648:	f109 0004 	add.w	r0, r9, #4
 800364c:	f7ff ff14 	bl	8003478 <uxListRemove>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003650:	f7fe ff1a 	bl	8002488 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 8003654:	f8d8 3000 	ldr.w	r3, [r8]
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003658:	9002      	str	r0, [sp, #8]

	if( xTimeNow < xLastTime )
 800365a:	4298      	cmp	r0, r3
 800365c:	d345      	bcc.n	80036ea <prvTimerTask+0x142>
 800365e:	9b04      	ldr	r3, [sp, #16]
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 8003660:	9902      	ldr	r1, [sp, #8]
 8003662:	2b09      	cmp	r3, #9
 8003664:	f8c8 1000 	str.w	r1, [r8]
 8003668:	d8de      	bhi.n	8003628 <prvTimerTask+0x80>
 800366a:	2201      	movs	r2, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	f413 7f04 	tst.w	r3, #528	; 0x210
 8003674:	f040 80f9 	bne.w	800386a <prvTimerTask+0x2c2>
 8003678:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 800367c:	f040 80ce 	bne.w	800381c <prvTimerTask+0x274>
 8003680:	069b      	lsls	r3, r3, #26
 8003682:	d5d1      	bpl.n	8003628 <prvTimerTask+0x80>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
 8003684:	4648      	mov	r0, r9
 8003686:	f000 f94b 	bl	8003920 <vPortFree>
 800368a:	e7cd      	b.n	8003628 <prvTimerTask+0x80>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800368c:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800368e:	68de      	ldr	r6, [r3, #12]
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003690:	f8d3 9000 	ldr.w	r9, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003694:	f106 0b04 	add.w	fp, r6, #4
 8003698:	4658      	mov	r0, fp
 800369a:	f7ff feed 	bl	8003478 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800369e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80036a0:	4630      	mov	r0, r6
 80036a2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80036a4:	69f3      	ldr	r3, [r6, #28]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d03d      	beq.n	8003726 <prvTimerTask+0x17e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80036aa:	682b      	ldr	r3, [r5, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	f240 1744 	movw	r7, #324	; 0x144
 80036b2:	f2c2 0700 	movt	r7, #8192	; 0x2000
 80036b6:	2a00      	cmp	r2, #0
 80036b8:	d1e8      	bne.n	800368c <prvTimerTask+0xe4>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 80036ba:	9803      	ldr	r0, [sp, #12]
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 80036bc:	f8c8 a000 	str.w	sl, [r8]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 80036c0:	6802      	ldr	r2, [r0, #0]
	pxOverflowTimerList = pxTemp;
 80036c2:	6003      	str	r3, [r0, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 80036c4:	603a      	str	r2, [r7, #0]
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 80036c6:	f7fe ffa9 	bl	800261c <xTaskResumeAll>
 80036ca:	e7ad      	b.n	8003628 <prvTimerTask+0x80>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036cc:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036ce:	68de      	ldr	r6, [r3, #12]
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036d0:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036d4:	f106 0b04 	add.w	fp, r6, #4
 80036d8:	4658      	mov	r0, fp
 80036da:	f7ff fecd 	bl	8003478 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80036e0:	4630      	mov	r0, r6
 80036e2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80036e4:	69f3      	ldr	r3, [r6, #28]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d028      	beq.n	800373c <prvTimerTask+0x194>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80036ea:	682b      	ldr	r3, [r5, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	f240 1744 	movw	r7, #324	; 0x144
 80036f2:	f2c2 0700 	movt	r7, #8192	; 0x2000
 80036f6:	2a00      	cmp	r2, #0
 80036f8:	d1e8      	bne.n	80036cc <prvTimerTask+0x124>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 80036fa:	9803      	ldr	r0, [sp, #12]
 80036fc:	6802      	ldr	r2, [r0, #0]
	pxOverflowTimerList = pxTemp;
 80036fe:	6003      	str	r3, [r0, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8003700:	603a      	str	r2, [r7, #0]
 8003702:	e7ac      	b.n	800365e <prvTimerTask+0xb6>
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
			{
				( void ) xTaskResumeAll();
 8003704:	f7fe ff8a 	bl	800261c <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003708:	682b      	ldr	r3, [r5, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	68de      	ldr	r6, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800370e:	f106 0b04 	add.w	fp, r6, #4
 8003712:	4658      	mov	r0, fp
 8003714:	f7ff feb0 	bl	8003478 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003718:	69f3      	ldr	r3, [r6, #28]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d01c      	beq.n	8003758 <prvTimerTask+0x1b0>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800371e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003720:	4630      	mov	r0, r6
 8003722:	4798      	blx	r3
 8003724:	e780      	b.n	8003628 <prvTimerTask+0x80>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003726:	69b3      	ldr	r3, [r6, #24]
 8003728:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800372a:	454b      	cmp	r3, r9
 800372c:	d935      	bls.n	800379a <prvTimerTask+0x1f2>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800372e:	6073      	str	r3, [r6, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003730:	6136      	str	r6, [r6, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003732:	6838      	ldr	r0, [r7, #0]
 8003734:	4659      	mov	r1, fp
 8003736:	f7ff fe85 	bl	8003444 <vListInsert>
 800373a:	e7b6      	b.n	80036aa <prvTimerTask+0x102>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800373c:	69b3      	ldr	r3, [r6, #24]
 800373e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8003740:	4553      	cmp	r3, sl
 8003742:	d943      	bls.n	80037cc <prvTimerTask+0x224>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003744:	6073      	str	r3, [r6, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003746:	6136      	str	r6, [r6, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003748:	6838      	ldr	r0, [r7, #0]
 800374a:	4659      	mov	r1, fp
 800374c:	f7ff fe7a 	bl	8003444 <vListInsert>
 8003750:	e7cb      	b.n	80036ea <prvTimerTask+0x142>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8003752:	f000 f929 	bl	80039a8 <vPortYield>
 8003756:	e767      	b.n	8003628 <prvTimerTask+0x80>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8003758:	69b3      	ldr	r3, [r6, #24]
static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800375a:	6136      	str	r6, [r6, #16]
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800375c:	18fa      	adds	r2, r7, r3
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800375e:	4592      	cmp	sl, r2

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003760:	6072      	str	r2, [r6, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8003762:	d34c      	bcc.n	80037fe <prvTimerTask+0x256>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8003764:	ebc7 0a0a 	rsb	sl, r7, sl
 8003768:	4553      	cmp	r3, sl
 800376a:	d851      	bhi.n	8003810 <prvTimerTask+0x268>
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	b18b      	cbz	r3, 8003794 <prvTimerTask+0x1ec>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003770:	2000      	movs	r0, #0
 8003772:	9007      	str	r0, [sp, #28]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003774:	9708      	str	r7, [sp, #32]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003776:	9609      	str	r6, [sp, #36]	; 0x24

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003778:	f7ff f9c6 	bl	8002b08 <xTaskGetSchedulerState>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800377c:	f240 1174 	movw	r1, #372	; 0x174
 8003780:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003784:	2200      	movs	r2, #0
 8003786:	6808      	ldr	r0, [r1, #0]
 8003788:	4613      	mov	r3, r2
 800378a:	a907      	add	r1, sp, #28
 800378c:	f7ff fac2 	bl	8002d14 <xQueueGenericSend>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
			configASSERT( xResult );
 8003790:	2800      	cmp	r0, #0
 8003792:	d1c4      	bne.n	800371e <prvTimerTask+0x176>
 8003794:	f000 f914 	bl	80039c0 <ulPortSetInterruptMask>
 8003798:	e7fe      	b.n	8003798 <prvTimerTask+0x1f0>
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	b19b      	cbz	r3, 80037c6 <prvTimerTask+0x21e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800379e:	2100      	movs	r1, #0
 80037a0:	9107      	str	r1, [sp, #28]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80037a2:	f8cd 9020 	str.w	r9, [sp, #32]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80037a6:	9609      	str	r6, [sp, #36]	; 0x24

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80037a8:	f7ff f9ae 	bl	8002b08 <xTaskGetSchedulerState>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80037ac:	f240 1174 	movw	r1, #372	; 0x174
 80037b0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80037b4:	2200      	movs	r2, #0
 80037b6:	6808      	ldr	r0, [r1, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	a907      	add	r1, sp, #28
 80037bc:	f7ff faaa 	bl	8002d14 <xQueueGenericSend>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
				configASSERT( xResult );
 80037c0:	2800      	cmp	r0, #0
 80037c2:	f47f af72 	bne.w	80036aa <prvTimerTask+0x102>
 80037c6:	f000 f8fb 	bl	80039c0 <ulPortSetInterruptMask>
 80037ca:	e7fe      	b.n	80037ca <prvTimerTask+0x222>
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	b19b      	cbz	r3, 80037f8 <prvTimerTask+0x250>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80037d0:	2200      	movs	r2, #0
 80037d2:	9207      	str	r2, [sp, #28]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80037d4:	f8cd a020 	str.w	sl, [sp, #32]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80037d8:	9609      	str	r6, [sp, #36]	; 0x24

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80037da:	f7ff f995 	bl	8002b08 <xTaskGetSchedulerState>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80037de:	f240 1174 	movw	r1, #372	; 0x174
 80037e2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80037e6:	2200      	movs	r2, #0
 80037e8:	6808      	ldr	r0, [r1, #0]
 80037ea:	4613      	mov	r3, r2
 80037ec:	a907      	add	r1, sp, #28
 80037ee:	f7ff fa91 	bl	8002d14 <xQueueGenericSend>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
				configASSERT( xResult );
 80037f2:	2800      	cmp	r0, #0
 80037f4:	f47f af79 	bne.w	80036ea <prvTimerTask+0x142>
 80037f8:	f000 f8e2 	bl	80039c0 <ulPortSetInterruptMask>
 80037fc:	e7fe      	b.n	80037fc <prvTimerTask+0x254>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80037fe:	f240 1344 	movw	r3, #324	; 0x144
 8003802:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003806:	4659      	mov	r1, fp
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	f7ff fe1b 	bl	8003444 <vListInsert>
 800380e:	e786      	b.n	800371e <prvTimerTask+0x176>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003810:	9a03      	ldr	r2, [sp, #12]
 8003812:	4659      	mov	r1, fp
 8003814:	6810      	ldr	r0, [r2, #0]
 8003816:	f7ff fe15 	bl	8003444 <vListInsert>
 800381a:	e780      	b.n	800371e <prvTimerTask+0x176>
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800381c:	9b05      	ldr	r3, [sp, #20]
 800381e:	f8d9 1018 	ldr.w	r1, [r9, #24]
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8003822:	9802      	ldr	r0, [sp, #8]
static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003824:	f8c9 9010 	str.w	r9, [r9, #16]
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8003828:	18ca      	adds	r2, r1, r3
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800382a:	4282      	cmp	r2, r0

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800382c:	f8c9 2004 	str.w	r2, [r9, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8003830:	d82f      	bhi.n	8003892 <prvTimerTask+0x2ea>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8003832:	1ac3      	subs	r3, r0, r3
 8003834:	4299      	cmp	r1, r3
 8003836:	d83b      	bhi.n	80038b0 <prvTimerTask+0x308>
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003838:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800383c:	4648      	mov	r0, r9
 800383e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003840:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003844:	2b01      	cmp	r3, #1
 8003846:	f47f aeef 	bne.w	8003628 <prvTimerTask+0x80>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800384a:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800384e:	9b05      	ldr	r3, [sp, #20]
 8003850:	2100      	movs	r1, #0
 8003852:	441a      	add	r2, r3
 8003854:	9100      	str	r1, [sp, #0]
 8003856:	4648      	mov	r0, r9
 8003858:	460b      	mov	r3, r1
 800385a:	f7ff fe7b 	bl	8003554 <xTimerGenericCommand>
							configASSERT( xResult );
 800385e:	2800      	cmp	r0, #0
 8003860:	f47f aee2 	bne.w	8003628 <prvTimerTask+0x80>
 8003864:	f000 f8ac 	bl	80039c0 <ulPortSetInterruptMask>
 8003868:	e7fe      	b.n	8003868 <prvTimerTask+0x2c0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800386a:	9b05      	ldr	r3, [sp, #20]
 800386c:	f8c9 3018 	str.w	r3, [r9, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003870:	b32b      	cbz	r3, 80038be <prvTimerTask+0x316>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003872:	9a02      	ldr	r2, [sp, #8]
static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003874:	f8c9 9010 	str.w	r9, [r9, #16]
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003878:	4413      	add	r3, r2
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800387a:	4293      	cmp	r3, r2

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800387c:	f8c9 3004 	str.w	r3, [r9, #4]
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003880:	bf96      	itet	ls
 8003882:	9b03      	ldrls	r3, [sp, #12]
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003884:	6828      	ldrhi	r0, [r5, #0]
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003886:	6818      	ldrls	r0, [r3, #0]
 8003888:	f109 0104 	add.w	r1, r9, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800388c:	f7ff fdda 	bl	8003444 <vListInsert>
 8003890:	e6ca      	b.n	8003628 <prvTimerTask+0x80>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003892:	4283      	cmp	r3, r0
 8003894:	bf94      	ite	ls
 8003896:	2100      	movls	r1, #0
 8003898:	2101      	movhi	r1, #1
 800389a:	4293      	cmp	r3, r2
 800389c:	bf88      	it	hi
 800389e:	2100      	movhi	r1, #0
 80038a0:	2900      	cmp	r1, #0
 80038a2:	d1c9      	bne.n	8003838 <prvTimerTask+0x290>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038a4:	f109 0104 	add.w	r1, r9, #4
 80038a8:	6828      	ldr	r0, [r5, #0]
 80038aa:	f7ff fdcb 	bl	8003444 <vListInsert>
 80038ae:	e6bb      	b.n	8003628 <prvTimerTask+0x80>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80038b0:	9a03      	ldr	r2, [sp, #12]
 80038b2:	f109 0104 	add.w	r1, r9, #4
 80038b6:	6810      	ldr	r0, [r2, #0]
 80038b8:	f7ff fdc4 	bl	8003444 <vListInsert>
 80038bc:	e6b4      	b.n	8003628 <prvTimerTask+0x80>
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80038be:	f000 f87f 	bl	80039c0 <ulPortSetInterruptMask>
 80038c2:	e7fe      	b.n	80038c2 <prvTimerTask+0x31a>

080038c4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80038c4:	b538      	push	{r3, r4, r5, lr}
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80038c6:	0743      	lsls	r3, r0, #29
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80038c8:	4604      	mov	r4, r0
	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038ca:	bf1c      	itt	ne
 80038cc:	f020 0407 	bicne.w	r4, r0, #7
 80038d0:	3408      	addne	r4, #8
		}
	#endif

	vTaskSuspendAll();
 80038d2:	f7fe fdd1 	bl	8002478 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80038d6:	f242 1380 	movw	r3, #8576	; 0x2180
 80038da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4615      	mov	r5, r2
 80038e2:	b1b2      	cbz	r2, 8003912 <pvPortMalloc+0x4e>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80038e4:	f240 137c 	movw	r3, #380	; 0x17c
 80038e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038ec:	f641 71f7 	movw	r1, #8183	; 0x1ff7
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4414      	add	r4, r2
 80038f4:	428c      	cmp	r4, r1
 80038f6:	d807      	bhi.n	8003908 <pvPortMalloc+0x44>
 80038f8:	42a2      	cmp	r2, r4
 80038fa:	d205      	bcs.n	8003908 <pvPortMalloc+0x44>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80038fc:	4415      	add	r5, r2
			xNextFreeByte += xWantedSize;
 80038fe:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003900:	f7fe fe8c 	bl	800261c <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 8003904:	4628      	mov	r0, r5
 8003906:	bd38      	pop	{r3, r4, r5, pc}

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 8003908:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800390a:	f7fe fe87 	bl	800261c <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 800390e:	4628      	mov	r0, r5
 8003910:	bd38      	pop	{r3, r4, r5, pc}
	vTaskSuspendAll();
	{
		if( pucAlignedHeap == NULL )
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 8003912:	4d02      	ldr	r5, [pc, #8]	; (800391c <pvPortMalloc+0x58>)
 8003914:	f025 0507 	bic.w	r5, r5, #7
 8003918:	601d      	str	r5, [r3, #0]
 800391a:	e7e3      	b.n	80038e4 <pvPortMalloc+0x20>
 800391c:	20000188 	.word	0x20000188

08003920 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003920:	b508      	push	{r3, lr}
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8003922:	b110      	cbz	r0, 800392a <vPortFree+0xa>
 8003924:	f000 f84c 	bl	80039c0 <ulPortSetInterruptMask>
 8003928:	e7fe      	b.n	8003928 <vPortFree+0x8>
 800392a:	bd08      	pop	{r3, pc}

0800392c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800392c:	4805      	ldr	r0, [pc, #20]	; (8003944 <prvPortStartFirstTask+0x18>)
 800392e:	6800      	ldr	r0, [r0, #0]
 8003930:	6800      	ldr	r0, [r0, #0]
 8003932:	f380 8808 	msr	MSP, r0
 8003936:	b662      	cpsie	i
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	df00      	svc	0
 8003942:	bf00      	nop
 8003944:	e000ed08 	.word	0xe000ed08

08003948 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003948:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003958 <vPortEnableVFP+0x10>
 800394c:	6801      	ldr	r1, [r0, #0]
 800394e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003952:	6001      	str	r1, [r0, #0]
 8003954:	4770      	bx	lr
 8003956:	0000      	.short	0x0000
 8003958:	e000ed88 	.word	0xe000ed88

0800395c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800395c:	b430      	push	{r4, r5}

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800395e:	f643 13d1 	movw	r3, #14801	; 0x39d1

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003962:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003966:	f06f 0402 	mvn.w	r4, #2

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800396a:	f6c0 0300 	movt	r3, #2048	; 0x800

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800396e:	f840 5c04 	str.w	r5, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003972:	f840 4c24 	str.w	r4, [r0, #-36]
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003976:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800397a:	f840 2c20 	str.w	r2, [r0, #-32]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800397e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8003982:	bc30      	pop	{r4, r5}
 8003984:	3844      	subs	r0, #68	; 0x44
 8003986:	4770      	bx	lr

08003988 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <pxCurrentTCBConst2>)
 800398a:	6819      	ldr	r1, [r3, #0]
 800398c:	6808      	ldr	r0, [r1, #0]
 800398e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003992:	f380 8809 	msr	PSP, r0
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f04f 0000 	mov.w	r0, #0
 800399e:	f380 8811 	msr	BASEPRI, r0
 80039a2:	4770      	bx	lr

080039a4 <pxCurrentTCBConst2>:
 80039a4:	200000d4 	.word	0x200000d4

080039a8 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039a8:	f64e 5304 	movw	r3, #60676	; 0xed04
 80039ac:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80039b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b4:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 80039b6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	4770      	bx	lr

080039c0 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
 80039c0:	f3ef 8011 	mrs	r0, BASEPRI
 80039c4:	f04f 0150 	mov.w	r1, #80	; 0x50
 80039c8:	f381 8811 	msr	BASEPRI, r1
 80039cc:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
 80039ce:	2000      	movs	r0, #0

080039d0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80039d0:	b508      	push	{r3, lr}
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80039d2:	f240 031c 	movw	r3, #28
 80039d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3301      	adds	r3, #1
 80039de:	d002      	beq.n	80039e6 <prvTaskExitError+0x16>
 80039e0:	f7ff ffee 	bl	80039c0 <ulPortSetInterruptMask>
 80039e4:	e7fe      	b.n	80039e4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80039e6:	f7ff ffeb 	bl	80039c0 <ulPortSetInterruptMask>
 80039ea:	e7fe      	b.n	80039ea <prvTaskExitError+0x1a>

080039ec <vPortEnterCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80039ec:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
 80039ee:	f7ff ffe7 	bl	80039c0 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 80039f2:	f240 031c 	movw	r3, #28
 80039f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	3201      	adds	r2, #1
 80039fe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8003a00:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	bd08      	pop	{r3, pc}
 8003a0a:	bf00      	nop

08003a0c <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
 8003a0c:	f380 8811 	msr	BASEPRI, r0
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop

08003a14 <vPortExitCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a14:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
 8003a16:	f240 031c 	movw	r3, #28
 8003a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	b118      	cbz	r0, 8003a2a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003a22:	3801      	subs	r0, #1
 8003a24:	6018      	str	r0, [r3, #0]
	if( uxCriticalNesting == 0 )
 8003a26:	b118      	cbz	r0, 8003a30 <vPortExitCritical+0x1c>
 8003a28:	bd08      	pop	{r3, pc}
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003a2a:	f7ff ffc9 	bl	80039c0 <ulPortSetInterruptMask>
 8003a2e:	e7fe      	b.n	8003a2e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
	if( uxCriticalNesting == 0 )
	{
		portENABLE_INTERRUPTS();
	}
}
 8003a30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
	if( uxCriticalNesting == 0 )
	{
		portENABLE_INTERRUPTS();
 8003a34:	f7ff bfea 	b.w	8003a0c <vPortClearInterruptMask>

08003a38 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a38:	f3ef 8009 	mrs	r0, PSP
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <pxCurrentTCBConst>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	f01e 0f10 	tst.w	lr, #16
 8003a48:	bf08      	it	eq
 8003a4a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a4e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a52:	6010      	str	r0, [r2, #0]
 8003a54:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003a58:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a5c:	f380 8811 	msr	BASEPRI, r0
 8003a60:	f7fe fee4 	bl	800282c <vTaskSwitchContext>
 8003a64:	f04f 0000 	mov.w	r0, #0
 8003a68:	f380 8811 	msr	BASEPRI, r0
 8003a6c:	bc08      	pop	{r3}
 8003a6e:	6819      	ldr	r1, [r3, #0]
 8003a70:	6808      	ldr	r0, [r1, #0]
 8003a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a76:	f01e 0f10 	tst.w	lr, #16
 8003a7a:	bf08      	it	eq
 8003a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a80:	f380 8809 	msr	PSP, r0
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop

08003a8c <pxCurrentTCBConst>:
 8003a8c:	200000d4 	.word	0x200000d4

08003a90 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a90:	b508      	push	{r3, lr}
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8003a92:	f7ff ff95 	bl	80039c0 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a96:	f7fe fd03 	bl	80024a0 <xTaskIncrementTick>
 8003a9a:	b130      	cbz	r0, 8003aaa <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a9c:	f64e 5304 	movw	r3, #60676	; 0xed04
 8003aa0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa8:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8003aaa:	2000      	movs	r0, #0
}
 8003aac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8003ab0:	f7ff bfac 	b.w	8003a0c <vPortClearInterruptMask>

08003ab4 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ab4:	f24e 0214 	movw	r2, #57364	; 0xe014
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ab8:	f24e 0310 	movw	r3, #57360	; 0xe010
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003abc:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003ac0:	f24d 113f 	movw	r1, #53567	; 0xd13f
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ac4:	f2ce 0300 	movt	r3, #57344	; 0xe000
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ac8:	f2c0 010c 	movt	r1, #12
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003acc:	2007      	movs	r0, #7
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ace:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ad0:	6018      	str	r0, [r3, #0]
 8003ad2:	4770      	bx	lr

08003ad4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ad4:	b510      	push	{r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ad6:	f44f 4364 	mov.w	r3, #58368	; 0xe400
 8003ada:	f2ce 0300 	movt	r3, #57344	; 0xe000

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ade:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ae0:	7819      	ldrb	r1, [r3, #0]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ae2:	22ff      	movs	r2, #255	; 0xff
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ae4:	b2c9      	uxtb	r1, r1
 8003ae6:	9101      	str	r1, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ae8:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003af2:	f89d 4003 	ldrb.w	r4, [sp, #3]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003af6:	f89d 1003 	ldrb.w	r1, [sp, #3]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003afa:	f242 1284 	movw	r2, #8580	; 0x2184

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003afe:	f242 1088 	movw	r0, #8584	; 0x2188

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b02:	f2c2 0200 	movt	r2, #8192	; 0x2000

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b06:	f2c2 0000 	movt	r0, #8192	; 0x2000

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b0a:	f004 0450 	and.w	r4, r4, #80	; 0x50

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b0e:	2307      	movs	r3, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b10:	0609      	lsls	r1, r1, #24

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b12:	7014      	strb	r4, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b14:	6003      	str	r3, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b16:	d50e      	bpl.n	8003b36 <xPortStartScheduler+0x62>
 8003b18:	2306      	movs	r3, #6
 8003b1a:	e000      	b.n	8003b1e <xPortStartScheduler+0x4a>
 8003b1c:	460b      	mov	r3, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b1e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003b22:	0052      	lsls	r2, r2, #1
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	f88d 2003 	strb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b2a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003b2e:	0612      	lsls	r2, r2, #24
 8003b30:	f103 31ff 	add.w	r1, r3, #4294967295
 8003b34:	d4f2      	bmi.n	8003b1c <xPortStartScheduler+0x48>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b36:	9c01      	ldr	r4, [sp, #4]
 8003b38:	f44f 4164 	mov.w	r1, #58368	; 0xe400
 8003b3c:	f2ce 0100 	movt	r1, #57344	; 0xe000
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b40:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b42:	f64e 5220 	movw	r2, #60704	; 0xed20
 8003b46:	f2ce 0200 	movt	r2, #57344	; 0xe000
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b4e:	b2e4      	uxtb	r4, r4
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b50:	6003      	str	r3, [r0, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b52:	700c      	strb	r4, [r1, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b54:	6813      	ldr	r3, [r2, #0]
 8003b56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b5c:	6813      	ldr	r3, [r2, #0]
 8003b5e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003b64:	f7ff ffa6 	bl	8003ab4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b68:	f240 031c 	movw	r3, #28
 8003b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003b74:	f7ff fee8 	bl	8003948 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b78:	f64e 7334 	movw	r3, #61236	; 0xef34
 8003b7c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8003b86:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003b88:	f7ff fed0 	bl	800392c <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8003b8c:	f7ff ff20 	bl	80039d0 <prvTaskExitError>

08003b90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003b90:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8003b92:	f3ef 8105 	mrs	r1, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003b96:	290f      	cmp	r1, #15
 8003b98:	d90b      	bls.n	8003bb2 <vPortValidateInterruptPriority+0x22>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003b9a:	f24e 32f0 	movw	r2, #58352	; 0xe3f0
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003b9e:	f242 1384 	movw	r3, #8580	; 0x2184

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003ba2:	f2ce 0200 	movt	r2, #57344	; 0xe000
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003baa:	5c8a      	ldrb	r2, [r1, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d811      	bhi.n	8003bd6 <vPortValidateInterruptPriority+0x46>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003bb2:	f64e 520c 	movw	r2, #60684	; 0xed0c
 8003bb6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003bba:	f242 1388 	movw	r3, #8584	; 0x2188
 8003bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d800      	bhi.n	8003bd0 <vPortValidateInterruptPriority+0x40>
 8003bce:	bd08      	pop	{r3, pc}
 8003bd0:	f7ff fef6 	bl	80039c0 <ulPortSetInterruptMask>
 8003bd4:	e7fe      	b.n	8003bd4 <vPortValidateInterruptPriority+0x44>
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003bd6:	f7ff fef3 	bl	80039c0 <ulPortSetInterruptMask>
 8003bda:	e7fe      	b.n	8003bda <vPortValidateInterruptPriority+0x4a>

08003bdc <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8003bdc:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 8003bde:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003be2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003be6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003bea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003bee:	4290      	cmp	r0, r2
 8003bf0:	bf18      	it	ne
 8003bf2:	4298      	cmpne	r0, r3
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 8003bf8:	d00b      	beq.n	8003c12 <SPI_Cmd+0x36>
 8003bfa:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003bfe:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8003c02:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003c06:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003c0a:	4290      	cmp	r0, r2
 8003c0c:	bf18      	it	ne
 8003c0e:	4298      	cmpne	r0, r3
 8003c10:	d10f      	bne.n	8003c32 <SPI_Cmd+0x56>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8003c12:	2d01      	cmp	r5, #1
 8003c14:	d922      	bls.n	8003c5c <SPI_Cmd+0x80>
 8003c16:	f244 00c0 	movw	r0, #16576	; 0x40c0
 8003c1a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003c1e:	f44f 7109 	mov.w	r1, #548	; 0x224
 8003c22:	f7fd fd9d 	bl	8001760 <assert_failed>
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8003c26:	8823      	ldrh	r3, [r4, #0]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c2e:	8023      	strh	r3, [r4, #0]
 8003c30:	bd38      	pop	{r3, r4, r5, pc}
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 8003c32:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8003c36:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8003c3a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003c3e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003c42:	4290      	cmp	r0, r2
 8003c44:	bf18      	it	ne
 8003c46:	4298      	cmpne	r0, r3
 8003c48:	d0e3      	beq.n	8003c12 <SPI_Cmd+0x36>
 8003c4a:	f244 00c0 	movw	r0, #16576	; 0x40c0
 8003c4e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003c52:	f240 2123 	movw	r1, #547	; 0x223
 8003c56:	f7fd fd83 	bl	8001760 <assert_failed>
 8003c5a:	e7da      	b.n	8003c12 <SPI_Cmd+0x36>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003c5c:	2d00      	cmp	r5, #0
 8003c5e:	d1e2      	bne.n	8003c26 <SPI_Cmd+0x4a>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8003c60:	8823      	ldrh	r3, [r4, #0]
 8003c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c66:	041b      	lsls	r3, r3, #16
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	8023      	strh	r3, [r4, #0]
 8003c6c:	bd38      	pop	{r3, r4, r5, pc}
 8003c6e:	bf00      	nop

08003c70 <SPI_I2S_ReceiveData>:
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8003c70:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003c74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003c78:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003c7c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003c80:	4290      	cmp	r0, r2
 8003c82:	bf18      	it	ne
 8003c84:	4298      	cmpne	r0, r3
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8003c86:	b510      	push	{r4, lr}
 8003c88:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8003c8a:	d020      	beq.n	8003cce <SPI_I2S_ReceiveData+0x5e>
 8003c8c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003c90:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8003c94:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003c98:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003c9c:	4290      	cmp	r0, r2
 8003c9e:	bf18      	it	ne
 8003ca0:	4298      	cmpne	r0, r3
 8003ca2:	d014      	beq.n	8003cce <SPI_I2S_ReceiveData+0x5e>
 8003ca4:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8003ca8:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8003cac:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003cb0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003cb4:	4290      	cmp	r0, r2
 8003cb6:	bf18      	it	ne
 8003cb8:	4298      	cmpne	r0, r3
 8003cba:	d008      	beq.n	8003cce <SPI_I2S_ReceiveData+0x5e>
 8003cbc:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8003cc0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003cc4:	4298      	cmp	r0, r3
 8003cc6:	bf18      	it	ne
 8003cc8:	f1b0 2f40 	cmpne.w	r0, #1073758208	; 0x40004000
 8003ccc:	d102      	bne.n	8003cd4 <SPI_I2S_ReceiveData+0x64>
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8003cce:	89a0      	ldrh	r0, [r4, #12]
}
 8003cd0:	b280      	uxth	r0, r0
 8003cd2:	bd10      	pop	{r4, pc}
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8003cd4:	f244 00c0 	movw	r0, #16576	; 0x40c0
 8003cd8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003cdc:	f240 312b 	movw	r1, #811	; 0x32b
 8003ce0:	f7fd fd3e 	bl	8001760 <assert_failed>
 8003ce4:	e7f3      	b.n	8003cce <SPI_I2S_ReceiveData+0x5e>
 8003ce6:	bf00      	nop

08003ce8 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8003ce8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8003cea:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003cee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003cf2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003cf6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003cfa:	4290      	cmp	r0, r2
 8003cfc:	bf18      	it	ne
 8003cfe:	4298      	cmpne	r0, r3
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8003d00:	4604      	mov	r4, r0
 8003d02:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8003d04:	d020      	beq.n	8003d48 <SPI_I2S_SendData+0x60>
 8003d06:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003d0a:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8003d0e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003d12:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003d16:	4290      	cmp	r0, r2
 8003d18:	bf18      	it	ne
 8003d1a:	4298      	cmpne	r0, r3
 8003d1c:	d014      	beq.n	8003d48 <SPI_I2S_SendData+0x60>
 8003d1e:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8003d22:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8003d26:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003d2a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003d2e:	4290      	cmp	r0, r2
 8003d30:	bf18      	it	ne
 8003d32:	4298      	cmpne	r0, r3
 8003d34:	d008      	beq.n	8003d48 <SPI_I2S_SendData+0x60>
 8003d36:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8003d3a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003d3e:	4298      	cmp	r0, r3
 8003d40:	bf18      	it	ne
 8003d42:	f1b0 2f40 	cmpne.w	r0, #1073758208	; 0x40004000
 8003d46:	d101      	bne.n	8003d4c <SPI_I2S_SendData+0x64>
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8003d48:	81a5      	strh	r5, [r4, #12]
 8003d4a:	bd38      	pop	{r3, r4, r5, pc}
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8003d4c:	f244 00c0 	movw	r0, #16576	; 0x40c0
 8003d50:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003d54:	f240 313b 	movw	r1, #827	; 0x33b
 8003d58:	f7fd fd02 	bl	8001760 <assert_failed>
 8003d5c:	e7f4      	b.n	8003d48 <SPI_I2S_SendData+0x60>
 8003d5e:	bf00      	nop

08003d60 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8003d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t itpos = 0, itmask = 0 ;
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8003d62:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8003d66:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d6a:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8003d6e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003d72:	42b0      	cmp	r0, r6
 8003d74:	bf18      	it	ne
 8003d76:	4298      	cmpne	r0, r3
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8003d78:	4604      	mov	r4, r0
 8003d7a:	460d      	mov	r5, r1
 8003d7c:	4617      	mov	r7, r2
  uint16_t itpos = 0, itmask = 0 ;
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8003d7e:	d00b      	beq.n	8003d98 <SPI_I2S_ITConfig+0x38>
 8003d80:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003d84:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8003d88:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003d8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003d90:	4290      	cmp	r0, r2
 8003d92:	bf18      	it	ne
 8003d94:	4298      	cmpne	r0, r3
 8003d96:	d123      	bne.n	8003de0 <SPI_I2S_ITConfig+0x80>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8003d98:	2f01      	cmp	r7, #1
 8003d9a:	d907      	bls.n	8003dac <SPI_I2S_ITConfig+0x4c>
 8003d9c:	f244 00c0 	movw	r0, #16576	; 0x40c0
 8003da0:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003da4:	f240 416a 	movw	r1, #1130	; 0x46a
 8003da8:	f7fd fcda 	bl	8001760 <assert_failed>
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
 8003dac:	2d71      	cmp	r5, #113	; 0x71
 8003dae:	bf18      	it	ne
 8003db0:	2d60      	cmpne	r5, #96	; 0x60
 8003db2:	d009      	beq.n	8003dc8 <SPI_I2S_ITConfig+0x68>
 8003db4:	2d50      	cmp	r5, #80	; 0x50
 8003db6:	d007      	beq.n	8003dc8 <SPI_I2S_ITConfig+0x68>
 8003db8:	f244 00c0 	movw	r0, #16576	; 0x40c0
 8003dbc:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003dc0:	f240 416b 	movw	r1, #1131	; 0x46b
 8003dc4:	f7fd fccc 	bl	8001760 <assert_failed>

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	092d      	lsrs	r5, r5, #4
 8003dcc:	fa03 f505 	lsl.w	r5, r3, r5

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8003dd0:	88a3      	ldrh	r3, [r4, #4]

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8003dd2:	b2ad      	uxth	r5, r5

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8003dd4:	b29b      	uxth	r3, r3
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 8003dd6:	bb0f      	cbnz	r7, 8003e1c <SPI_I2S_ITConfig+0xbc>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8003dd8:	ea23 0505 	bic.w	r5, r3, r5
 8003ddc:	80a5      	strh	r5, [r4, #4]
 8003dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
  uint16_t itpos = 0, itmask = 0 ;
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8003de0:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8003de4:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8003de8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003dec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003df0:	4290      	cmp	r0, r2
 8003df2:	bf18      	it	ne
 8003df4:	4298      	cmpne	r0, r3
 8003df6:	d0cf      	beq.n	8003d98 <SPI_I2S_ITConfig+0x38>
 8003df8:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8003dfc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e00:	4298      	cmp	r0, r3
 8003e02:	bf18      	it	ne
 8003e04:	f1b0 2f40 	cmpne.w	r0, #1073758208	; 0x40004000
 8003e08:	d0c6      	beq.n	8003d98 <SPI_I2S_ITConfig+0x38>
 8003e0a:	f244 00c0 	movw	r0, #16576	; 0x40c0
 8003e0e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003e12:	f240 4169 	movw	r1, #1129	; 0x469
 8003e16:	f7fd fca3 	bl	8001760 <assert_failed>
 8003e1a:	e7bd      	b.n	8003d98 <SPI_I2S_ITConfig+0x38>
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8003e1c:	431d      	orrs	r5, r3
 8003e1e:	80a5      	strh	r5, [r4, #4]
 8003e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e22:	bf00      	nop

08003e24 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8003e24:	b538      	push	{r3, r4, r5, lr}
  ITStatus bitstatus = RESET;
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8003e26:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003e2a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003e2e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003e32:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e36:	4290      	cmp	r0, r2
 8003e38:	bf18      	it	ne
 8003e3a:	4298      	cmpne	r0, r3
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8003e3c:	4604      	mov	r4, r0
 8003e3e:	460d      	mov	r5, r1
  ITStatus bitstatus = RESET;
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8003e40:	d00b      	beq.n	8003e5a <SPI_I2S_GetITStatus+0x36>
 8003e42:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003e46:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8003e4a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003e4e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003e52:	4290      	cmp	r0, r2
 8003e54:	bf18      	it	ne
 8003e56:	4298      	cmpne	r0, r3
 8003e58:	d119      	bne.n	8003e8e <SPI_I2S_GetITStatus+0x6a>
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
 8003e5a:	2d60      	cmp	r5, #96	; 0x60
 8003e5c:	bf18      	it	ne
 8003e5e:	2d71      	cmpne	r5, #113	; 0x71
 8003e60:	d003      	beq.n	8003e6a <SPI_I2S_GetITStatus+0x46>
 8003e62:	f1a5 0353 	sub.w	r3, r5, #83	; 0x53
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d82f      	bhi.n	8003eca <SPI_I2S_GetITStatus+0xa6>

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8003e6a:	88a1      	ldrh	r1, [r4, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8003e6c:	8920      	ldrh	r0, [r4, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8003e6e:	f005 030f 	and.w	r3, r5, #15
 8003e72:	2201      	movs	r2, #1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8003e74:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8003e7a:	4018      	ands	r0, r3

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8003e7c:	b289      	uxth	r1, r1

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8003e7e:	d005      	beq.n	8003e8c <SPI_I2S_GetITStatus+0x68>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8003e80:	092d      	lsrs	r5, r5, #4
 8003e82:	40aa      	lsls	r2, r5

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8003e84:	4211      	tst	r1, r2
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8003e86:	bf0c      	ite	eq
 8003e88:	2000      	moveq	r0, #0
 8003e8a:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8003e8c:	bd38      	pop	{r3, r4, r5, pc}
{
  ITStatus bitstatus = RESET;
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8003e8e:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8003e92:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8003e96:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003e9a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003e9e:	4290      	cmp	r0, r2
 8003ea0:	bf18      	it	ne
 8003ea2:	4298      	cmpne	r0, r3
 8003ea4:	d0d9      	beq.n	8003e5a <SPI_I2S_GetITStatus+0x36>
 8003ea6:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8003eaa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003eae:	4298      	cmp	r0, r3
 8003eb0:	bf18      	it	ne
 8003eb2:	f1b0 2f40 	cmpne.w	r0, #1073758208	; 0x40004000
 8003eb6:	d0d0      	beq.n	8003e5a <SPI_I2S_GetITStatus+0x36>
 8003eb8:	f244 00c0 	movw	r0, #16576	; 0x40c0
 8003ebc:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003ec0:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 8003ec4:	f7fd fc4c 	bl	8001760 <assert_failed>
 8003ec8:	e7c7      	b.n	8003e5a <SPI_I2S_GetITStatus+0x36>
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
 8003eca:	2d58      	cmp	r5, #88	; 0x58
 8003ecc:	d0cd      	beq.n	8003e6a <SPI_I2S_GetITStatus+0x46>
 8003ece:	f244 00c0 	movw	r0, #16576	; 0x40c0
 8003ed2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003ed6:	f240 41d9 	movw	r1, #1241	; 0x4d9
 8003eda:	f7fd fc41 	bl	8001760 <assert_failed>
 8003ede:	e7c4      	b.n	8003e6a <SPI_I2S_GetITStatus+0x46>

08003ee0 <Reset_Handler>:
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	e003      	b.n	8003eec <LoopCopyDataInit>

08003ee4 <CopyDataInit>:
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <LoopFillZerobss+0x14>)
 8003ee6:	585b      	ldr	r3, [r3, r1]
 8003ee8:	5043      	str	r3, [r0, r1]
 8003eea:	3104      	adds	r1, #4

08003eec <LoopCopyDataInit>:
 8003eec:	480a      	ldr	r0, [pc, #40]	; (8003f18 <LoopFillZerobss+0x18>)
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <LoopFillZerobss+0x1c>)
 8003ef0:	1842      	adds	r2, r0, r1
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d3f6      	bcc.n	8003ee4 <CopyDataInit>
 8003ef6:	4a0a      	ldr	r2, [pc, #40]	; (8003f20 <LoopFillZerobss+0x20>)
 8003ef8:	e002      	b.n	8003f00 <LoopFillZerobss>

08003efa <FillZerobss>:
 8003efa:	2300      	movs	r3, #0
 8003efc:	f842 3b04 	str.w	r3, [r2], #4

08003f00 <LoopFillZerobss>:
 8003f00:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <LoopFillZerobss+0x24>)
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d3f9      	bcc.n	8003efa <FillZerobss>
 8003f06:	f7fd fb1f 	bl	8001548 <SystemInit>
 8003f0a:	f7fc f9a7 	bl	800025c <__libc_init_array>
 8003f0e:	f7fd fbef 	bl	80016f0 <main>
 8003f12:	4770      	bx	lr
 8003f14:	0800411c 	.word	0x0800411c
 8003f18:	20000000 	.word	0x20000000
 8003f1c:	20000020 	.word	0x20000020
 8003f20:	20000020 	.word	0x20000020
 8003f24:	200026a4 	.word	0x200026a4

08003f28 <ADC_IRQHandler>:
 8003f28:	e7fe      	b.n	8003f28 <ADC_IRQHandler>
 8003f2a:	0000      	movs	r0, r0
 8003f2c:	7262694c 	.word	0x7262694c
 8003f30:	65697261 	.word	0x65697261
 8003f34:	54532f73 	.word	0x54532f73
 8003f38:	4632334d 	.word	0x4632334d
 8003f3c:	5f787834 	.word	0x5f787834
 8003f40:	50647453 	.word	0x50647453
 8003f44:	70697265 	.word	0x70697265
 8003f48:	72445f68 	.word	0x72445f68
 8003f4c:	72657669 	.word	0x72657669
 8003f50:	6372732f 	.word	0x6372732f
 8003f54:	73696d2f 	.word	0x73696d2f
 8003f58:	00632e63 	.word	0x00632e63
 8003f5c:	7262694c 	.word	0x7262694c
 8003f60:	65697261 	.word	0x65697261
 8003f64:	54532f73 	.word	0x54532f73
 8003f68:	4632334d 	.word	0x4632334d
 8003f6c:	5f787834 	.word	0x5f787834
 8003f70:	50647453 	.word	0x50647453
 8003f74:	70697265 	.word	0x70697265
 8003f78:	72445f68 	.word	0x72445f68
 8003f7c:	72657669 	.word	0x72657669
 8003f80:	6372732f 	.word	0x6372732f
 8003f84:	6d74732f 	.word	0x6d74732f
 8003f88:	34663233 	.word	0x34663233
 8003f8c:	675f7878 	.word	0x675f7878
 8003f90:	2e6f6970 	.word	0x2e6f6970
 8003f94:	00000063 	.word	0x00000063
 8003f98:	7262694c 	.word	0x7262694c
 8003f9c:	65697261 	.word	0x65697261
 8003fa0:	54532f73 	.word	0x54532f73
 8003fa4:	4632334d 	.word	0x4632334d
 8003fa8:	5f787834 	.word	0x5f787834
 8003fac:	50647453 	.word	0x50647453
 8003fb0:	70697265 	.word	0x70697265
 8003fb4:	72445f68 	.word	0x72445f68
 8003fb8:	72657669 	.word	0x72657669
 8003fbc:	6372732f 	.word	0x6372732f
 8003fc0:	6d74732f 	.word	0x6d74732f
 8003fc4:	34663233 	.word	0x34663233
 8003fc8:	695f7878 	.word	0x695f7878
 8003fcc:	632e6332 	.word	0x632e6332
 8003fd0:	00000000 	.word	0x00000000
 8003fd4:	7262694c 	.word	0x7262694c
 8003fd8:	65697261 	.word	0x65697261
 8003fdc:	54532f73 	.word	0x54532f73
 8003fe0:	4632334d 	.word	0x4632334d
 8003fe4:	5f787834 	.word	0x5f787834
 8003fe8:	50647453 	.word	0x50647453
 8003fec:	70697265 	.word	0x70697265
 8003ff0:	72445f68 	.word	0x72445f68
 8003ff4:	72657669 	.word	0x72657669
 8003ff8:	6372732f 	.word	0x6372732f
 8003ffc:	6d74732f 	.word	0x6d74732f
 8004000:	34663233 	.word	0x34663233
 8004004:	725f7878 	.word	0x725f7878
 8004008:	632e6363 	.word	0x632e6363
 800400c:	00000000 	.word	0x00000000
 8004010:	7262694c 	.word	0x7262694c
 8004014:	65697261 	.word	0x65697261
 8004018:	54532f73 	.word	0x54532f73
 800401c:	4632334d 	.word	0x4632334d
 8004020:	5f787834 	.word	0x5f787834
 8004024:	50647453 	.word	0x50647453
 8004028:	70697265 	.word	0x70697265
 800402c:	72445f68 	.word	0x72445f68
 8004030:	72657669 	.word	0x72657669
 8004034:	6372732f 	.word	0x6372732f
 8004038:	6d74732f 	.word	0x6d74732f
 800403c:	34663233 	.word	0x34663233
 8004040:	755f7878 	.word	0x755f7878
 8004044:	74726173 	.word	0x74726173
 8004048:	0000632e 	.word	0x0000632e
 800404c:	6b736154 	.word	0x6b736154
 8004050:	73692032 	.word	0x73692032
 8004054:	65726320 	.word	0x65726320
 8004058:	64657461 	.word	0x64657461
 800405c:	0a212120 	.word	0x0a212120
 8004060:	0000000d 	.word	0x0000000d
 8004064:	6c6c616d 	.word	0x6c6c616d
 8004068:	2520636f 	.word	0x2520636f
 800406c:	79622064 	.word	0x79622064
 8004070:	20736574 	.word	0x20736574
 8004074:	00000a0d 	.word	0x00000a0d
 8004078:	6b736154 	.word	0x6b736154
 800407c:	73692031 	.word	0x73692031
 8004080:	65726320 	.word	0x65726320
 8004084:	64657461 	.word	0x64657461
 8004088:	0a212120 	.word	0x0a212120
 800408c:	0000000d 	.word	0x0000000d
 8004090:	6c6c6568 	.word	0x6c6c6568
 8004094:	6425206f 	.word	0x6425206f
 8004098:	0a642520 	.word	0x0a642520
 800409c:	0000000d 	.word	0x0000000d
 80040a0:	6b736154 	.word	0x6b736154
 80040a4:	00000031 	.word	0x00000031
 80040a8:	6b736154 	.word	0x6b736154
 80040ac:	00000032 	.word	0x00000032
 80040b0:	51726d54 	.word	0x51726d54
 80040b4:	00000000 	.word	0x00000000
 80040b8:	20726d54 	.word	0x20726d54
 80040bc:	00637653 	.word	0x00637653
 80040c0:	7262694c 	.word	0x7262694c
 80040c4:	65697261 	.word	0x65697261
 80040c8:	54532f73 	.word	0x54532f73
 80040cc:	4632334d 	.word	0x4632334d
 80040d0:	5f787834 	.word	0x5f787834
 80040d4:	50647453 	.word	0x50647453
 80040d8:	70697265 	.word	0x70697265
 80040dc:	72445f68 	.word	0x72445f68
 80040e0:	72657669 	.word	0x72657669
 80040e4:	6372732f 	.word	0x6372732f
 80040e8:	6d74732f 	.word	0x6d74732f
 80040ec:	34663233 	.word	0x34663233
 80040f0:	735f7878 	.word	0x735f7878
 80040f4:	632e6970 	.word	0x632e6970
 80040f8:	00000000 	.word	0x00000000

080040fc <_init>:
 80040fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fe:	bf00      	nop
 8004100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004102:	bc08      	pop	{r3}
 8004104:	469e      	mov	lr, r3
 8004106:	4770      	bx	lr

08004108 <_fini>:
 8004108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410a:	bf00      	nop
 800410c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410e:	bc08      	pop	{r3}
 8004110:	469e      	mov	lr, r3
 8004112:	4770      	bx	lr
