   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f4xx_rcc.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.RCC_DeInit,"ax",%progbits
  21              		.align	2
  22              		.global	RCC_DeInit
  23              		.thumb
  24              		.thumb_func
  26              	RCC_DeInit:
  27              	.LFB123:
  28              		.file 1 "Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c"
   1:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
   2:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @version V1.5.0
   6:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @date    06-March-2015
   7:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:
   9:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           + Internal/external clocks, PLL, CSS and MCO configuration
  10:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           + System, AHB and APB busses clocks configuration
  11:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           + Peripheral clocks configuration
  12:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           + Interrupts and flags management
  13:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  14:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  @verbatim                
  15:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
  16:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                       ##### RCC specific features #####
  17:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
  18:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     [..]  
  19:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  20:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  21:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  22:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       SRAM, Flash and JTAG.
  23:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  24:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  25:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  26:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  27:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           are assigned to be used for debug purpose.
  28:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     [..]          
  29:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       Once the device started from reset, the user application has to:        
  30:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  31:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           (if the application needs higher frequency/performance)
  32:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  34:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)                       
  37:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  @endverbatim    
  38:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  39:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @attention
  40:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  41:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
  42:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  43:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  44:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * You may not use this file except in compliance with the License.
  45:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * You may obtain a copy of the License at:
  46:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  47:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  48:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  49:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * Unless required by applicable law or agreed to in writing, software 
  50:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  51:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  52:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * See the License for the specific language governing permissions and
  53:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * limitations under the License.
  54:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  55:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  56:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  57:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  58:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  59:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  60:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  61:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  62:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  63:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  64:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  65:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  66:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  67:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  68:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
  69:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  70:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  71:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  72:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  73:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  74:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  75:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  76:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  77:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  78:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  79:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  80:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  81:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  82:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  83:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  84:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  85:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  86:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  87:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  88:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  89:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLSAION bit */
  90:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLSAION_BitNumber        0x1C
  91:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLSAION_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLSAION_BitNumber * 4))
  92:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  93:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  94:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  95:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  96:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  97:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  98:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  99:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
 100:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
 101:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
 102:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
 103:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
 104:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
 105:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
 106:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 107:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 108:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 109:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 110:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 111:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 112:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 113:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 114:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- DCKCFGR Register ---*/
 115:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of TIMPRE bit */
 116:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define DCKCFGR_OFFSET            (RCC_OFFSET + 0x8C)
 117:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define TIMPRE_BitNumber          0x18
 118:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define DCKCFGR_TIMPRE_BB         (PERIPH_BB_BASE + (DCKCFGR_OFFSET * 32) + (TIMPRE_BitNumber * 4))
 119:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 120:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 121:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 122:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 123:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 124:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 125:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 126:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 127:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 128:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 129:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 130:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 131:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 132:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 133:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 134:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 135:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 136:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* BDCR register base address */
 137:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 138:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 139:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 140:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 141:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 142:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 143:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 144:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 145:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 146:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 147:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 148:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
 149:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 150:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 151:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 152:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 153:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 154:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===================================================================================
 155:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ##### Internal and  external clocks, PLL, CSS and MCO configuration functions #####
 156:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===================================================================================  
 157:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     [..]
 158:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the internal/external clocks,
 159:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       PLLs, CSS and MCO pins.
 160:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 161:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 162:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           the PLL as System clock source.
 163:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 164:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 165:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           clock source.
 166:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 167:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 168:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 169:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 170:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 171:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 172:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 173:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 168 MHz)
 174:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 175:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 176:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 177:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 178:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           high-quality audio performance on the I2S interface or SAI interface in case 
 179:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           of STM32F429x/439x devices.
 180:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 181:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) PLLSAI clocked by (HSI or HSE), used to generate an accurate clock to SAI 
 182:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           interface and LCD TFT controller available only for STM32F42xxx/43xxx devices.
 183:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 184:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) CSS (Clock security system), once enable and if a HSE clock failure occurs 
 185:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          (HSE used directly or through PLL as System clock source), the System clock
 186:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          is automatically switched to HSI and an interrupt is generated if enabled. 
 187:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 188:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          exception vector.   
 189:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 190:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 191:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PA8 pin.
 192:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 193:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 194:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PC9 pin.
 195:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  @endverbatim
 196:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 197:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 198:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 199:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 200:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 201:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 202:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 203:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 204:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 205:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 206:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 207:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 208:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - Peripheral clocks  
 209:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 210:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 211:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 212:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 213:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 214:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
  29              		.loc 1 214 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 215:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 216:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  34              		.loc 1 216 0
  35 0000 4FF46053 		mov	r3, #14336
  36 0004 C4F20203 		movt	r3, 16386
 217:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 218:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 219:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  37              		.loc 1 219 0
  38 0008 0022     		movs	r2, #0
 216:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  39              		.loc 1 216 0
  40 000a 1968     		ldr	r1, [r3]
  41 000c 41F00101 		orr	r1, r1, #1
 214:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
  42              		.loc 1 214 0
  43 0010 30B4     		push	{r4, r5}
  44              	.LCFI0:
  45              		.cfi_def_cfa_offset 8
  46              		.cfi_offset 4, -8
  47              		.cfi_offset 5, -4
 216:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  48              		.loc 1 216 0
  49 0012 1960     		str	r1, [r3]
  50              		.loc 1 219 0
  51 0014 9A60     		str	r2, [r3, #8]
 220:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 221:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
 222:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xEAF6FFFF;
  52              		.loc 1 222 0
  53 0016 1D68     		ldr	r5, [r3]
 223:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 224:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 225:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
 226:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 227:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset PLLI2SCFGR register */
 228:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = 0x20003000;
  54              		.loc 1 228 0
  55 0018 4FF44050 		mov	r0, #12288
 229:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 230:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
 231:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = 0x24003000;
  56              		.loc 1 231 0
  57 001c 0146     		mov	r1, r0
 225:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  58              		.loc 1 225 0
  59 001e 43F21004 		movw	r4, #12304
 222:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  60              		.loc 1 222 0
  61 0022 25F0A855 		bic	r5, r5, #352321536
  62 0026 25F41025 		bic	r5, r5, #589824
 225:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  63              		.loc 1 225 0
  64 002a C2F20044 		movt	r4, 9216
  65              		.loc 1 231 0
  66 002e C2F20041 		movt	r1, 9216
 228:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  67              		.loc 1 228 0
  68 0032 C2F20000 		movt	r0, 8192
 222:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  69              		.loc 1 222 0
  70 0036 1D60     		str	r5, [r3]
 225:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  71              		.loc 1 225 0
  72 0038 5C60     		str	r4, [r3, #4]
 228:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  73              		.loc 1 228 0
  74 003a C3F88400 		str	r0, [r3, #132]
  75              		.loc 1 231 0
  76 003e C3F88810 		str	r1, [r3, #136]
 232:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  
 233:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 234:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  77              		.loc 1 234 0
  78 0042 1968     		ldr	r1, [r3]
  79 0044 21F48021 		bic	r1, r1, #262144
  80 0048 1960     		str	r1, [r3]
 235:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 236:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 237:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
 238:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 239:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
 240:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = 0x00000000; 
 241:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
  81              		.loc 1 241 0
  82 004a 30BC     		pop	{r4, r5}
 237:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  83              		.loc 1 237 0
  84 004c DA60     		str	r2, [r3, #12]
 240:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
  85              		.loc 1 240 0
  86 004e C3F88C20 		str	r2, [r3, #140]
  87              		.loc 1 241 0
  88 0052 7047     		bx	lr
  89              		.cfi_endproc
  90              	.LFE123:
  92              		.section	.text.RCC_HSEConfig,"ax",%progbits
  93              		.align	2
  94              		.global	RCC_HSEConfig
  95              		.thumb
  96              		.thumb_func
  98              	RCC_HSEConfig:
  99              	.LFB124:
 242:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 243:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 244:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 245:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 246:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 247:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 248:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 249:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 250:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 251:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 252:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 253:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 254:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         function.    
 255:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 256:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 257:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 258:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 259:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 260:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 261:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 262:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 263:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 264:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 100              		.loc 1 264 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              	.LVL0:
 265:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 266:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 105              		.loc 1 266 0
 106 0000 0528     		cmp	r0, #5
 107 0002 18BF     		it	ne
 108 0004 0128     		cmpne	r0, #1
 264:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 109              		.loc 1 264 0
 110 0006 10B5     		push	{r4, lr}
 111              	.LCFI1:
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 4, -8
 114              		.cfi_offset 14, -4
 264:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 115              		.loc 1 264 0
 116 0008 0446     		mov	r4, r0
 117              		.loc 1 266 0
 118 000a 07D9     		bls	.L3
 119              		.loc 1 266 0 is_stmt 0 discriminator 1
 120 000c 40F20000 		movw	r0, #:lower16:.LC0
 121              	.LVL1:
 122 0010 C0F20000 		movt	r0, #:upper16:.LC0
 123 0014 4FF48571 		mov	r1, #266
 124 0018 FFF7FEFF 		bl	assert_failed
 125              	.LVL2:
 126              	.L3:
 267:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 268:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 269:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 127              		.loc 1 269 0 is_stmt 1
 128 001c 43F60203 		movw	r3, #14338
 129 0020 C4F20203 		movt	r3, 16386
 130 0024 0022     		movs	r2, #0
 131 0026 1A70     		strb	r2, [r3]
 270:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 271:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 272:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 132              		.loc 1 272 0
 133 0028 1C70     		strb	r4, [r3]
 134 002a 10BD     		pop	{r4, pc}
 135              		.cfi_endproc
 136              	.LFE124:
 138              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 139              		.align	2
 140              		.global	RCC_WaitForHSEStartUp
 141              		.thumb
 142              		.thumb_func
 144              	RCC_WaitForHSEStartUp:
 145              	.LFB125:
 273:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 274:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 275:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 276:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 277:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 278:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 279:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 280:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 281:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 282:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 283:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 284:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 285:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 286:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 287:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 288:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 146              		.loc 1 288 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 8
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
 151 0000 82B0     		sub	sp, sp, #8
 152              	.LCFI2:
 153              		.cfi_def_cfa_offset 8
 289:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 154              		.loc 1 289 0
 155 0002 0023     		movs	r3, #0
 156              	.LBB6:
 157              	.LBB7:
 290:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 291:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 292:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 293:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   do
 294:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 295:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 296:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     startupcounter++;
 297:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 298:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 299:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 300:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 301:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = SUCCESS;
 302:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 303:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
 304:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 305:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = ERROR;
 306:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 307:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return (status);
 308:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 309:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 310:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 311:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 312:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 313:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 314:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 315:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 316:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 317:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 318:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 319:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 320:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 321:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 322:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 323:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 324:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 325:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 326:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 327:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 328:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 329:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 330:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 331:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 332:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 333:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 334:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 335:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 336:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 337:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 338:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 339:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 340:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 341:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 342:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 343:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 344:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 345:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 346:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 347:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         system clock source.  
 348:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 349:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 350:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 351:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles.  
 352:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 353:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 354:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 355:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 356:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 357:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 358:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 359:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 360:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 361:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 362:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 363:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 364:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 365:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 366:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 367:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 368:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 369:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 370:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 371:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 372:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 373:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 374:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 375:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 376:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 377:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 378:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 379:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 380:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 381:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 382:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 383:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 384:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 385:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 386:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 387:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 388:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 389:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 390:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 391:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 392:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 393:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 394:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 395:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 396:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 397:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 398:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 399:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 400:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 401:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 402:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 403:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 404:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 405:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 406:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 407:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 408:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 409:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 410:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 411:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 412:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 413:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 414:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 415:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 416:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles. 
 417:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 418:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 419:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 420:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 421:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 422:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 423:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 424:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 425:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 426:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 427:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
 428:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 429:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 430:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 431:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 432:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 433:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 434:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 435:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 436:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 437:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 438:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 439:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 440:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 441:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 442:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 443:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 444:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 445:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 446:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 447:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 448:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 449:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 450:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 451:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 452:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 453:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 454:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 455:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 456:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
 457:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLR: specifies the division factor for I2S, SAI, SYSTEM, SPDIF in STM32F446xx devices
 458:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 459:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
 460:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 461:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 462:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 463:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         correctly.
 464:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 465:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 466:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 467:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 468:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 469:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 470:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 471:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 472:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 473:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 474:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 475:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLR_VALUE(PLLR));
 476:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 477:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 478:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                  (PLLQ << 24) | (PLLR << 28);
 479:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 480:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
 481:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 482:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 483:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 484:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 485:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 486:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 487:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 488:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 489:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 490:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 491:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 492:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 493:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 494:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 495:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 496:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 497:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 498:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 499:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 500:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 501:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 502:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 503:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 504:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 505:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 506:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 507:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 508:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 509:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 510:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 511:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 512:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 513:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 514:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         correctly.
 515:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 516:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 517:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 518:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 519:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 520:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 521:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 522:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 523:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 524:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 525:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 526:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 527:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 528:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 529:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 530:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 531:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 532:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 533:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 534:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 535:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 536:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 537:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 538:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 539:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 540:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 541:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 542:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 543:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 544:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 545:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 546:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 547:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 548:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 549:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F401xx)
 550:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 551:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 552:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 553:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F405xx/407xx, STM32F415xx/417xx 
 554:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         or STM32F401xx devices. 
 555:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 556:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 557:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 558:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 559:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             
 560:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 561:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 562:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 563:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 564:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 565:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 566:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 567:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 568:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 569:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 570:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 571:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 572:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 573:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 574:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 575:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 576:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 577:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 578:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 579:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 580:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F401xx */
 581:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 582:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined(STM32F411xE)
 583:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 584:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 585:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 586:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F411xE devices. 
 587:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 588:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 589:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 590:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 591:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
 592:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SM: specifies the division factor for PLLI2S VCO input clock
 593:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 594:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SM parameter correctly to ensure that the VCO input
 595:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 596:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLI2S jitter.
 597:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
 598:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 599:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 600:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 601:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 602:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 603:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 604:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 605:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 606:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 607:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 608:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 609:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 610:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR, uint32_t PLLI2SM)
 611:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 612:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 613:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 614:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
 615:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 616:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 617:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28) | PLLI2SM;
 618:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 619:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F411xE */
 620:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 621:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx)
 622:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 623:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 624:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 625:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 626:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         
 627:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 628:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 629:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 630:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             
 631:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 632:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 633:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 634:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 635:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 636:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
 637:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 638:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                 
 639:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 640:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 641:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 642:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 643:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 644:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 645:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 646:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
 647:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 648:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 649:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 650:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 651:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 652:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 653:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 654:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 655:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F427_437xx || STM32F429_439xx */
 656:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 657:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
 658:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 659:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 660:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 661:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F446xx devices 
 662:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         
 663:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 664:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 665:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 666:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 667:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SM: specifies the division factor for PLLI2S VCO input clock
 668:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 669:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SM parameter correctly to ensure that the VCO input
 670:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 671:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLI2S jitter.
 672:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
 673:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 674:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 675:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 676:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 677:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
 678:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SP: specifies the division factor for PLL 48Mhz clock output
 679:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 680:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
 681:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
 682:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 683:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                 
 684:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 685:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 686:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 687:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 688:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
 689:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 690:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 691:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 692:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SM, uint32_t PLLI2SN, uint32_t PLLI2SP, uint32_t PLLI2SQ, uint3
 693:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 694:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 695:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
 696:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 697:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SP));
 698:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 699:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 700:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 701:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR =  PLLI2SM | (PLLI2SN << 6) | (((PLLI2SP >> 1) -1) << 16) | (PLLI2SQ << 24) | (PL
 702:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 703:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
 704:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 705:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 706:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S. 
 707:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 708:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 709:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 710:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 711:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 712:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 713:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 714:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 715:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 716:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 717:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 718:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
 719:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 720:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 721:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
 722:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F446xx devices 
 723:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *        
 724:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 725:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 726:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 727:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 728:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLSAIM: specifies the division factor for PLLSAI VCO input clock
 729:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 730:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIM parameter correctly to ensure that the VCO input
 731:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 732:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLSAI jitter.
 733:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
 734:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 735:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 192 and 432.
 736:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 737:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 738:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 739:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLSAIP: specifies the division factor for PLL 48Mhz clock output
 740:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter must be a number in the range {2, 4, 6, or 8}.
 741:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
 742:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 743:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 2 and 15.
 744:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 745:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 746:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 747:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIM, uint32_t PLLSAIN, uint32_t PLLSAIP, uint32_t PLLSAIQ)
 748:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 749:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 750:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIM_VALUE(PLLSAIM));
 751:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 752:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIP));
 753:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 754:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 755:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = PLLSAIM | (PLLSAIN << 6) | (((PLLSAIP >> 1) -1) << 16)  | (PLLSAIQ << 24);
 756:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 757:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
 758:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 759:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 760:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 761:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 762:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
 763:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 764:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *        
 765:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 766:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 767:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 768:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             
 769:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 770:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 771:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 772:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 773:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           
 774:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 775:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 776:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            
 777:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLSAIR: specifies the division factor for LTDC clock
 778:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 779:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 780:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 781:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 782:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
 783:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 784:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 785:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 786:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 787:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 788:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 789:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 790:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 791:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 792:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 793:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 794:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLSAI. 
 795:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 796:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 797:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *       
 798:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
 799:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
 800:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 801:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 802:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLSAICmd(FunctionalState NewState)
 803:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 804:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 805:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 806:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 807:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 808:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 809:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 810:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 811:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 812:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 813:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 814:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 815:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 816:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 817:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 818:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 819:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 820:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 821:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 822:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 823:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 824:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 825:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 826:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 827:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 828:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 829:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 830:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 831:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 832:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 833:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 834:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 835:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 836:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 837:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 838:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 839:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 840:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 841:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 842:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 843:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 844:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 845:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 846:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 847:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 848:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 849:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 850:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 851:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 852:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 853:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 854:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 855:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 856:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 857:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 858:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 859:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 860:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 861:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 862:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 863:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 864:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 865:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 866:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 867:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 868:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 869:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 870:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 871:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 872:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 873:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 874:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 875:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 876:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 877:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 878:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 879:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 880:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 881:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 882:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 883:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 884:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 885:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 886:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 887:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 888:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 889:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 890:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 891:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 892:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 893:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 894:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 895:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 896:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 897:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 898:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 899:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 900:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 901:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 902:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 903:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 904:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 905:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 906:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 907:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 908:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 909:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 910:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 911:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 912:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       ##### System, AHB and APB busses clocks configuration functions #####
 913:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 914:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     [..]
 915:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the System, AHB, APB1 and 
 916:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       APB2 busses clocks.
 917:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 918:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 919:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           HSE and PLL.
 920:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable 
 921:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped 
 922:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 923:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           from AHB clock through configurable prescalers and used to clock 
 924:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           the peripherals mapped on these busses. You can use 
 925:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 926:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 927:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 928:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 929:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              from an external clock mapped on the I2S_CKIN pin. 
 930:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              You have to use RCC_I2SCLKConfig() function to configure this clock. 
 931:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 932:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 933:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              functions to configure this clock. 
 934:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 935:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              to work correctly, while the SDIO require a frequency equal or lower than
 936:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              to 48. This clock is derived of the main PLL through PLLQ divider.
 937:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         (+@) IWDG clock which is always the LSI clock.
 938:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        
 939:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) For STM32F405xx/407xx and STM32F415xx/417xx devices, the maximum frequency 
 940:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          of the SYSCLK and HCLK is 168 MHz, PCLK2 84 MHz and PCLK1 42 MHz. Depending 
 941:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          on the device voltage range, the maximum frequency should be adapted accordingly:
 942:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 943:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 944:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 945:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 946:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 947:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 948:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 949:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 950:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
 951:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 952:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 953:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 954:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 955:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 956:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 957:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 958:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120| 
 959:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 960:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140| 
 961:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 962:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
 963:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +---------------|----------------|----------------|-----------------|-----------------+ 
 964:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) For STM32F42xxx/43xxx devices, the maximum frequency of the SYSCLK and HCLK is 180 MHz, 
 965:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           PCLK2 90 MHz and PCLK1 45 MHz. Depending on the device voltage range, the maximum 
 966:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
 967:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 968:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 969:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 970:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 971:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 972:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 973:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 974:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 975:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
 976:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 977:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 978:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 979:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 980:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 981:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 982:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 983:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120| 
 984:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 985:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140| 
 986:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 987:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
 988:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 989:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
 990:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
 991:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****    
 992:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) For STM32F401xx devices, the maximum frequency of the SYSCLK and HCLK is 84 MHz, 
 993:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           PCLK2 84 MHz and PCLK1 42 MHz. Depending on the device voltage range, the maximum 
 994:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
 995:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 996:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 997:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 998:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 999:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1000:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
1001:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1002:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
1003:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
1004:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
1005:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1006:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
1007:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
1008:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
1009:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  | 
1010:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1011:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1012:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) For STM32F411xE devices, the maximum frequency of the SYSCLK and HCLK is 100 MHz, 
1013:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           PCLK2 100 MHz and PCLK1 50 MHz. Depending on the device voltage range, the maximum 
1014:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1015:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1016:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1017:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1018:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1019:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1020:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1021:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
1022:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1023:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 64 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
1024:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1025:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|64 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
1026:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1027:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 100|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
1028:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1029:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 100|72 < HCLK <= 90  |64 < HCLK <= 80  |
1030:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1031:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |       NA       |90 < HCLK <= 100 |80 < HCLK <= 96  |
1032:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1033:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |       NA       |        NA       |96 < HCLK <= 100 |
1034:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1035:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1036:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
1037:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            (++) when VOS = '0', the maximum value of fHCLK = 144MHz. 
1038:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            (++) when VOS = '1', the maximum value of fHCLK = 168MHz. 
1039:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           [..] 
1040:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           On STM32F42xxx/43xxx devices:
1041:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 120MHz.
1042:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 144MHz.
1043:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11', the maximum value of f  is 168MHz 
1044:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           [..]  
1045:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           On STM32F401x devices:
1046:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 64MHz.
1047:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 84MHz.
1048:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           On STM32F411xE devices:
1049:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01' the maximum value of fHCLK is 64MHz.
1050:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10' the maximum value of fHCLK is 84MHz.
1051:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11' the maximum value of fHCLK is 100MHz.
1052:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1053:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
1054:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1055:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
1056:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
1057:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1058:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1059:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1060:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
1061:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
1062:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
1063:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
1064:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
1065:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
1066:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
1067:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
1068:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
1069:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
1070:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
1071:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
1072:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1073:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI: HSI selected as system clock source
1074:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE: HSE selected as system clock source
1075:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_
1076:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F
1077:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1078:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1079:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
1080:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1081:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1082:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1083:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1084:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
1085:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1086:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
1087:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1088:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
1089:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
1090:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1091:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
1092:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
1093:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1094:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
1095:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
1096:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1097:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1098:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1099:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
1100:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
1101:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
1102:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the following:
1103:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
1104:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
1105:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
1106:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x0C: PLL R used as system clock (only for STM32F446xx devices)
1107:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1108:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
1109:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1110:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
1111:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1112:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1113:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1114:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
1115:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
1116:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
1117:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
1118:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
1119:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
1120:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
1121:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1122:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
1123:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
1124:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
1125:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
1126:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
1127:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
1128:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
1129:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
1130:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
1131:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1132:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1133:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
1134:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1135:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1136:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1137:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1138:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
1139:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1140:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
1141:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1142:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
1143:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
1144:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1145:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
1146:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
1147:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1148:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
1149:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
1150:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1151:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1152:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1153:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1154:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
1155:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
1156:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1157:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1158:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
1159:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
1160:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
1161:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
1162:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
1163:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1164:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1165:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
1166:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1167:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1168:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1169:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1170:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
1171:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1172:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
1173:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1174:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
1175:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
1176:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1177:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
1178:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
1179:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1180:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
1181:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
1182:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1183:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1184:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1185:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
1186:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
1187:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1188:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1189:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
1190:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
1191:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
1192:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
1193:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
1194:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1195:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1196:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
1197:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1198:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1199:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1200:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1201:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
1202:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1203:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
1204:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1205:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
1206:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
1207:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1208:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
1209:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
1210:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1211:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
1212:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
1213:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1214:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1215:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1216:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
1217:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.       
1218:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
1219:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
1220:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
1221:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
1222:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1223:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
1224:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
1225:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
1226:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
1227:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
1228:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
1229:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
1230:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
1231:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1232:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                have wrong result.
1233:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                
1234:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1235:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
1236:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
1237:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
1238:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
1239:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *     
1240:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
1241:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
1242:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
1243:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
1244:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
1245:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
1246:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1247:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1248:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
1249:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1250:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
1251:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)  
1252:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t pllr = 2;
1253:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
1254:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1255:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1256:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
1257:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1258:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (tmp)
1259:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1260:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   case 0x00:  /* HSI used as system clock source */
1261:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
1262:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     break;
1263:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   case 0x04:  /* HSE used as system clock  source */
1264:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
1265:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     break;
1266:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   case 0x08:  /* PLL P used as system clock  source */
1267:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
1268:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1269:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     SYSCLK = PLL_VCO / PLLP
1270:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     */    
1271:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
1272:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
1273:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
1274:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     if (pllsource != 0)
1275:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     {
1276:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* HSE used as PLL clock source */
1277:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
1278:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     }
1279:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     else
1280:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     {
1281:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* HSI used as PLL clock source */
1282:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
1283:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     }
1284:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
1285:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
1286:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
1287:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     break;
1288:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1289:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
1290:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   case 0x0C:  /* PLL R used as system clock  source */
1291:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1292:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     SYSCLK = PLL_VCO / PLLR
1293:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     */    
1294:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
1295:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
1296:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
1297:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     if (pllsource != 0)
1298:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     {
1299:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* HSE used as PLL clock source */
1300:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
1301:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     }
1302:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     else
1303:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     {
1304:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* HSI used as PLL clock source */
1305:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
1306:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     }
1307:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
1308:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
1309:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
1310:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     break;
1311:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
1312:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
1313:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   default:
1314:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
1315:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     break;
1316:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1317:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
1318:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1319:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
1320:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
1321:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
1322:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
1323:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
1324:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
1325:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1326:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
1327:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
1328:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
1329:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
1330:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
1331:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
1332:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1333:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
1334:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
1335:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
1336:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
1337:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
1338:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
1339:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1340:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1341:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1342:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
1343:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1344:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1345:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
1346:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
1347:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
1348:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
1349:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
1350:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****               ##### Peripheral clocks configuration functions #####
1351:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
1352:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     [..] This section provide functions allowing to configure the Peripheral clocks. 
1353:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1354:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) The RTC clock which is derived from the LSI, LSE or HSE clock divided 
1355:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           by 2 to 31.
1356:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
1357:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) After restart from Reset or wakeup from STANDBY, all peripherals are off
1358:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           except internal SRAM, Flash and JTAG. Before to start using a peripheral 
1359:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           you have to enable its interface clock. You can do this using 
1360:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           RCC_AHBPeriphClockCmd(), RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
1361:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1362:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) To reset the peripherals configuration (to the default state after device reset)
1363:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
1364:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           RCC_APB1PeriphResetCmd() functions.
1365:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
1366:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) To further reduce power consumption in SLEEP mode the peripheral clocks 
1367:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           can be disabled prior to executing the WFI or WFE instructions. 
1368:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           You can do this using RCC_AHBPeriphClockLPModeCmd(), 
1369:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           RCC_APB2PeriphClockLPModeCmd() and RCC_APB1PeriphClockLPModeCmd() functions.  
1370:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1371:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
1372:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
1373:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1374:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1375:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1376:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
1377:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
1378:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
1379:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
1380:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
1381:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
1382:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
1383:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
1384:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
1385:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
1386:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1387:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
1388:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
1389:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
1390:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
1391:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
1392:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
1393:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
1394:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
1395:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
1396:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
1397:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RTC clock source).
1398:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
1399:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1400:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1401:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
1402:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1403:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1404:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1405:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1406:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
1407:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1408:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
1409:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
1410:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
1411:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1412:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
1413:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
1414:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1415:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
1416:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
1417:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1418:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Store the new value */
1419:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
1420:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1421:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
1422:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1423:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
1424:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1425:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1426:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1427:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1428:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1429:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1430:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1431:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1432:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1433:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1434:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1435:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1436:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1437:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1438:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
1439:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1440:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1441:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1442:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1443:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1444:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1445:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1446:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1447:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1448:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1449:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1450:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1451:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1452:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1453:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1454:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
1455:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1456:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1457:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
1458:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1459:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1460:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1461:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1462:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SAPBx: specifies the APBx I2S clock source.
1463:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1464:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SBus_APB1: I2S peripheral instance is on APB1 Bus
1465:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SBus_APB2: I2S peripheral instance is on APB2 Bus
1466:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1467:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1468:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1469:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1470:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1471:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source                                
1472:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_PLL: PLL clock used as I2S clock source
1473:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as I2S clock source
1474:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1475:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1476:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SAPBx, uint32_t RCC_I2SCLKSource)
1477:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1478:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1479:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1480:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2S_APBx(RCC_I2SAPBx));
1481:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1482:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if(RCC_I2SAPBx == RCC_I2SBus_APB1)
1483:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1484:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Clear APB1 I2Sx clock source selection bits */
1485:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_I2S1SRC;
1486:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Set new APB1 I2Sx clock source*/
1487:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= RCC_I2SCLKSource;
1488:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1489:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1490:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1491:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Clear APB2 I2Sx clock source selection  bits */
1492:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_I2S2SRC;
1493:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Set new APB2 I2Sx clock source */
1494:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= (RCC_I2SCLKSource << 2);
1495:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1496:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1497:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1498:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1499:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAIx clock source (SAIxCLK).
1500:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the SAIx APB clock.
1501:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1502:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIInstance: specifies the SAIx clock source.
1503:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1504:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIInstance_SAI1: SAI1 clock source selection
1505:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIInstance_SAI2: SAI2 clock source selections
1506:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1507:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SAICLKSource: specifies the SAI clock source.
1508:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1509:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLLSAI: PLLSAI clock used as SAI clock source
1510:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLLI2S: PLLI2S clock used as SAI clock source                 
1511:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLL: PLL clock used as SAI clock source
1512:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock source
1513:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1514:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1515:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SAICLKConfig(uint32_t RCC_SAIInstance, uint32_t RCC_SAICLKSource)
1516:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1517:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1518:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAICLK_SOURCE(RCC_SAICLKSource));
1519:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAI_INSTANCE(RCC_SAIInstance));
1520:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1521:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if(RCC_SAIInstance == RCC_SAIInstance_SAI1)
1522:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1523:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Clear SAI1 clock source selection bits */
1524:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_SAI1SRC;
1525:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Set new SAI1 clock source */
1526:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= RCC_SAICLKSource;
1527:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1528:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1529:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1530:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Clear SAI2 clock source selection bits */
1531:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_SAI2SRC;
1532:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Set new SAI2 clock source */
1533:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= (RCC_SAICLKSource << 2);
1534:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1535:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1536:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
1537:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1538:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
1539:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1540:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1541:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1542:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1543:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1544:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1545:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1546:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1547:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1548:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1549:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1550:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1551:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1552:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1553:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1554:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
1555:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1556:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1557:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1558:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockA clock source selection.
1559:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
1560:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1561:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *       
1562:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1563:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1564:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockACLKSource: specifies the SAI Block A clock source.
1565:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1566:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1567:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1568:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1569:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1570:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
1571:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block A clock
1572:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1573:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1574:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
1575:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1576:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1577:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1578:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1579:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
1580:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1581:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1582:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1583:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1584:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
1585:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1586:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set SAI Block A source selection value */
1587:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockACLKSource;
1588:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1589:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
1590:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1591:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1592:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1593:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1594:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockB clock source selection.
1595:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
1596:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1597:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *       
1598:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1599:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1600:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockBCLKSource: specifies the SAI Block B clock source.
1601:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1602:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1603:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1604:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1605:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1606:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1607:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block B clock
1608:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1609:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1610:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
1611:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1612:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1613:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1614:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1615:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
1616:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1617:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1618:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1619:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
1620:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
1621:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1622:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set SAI Block B source selection value */
1623:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockBCLKSource;
1624:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1625:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
1626:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1627:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1628:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
1629:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1630:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1631:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLI2S.
1632:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
1633:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1634:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
1635:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLI2S.
1636:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              
1637:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLI2SDivQ: specifies the PLLI2S division factor for SAI1 clock .
1638:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1639:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
1640:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              
1641:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1642:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1643:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
1644:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1645:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1646:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1647:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1648:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
1649:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1650:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1651:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1652:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] bits */
1653:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
1654:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1655:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PLLI2SDIVQ values */
1656:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= (RCC_PLLI2SDivQ - 1);
1657:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1658:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
1659:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1660:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1661:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1662:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1663:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLSAI.
1664:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
1665:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1666:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *        
1667:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1668:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
1669:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivQ: specifies the PLLSAI division factor for SAI1 clock .
1670:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1671:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
1672:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              
1673:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1674:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1675:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
1676:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1677:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1678:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1679:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1680:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
1681:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1682:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1683:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1684:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
1685:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
1686:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1687:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVQ values */
1688:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
1689:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1690:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
1691:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1692:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1693:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1694:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1695:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the LTDC clock Divider coming from PLLSAI.
1696:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
1697:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The LTDC peripheral is only available with STM32F429xx/439xx Devices.
1698:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *      
1699:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1700:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
1701:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivR: specifies the PLLSAI division factor for LTDC clock .
1702:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
1703:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1704:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div2: LTDC clock = f(PLLSAI_R)/2
1705:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div4: LTDC clock = f(PLLSAI_R)/4
1706:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div8: LTDC clock = f(PLLSAI_R)/8
1707:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
1708:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            
1709:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1710:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1711:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
1712:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1713:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1714:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1715:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1716:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
1717:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1718:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1719:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1720:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PLLSAIDIVR[2:0] bits */
1721:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
1722:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1723:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVR values */
1724:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_PLLSAIDivR;
1725:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1726:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
1727:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1728:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1729:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1730:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1731:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the Timers clocks prescalers selection.
1732:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
1733:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices. 
1734:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
1735:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_TIMCLKPrescaler : specifies the Timers clocks prescalers selection
1736:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
1737:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescDesactivated: The Timers kernels clocks prescaler is 
1738:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1 or 2, 
1739:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 2] if PPREx is corresponding to 
1740:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                 division by 4 or more.
1741:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                   
1742:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescActivated: The Timers kernels clocks prescaler is 
1743:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1, 2 or 4, 
1744:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
1745:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                 to division by 8 or more.
1746:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1747:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1748:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
1749:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1750:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1751:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));
1752:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1753:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
1754:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1755:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1756:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1757:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
1758:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1759:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1760:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.   
1761:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1762:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1763:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1764:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1765:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1766:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1767:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1768:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1769:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1770:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1771:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1772:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
1773:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)  
1774:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1775:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1776:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CCMDATARAMEN CCM data RAM interface clock
1777:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1778:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1779:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices)  
1780:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1781:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1782:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1783:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1784:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1785:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1786:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1787:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1788:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1789:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1790:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1791:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1792:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1793:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
1794:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1795:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1796:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1797:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1798:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
1799:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1800:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1801:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1802:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
1803:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1804:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1805:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1806:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1807:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
1808:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1809:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1810:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1811:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1812:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1813:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1814:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1815:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1816:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1817:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1818:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1819:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1820:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1821:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1822:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1823:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1824:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1825:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1826:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1827:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1828:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1829:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1830:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
1831:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1832:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1833:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1834:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
1835:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1836:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1837:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1838:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
1839:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1840:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
1841:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1842:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1843:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1844:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1845:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: 
1846:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F429x/439x devices)
1847:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F446xx devices)
1848:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1849:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1850:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1851:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1852:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1853:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1854:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1855:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
1856:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1857:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1858:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1859:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1860:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
1861:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1862:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1863:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1864:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
1865:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1866:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1867:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx */
1868:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1869:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1870:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1871:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1872:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1873:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1874:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1875:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1876:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1877:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1878:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1879:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1880:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1881:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1882:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1883:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1884:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1885:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1886:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1887:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1888:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:   SPDIF RX clock (STM32F446xx devices) 
1889:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1890:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1891:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1892:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1893:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1894:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1895:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1896:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:   FMPI2C1 clock
1897:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1898:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1899:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock (STM32F446xx devices)
1900:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1901:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1902:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
1903:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
1904:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1905:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1906:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1907:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1908:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1909:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1910:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1911:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
1912:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1913:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1914:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1915:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1916:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
1917:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1918:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1919:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1920:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
1921:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1922:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1923:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1924:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1925:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1926:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1927:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1928:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.
1929:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1930:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1931:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1932:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1933:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1934:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1935:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1936:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1937:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1938:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1939:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1940:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
1941:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1942:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1943:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1944:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1945:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
1946:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
1947:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx devices)
1948:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices) 
1949:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
1950:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1951:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1952:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1953:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1954:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1955:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1956:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1957:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1958:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1959:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1960:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1961:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1962:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
1963:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1964:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1965:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1966:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
1967:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1968:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1969:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1970:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1971:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
1972:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
1973:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1974:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
1975:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
1976:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
1977:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
1978:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
1979:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
1980:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1981:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1982:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
1983:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:   GPIOJ clock (STM32F42xxx/43xxx devices) 
1984:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:   GPIOK clock (STM32F42xxx/43xxxdevices)   
1985:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
1986:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
1987:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
1988:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:   DMA2D clock (STM32F429xx/439xx devices)   
1989:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
1990:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
1991:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                  
1992:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1993:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1994:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1995:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1996:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1997:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1998:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1999:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
2000:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2001:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2002:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2003:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2004:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
2005:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2006:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2007:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2008:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
2009:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2010:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2011:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2012:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2013:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
2014:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
2015:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2016:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2017:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2018:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2019:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
2020:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
2021:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2022:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2023:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2024:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2025:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2026:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2027:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2028:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
2029:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2030:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2031:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2032:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2033:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
2034:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2035:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2036:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2037:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
2038:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2039:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2040:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2041:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
2042:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2043:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
2044:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
2045:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: 
2046:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F429x/439x devices)
2047:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F446xx devices)
2048:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2049:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2050:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2051:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2052:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2053:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2054:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2055:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
2056:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2057:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2058:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2059:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2060:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
2061:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2062:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2063:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2064:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
2065:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2066:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2067:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx */
2068:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2069:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2070:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
2071:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
2072:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2073:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2074:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2075:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2076:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2077:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2078:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2079:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2080:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2081:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2082:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2083:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2084:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2085:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:   SPDIF RX clock (STM32F446xx devices) 
2086:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2087:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2088:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2089:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2090:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2091:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2092:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2093:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:   FMPI2C1 clock
2094:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2095:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2096:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock(STM32F446xx devices)
2097:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2098:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2099:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2100:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock  
2101:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2102:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2103:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2104:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2105:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2106:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2107:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2108:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
2109:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2110:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2111:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2112:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
2113:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2114:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2115:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2116:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
2117:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2118:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2119:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2120:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2121:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
2122:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
2123:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2124:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2125:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2126:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2127:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2128:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2129:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2130:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2131:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2132:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2133:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock  
2134:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2135:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2136:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2137:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2138:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2139:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2140:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx devices)
2141:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices) 
2142:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2143:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2144:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2145:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2146:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2147:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2148:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2149:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2150:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
2151:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2152:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2153:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2154:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
2155:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2156:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2157:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2158:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
2159:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2160:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2161:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2162:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2163:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
2164:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2165:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
2166:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2167:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2168:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
2169:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2170:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
2171:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
2172:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
2173:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
2174:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
2175:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
2176:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2177:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2178:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
2179:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
2180:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)   
2181:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
2182:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
2183:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
2184:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
2185:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices) 
2186:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
2187:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
2188:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
2189:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
2190:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
2191:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
2192:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2193:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2194:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2195:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2196:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2197:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2198:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2199:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
2200:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2201:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2202:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2203:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
2204:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2205:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2206:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2207:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
2208:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2209:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2210:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2211:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2212:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
2213:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2214:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           power consumption.
2215:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2216:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2217:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
2218:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2219:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2220:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2221:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2222:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
2223:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
2224:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2225:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2226:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2227:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2228:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2229:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2230:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2231:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
2232:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2233:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2234:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2235:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
2236:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2237:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2238:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2239:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
2240:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2241:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2242:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2243:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
2244:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2245:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
2246:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2247:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
2248:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2249:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2250:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
2251:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: 
2252:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F429x/439x devices)
2253:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F446xx devices) 
2254:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2255:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2256:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2257:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2258:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2259:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2260:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2261:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
2262:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2263:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2264:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2265:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
2266:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2267:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2268:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2269:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
2270:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2271:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2272:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx */
2273:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2274:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2275:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
2276:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2277:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
2278:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2279:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2280:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
2281:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2282:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2283:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2284:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2285:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2286:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2287:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2288:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2289:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2290:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2291:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2292:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2293:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2294:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:   SPDIF RX clock (STM32F446xx devices) 
2295:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2296:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2297:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2298:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2299:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2300:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2301:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2302:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:   FMPI2C1 clock
2303:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2304:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2305:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock (STM32F446xx devices)
2306:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2307:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2308:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2309:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
2310:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2311:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2312:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2313:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2314:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2315:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2316:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2317:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
2318:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2319:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2320:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2321:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
2322:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2323:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2324:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2325:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
2326:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2327:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2328:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2329:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2330:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
2331:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2332:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
2333:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2334:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2335:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
2336:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2337:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2338:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2339:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2340:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2341:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2342:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2343:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2344:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2345:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2346:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
2347:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2348:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2349:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2350:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2351:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2352:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2353:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx devices)
2354:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices)
2355:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2356:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2357:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2358:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2359:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2360:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2361:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2362:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2363:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
2364:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2365:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2366:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2367:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
2368:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2369:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2370:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2371:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
2372:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2373:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2374:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2375:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2376:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief Configures the External Low Speed oscillator mode (LSE mode).
2377:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note This mode is only available for STM32F411xx/STM32F446xx devices.
2378:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  Mode: specifies the LSE mode.
2379:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2380:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
2381:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
2382:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2383:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2384:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSEModeConfig(uint8_t RCC_Mode)
2385:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2386:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2387:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE_MODE(RCC_Mode));
2388:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
2389:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
2390:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2391:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2392:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2393:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2394:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2395:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2396:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2397:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2398:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2399:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
2400:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2401:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief Configures the 48MHz clock Source.
2402:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2403:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the 48MHz clock Source.
2404:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2405:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_48MHZCLKSource_PLL: 48MHz from PLL selected.
2406:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_48MHZCLKSource_PLLSAI: 48MHz from PLLSAI selected.
2407:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2408:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2409:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_48MHzClockSourceConfig(uint8_t RCC_ClockSource)
2410:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2411:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2412:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_48MHZ_CLOCKSOURCE(RCC_ClockSource));
2413:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2414:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_48MHZCLKSource_PLLSAI)
2415:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2416:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_CK48MSEL);
2417:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2418:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2419:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2420:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_CK48MSEL);
2421:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2422:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2423:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2424:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2425:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief Configures the SDIO clock Source.
2426:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2427:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the SDIO clock Source.
2428:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2429:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SDIOCLKSource_48MHZ: 48MHz clock selected.
2430:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SDIOCLKSource_SYSCLK: system clock selected.
2431:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2432:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2433:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SDIOClockSourceConfig(uint8_t RCC_ClockSource)
2434:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2435:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2436:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SDIO_CLOCKSOURCE(RCC_ClockSource));
2437:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2438:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SDIOCLKSource_SYSCLK)
2439:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2440:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SDIOSEL);
2441:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2442:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2443:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2444:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SDIOSEL);
2445:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2446:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2447:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
2448:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2449:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
2450:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2451:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 clock gating for the specified IPs.
2452:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2453:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1ClockGating: specifies the AHB1 clock gating.
2454:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2455:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_APB1Bridge: AHB1 to APB1 clock
2456:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_APB2Bridge: AHB1 to APB2 clock 
2457:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_CM4DBG: Cortex M4 ETM clock
2458:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_SPARE: Spare clock
2459:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_SRAM: SRAM controller clock
2460:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_FLITF: Flash interface clock
2461:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_RCC: RCC clock
2462:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2463:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2464:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2465:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2466:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1ClockGatingCmd(uint32_t RCC_AHB1ClockGating, FunctionalState NewState)
2467:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2468:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2469:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCKGATING(RCC_AHB1ClockGating));
2470:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2471:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2472:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2473:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2474:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->CKGATENR &= ~RCC_AHB1ClockGating;
2475:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2476:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2477:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2478:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->CKGATENR |= RCC_AHB1ClockGating;
2479:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2480:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2481:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2482:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2483:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief Configures the SPDIFRX clock Source.
2484:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2485:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the SPDIFRX clock Source.
2486:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2487:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SPDIFRXCLKSource_PLLR: SPDIFRX clock from PLL_R selected.
2488:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SPDIFRXCLKSource_PLLI2SP: SPDIFRX clock from PLLI2S_P selected.
2489:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2490:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2491:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SPDIFRXClockSourceConfig(uint8_t RCC_ClockSource)
2492:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2493:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2494:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SPDIFRX_CLOCKSOURCE(RCC_ClockSource));
2495:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
2496:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SPDIFRXCLKSource_PLLI2SP)
2497:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2498:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SPDIFRXSEL);
2499:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2500:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2501:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2502:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SPDIFRXSEL);
2503:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2504:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2505:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2506:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2507:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief Configures the CEC clock Source.
2508:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2509:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the CEC clock Source.
2510:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2511:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_CECCLKSource_HSIDiv488: CEC clock from HSI/488 selected.
2512:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_CECCLKSource_LSE: CEC clock from LSE selected.
2513:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2514:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2515:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_CECClockSourceConfig(uint8_t RCC_ClockSource)
2516:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2517:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2518:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CEC_CLOCKSOURCE(RCC_ClockSource));
2519:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
2520:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_CECCLKSource_LSE)
2521:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2522:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CECSEL);
2523:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2524:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2525:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2526:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CECSEL);
2527:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2528:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2529:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2530:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2531:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief Configures the FMPI2C1 clock Source.
2532:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2533:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the FMPI2C1 clock Source.
2534:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2535:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_APB1: FMPI2C1 clock from APB1 selected.
2536:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_SYSCLK: FMPI2C1 clock from Sytem clock selected.
2537:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_HSI: FMPI2C1 clock from HSI selected.
2538:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2539:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2540:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_FMPI2C1ClockSourceConfig(uint32_t RCC_ClockSource)
2541:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2542:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2543:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FMPI2C1_CLOCKSOURCE(RCC_ClockSource));
2544:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2545:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear FMPI2C1 clock source selection source bits */
2546:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_FMPI2C1SEL;
2547:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set new FMPI2C1 clock source */
2548:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 |= RCC_ClockSource;
2549:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2550:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
2551:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2552:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
2553:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2554:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2555:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
2556:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
2557:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
2558:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
2559:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
2560:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                 ##### Interrupts and flags management functions #####
2561:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
2562:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2563:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
2564:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
2565:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2566:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2567:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2568:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
2569:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
2570:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2571:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
2572:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
2573:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
2574:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
2575:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
2576:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
2577:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)
2578:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
2579:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2580:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2581:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2582:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
2583:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2584:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2585:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
2586:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2587:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2588:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2589:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
2590:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
2591:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2592:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2593:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2594:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
2595:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
2596:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2597:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2598:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2599:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2600:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
2601:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
2602:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2603:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
2604:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
2605:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
2606:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
2607:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLSAIRDY: PLLSAI clock ready (only for STM32F42xxx/43xxx devices)
2608:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
2609:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
2610:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
2611:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
2612:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
2613:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
2614:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
2615:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
2616:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
2617:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
2618:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2619:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
2620:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2621:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
2622:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
2623:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
2624:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2625:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2626:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
2627:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2628:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
2629:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
2630:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
2631:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2632:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
 158              		.loc 1 2632 0
 159 0004 4FF46052 		mov	r2, #14336
 160              	.LBE7:
 161              	.LBE6:
 289:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 162              		.loc 1 289 0
 163 0008 0193     		str	r3, [sp, #4]
 164              	.LVL3:
 165              	.LBB9:
 166              	.LBB8:
 167              		.loc 1 2632 0
 168 000a C4F20202 		movt	r2, 16386
 169              	.LVL4:
 170              	.L12:
 171              		.loc 1 2632 0 is_stmt 0 discriminator 1
 172 000e 1368     		ldr	r3, [r2]
 173              	.LVL5:
2633:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2634:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
2635:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2636:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
2637:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2638:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
2639:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2640:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
2641:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2642:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2643:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the flag position */
2644:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
2645:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 174              		.loc 1 2645 0 is_stmt 1 discriminator 1
 175 0010 9B03     		lsls	r3, r3, #14
 176              	.LVL6:
 177 0012 0FD4     		bmi	.L18
 178              	.LBE8:
 179              	.LBE9:
 296:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 180              		.loc 1 296 0
 181 0014 019B     		ldr	r3, [sp, #4]
 182 0016 0133     		adds	r3, r3, #1
 183 0018 0193     		str	r3, [sp, #4]
 297:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 184              		.loc 1 297 0
 185 001a 019B     		ldr	r3, [sp, #4]
 186 001c B3F5A04F 		cmp	r3, #20480
 187 0020 F5D1     		bne	.L12
 188              	.LVL7:
 189              	.L11:
 190              	.LBB10:
 191              	.LBB11:
2632:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 192              		.loc 1 2632 0
 193 0022 4FF46053 		mov	r3, #14336
 194 0026 C4F20203 		movt	r3, 16386
 195 002a 1868     		ldr	r0, [r3]
 196              	.LVL8:
 197              	.LBE11:
 198              	.LBE10:
 307:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 199              		.loc 1 307 0
 200 002c C0F34040 		ubfx	r0, r0, #17, #1
 201              	.LVL9:
 308:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 202              		.loc 1 308 0
 203 0030 02B0     		add	sp, sp, #8
 204              		@ sp needed
 205 0032 7047     		bx	lr
 206              	.LVL10:
 207              	.L18:
 296:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 208              		.loc 1 296 0
 209 0034 019B     		ldr	r3, [sp, #4]
 210 0036 0133     		adds	r3, r3, #1
 211 0038 0193     		str	r3, [sp, #4]
 297:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 212              		.loc 1 297 0
 213 003a 019B     		ldr	r3, [sp, #4]
 214 003c F1E7     		b	.L11
 215              		.cfi_endproc
 216              	.LFE125:
 218 003e 00BF     		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 219              		.align	2
 220              		.global	RCC_AdjustHSICalibrationValue
 221              		.thumb
 222              		.thumb_func
 224              	RCC_AdjustHSICalibrationValue:
 225              	.LFB126:
 319:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 226              		.loc 1 319 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230              	.LVL11:
 322:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 231              		.loc 1 322 0
 232 0000 1F28     		cmp	r0, #31
 319:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 233              		.loc 1 319 0
 234 0002 10B5     		push	{r4, lr}
 235              	.LCFI3:
 236              		.cfi_def_cfa_offset 8
 237              		.cfi_offset 4, -8
 238              		.cfi_offset 14, -4
 319:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 239              		.loc 1 319 0
 240 0004 0446     		mov	r4, r0
 322:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 241              		.loc 1 322 0
 242 0006 07D9     		bls	.L20
 322:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 243              		.loc 1 322 0 is_stmt 0 discriminator 1
 244 0008 40F20000 		movw	r0, #:lower16:.LC0
 245              	.LVL12:
 246 000c C0F20000 		movt	r0, #:upper16:.LC0
 247 0010 4FF4A171 		mov	r1, #322
 248 0014 FFF7FEFF 		bl	assert_failed
 249              	.LVL13:
 250              	.L20:
 324:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 251              		.loc 1 324 0 is_stmt 1
 252 0018 4FF46053 		mov	r3, #14336
 253 001c C4F20203 		movt	r3, 16386
 254 0020 1A68     		ldr	r2, [r3]
 255              	.LVL14:
 327:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 256              		.loc 1 327 0
 257 0022 22F0F802 		bic	r2, r2, #248
 258              	.LVL15:
 330:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 259              		.loc 1 330 0
 260 0026 42EAC404 		orr	r4, r2, r4, lsl #3
 261              	.LVL16:
 333:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 262              		.loc 1 333 0
 263 002a 1C60     		str	r4, [r3]
 264 002c 10BD     		pop	{r4, pc}
 265              		.cfi_endproc
 266              	.LFE126:
 268 002e 00BF     		.section	.text.RCC_HSICmd,"ax",%progbits
 269              		.align	2
 270              		.global	RCC_HSICmd
 271              		.thumb
 272              		.thumb_func
 274              	RCC_HSICmd:
 275              	.LFB127:
 355:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 276              		.loc 1 355 0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 280              	.LVL17:
 357:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 281              		.loc 1 357 0
 282 0000 0128     		cmp	r0, #1
 355:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 283              		.loc 1 355 0
 284 0002 10B5     		push	{r4, lr}
 285              	.LCFI4:
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 4, -8
 288              		.cfi_offset 14, -4
 355:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 289              		.loc 1 355 0
 290 0004 0446     		mov	r4, r0
 357:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 291              		.loc 1 357 0
 292 0006 07D9     		bls	.L22
 357:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 293              		.loc 1 357 0 is_stmt 0 discriminator 1
 294 0008 40F20000 		movw	r0, #:lower16:.LC0
 295              	.LVL18:
 296 000c C0F20000 		movt	r0, #:upper16:.LC0
 297 0010 40F26511 		movw	r1, #357
 298 0014 FFF7FEFF 		bl	assert_failed
 299              	.LVL19:
 300              	.L22:
 359:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 301              		.loc 1 359 0 is_stmt 1
 302 0018 0023     		movs	r3, #0
 303 001a C4F24723 		movt	r3, 16967
 304 001e 1C60     		str	r4, [r3]
 305 0020 10BD     		pop	{r4, pc}
 306              		.cfi_endproc
 307              	.LFE127:
 309 0022 00BF     		.section	.text.RCC_LSEConfig,"ax",%progbits
 310              		.align	2
 311              		.global	RCC_LSEConfig
 312              		.thumb
 313              		.thumb_func
 315              	RCC_LSEConfig:
 316              	.LFB128:
 380:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 317              		.loc 1 380 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 321              	.LVL20:
 382:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 322              		.loc 1 382 0
 323 0000 0428     		cmp	r0, #4
 324 0002 18BF     		it	ne
 325 0004 0128     		cmpne	r0, #1
 380:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 326              		.loc 1 380 0
 327 0006 10B5     		push	{r4, lr}
 328              	.LCFI5:
 329              		.cfi_def_cfa_offset 8
 330              		.cfi_offset 4, -8
 331              		.cfi_offset 14, -4
 380:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 332              		.loc 1 380 0
 333 0008 0446     		mov	r4, r0
 382:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 334              		.loc 1 382 0
 335 000a 10D8     		bhi	.L31
 336              	.LVL21:
 337              	.L24:
 386:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 338              		.loc 1 386 0
 339 000c 43F67003 		movw	r3, #14448
 340 0010 C4F20203 		movt	r3, 16386
 341 0014 0022     		movs	r2, #0
 392:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 342              		.loc 1 392 0
 343 0016 012C     		cmp	r4, #1
 386:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 344              		.loc 1 386 0
 345 0018 1A70     		strb	r2, [r3]
 389:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 346              		.loc 1 389 0
 347 001a 1A70     		strb	r2, [r3]
 392:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 348              		.loc 1 392 0
 349 001c 05D0     		beq	.L26
 350 001e 042C     		cmp	r4, #4
 351 0020 02D1     		bne	.L32
 400:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 352              		.loc 1 400 0
 353 0022 0522     		movs	r2, #5
 354 0024 1A70     		strb	r2, [r3]
 355 0026 10BD     		pop	{r4, pc}
 356              	.L32:
 357 0028 10BD     		pop	{r4, pc}
 358              	.L26:
 396:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 359              		.loc 1 396 0
 360 002a 1C70     		strb	r4, [r3]
 397:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 361              		.loc 1 397 0
 362 002c 10BD     		pop	{r4, pc}
 363              	.LVL22:
 364              	.L31:
 382:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 365              		.loc 1 382 0 discriminator 1
 366 002e 40F20000 		movw	r0, #:lower16:.LC0
 367              	.LVL23:
 368 0032 C0F20000 		movt	r0, #:upper16:.LC0
 369 0036 4FF4BF71 		mov	r1, #382
 370 003a FFF7FEFF 		bl	assert_failed
 371              	.LVL24:
 372 003e E5E7     		b	.L24
 373              		.cfi_endproc
 374              	.LFE128:
 376              		.section	.text.RCC_LSICmd,"ax",%progbits
 377              		.align	2
 378              		.global	RCC_LSICmd
 379              		.thumb
 380              		.thumb_func
 382              	RCC_LSICmd:
 383              	.LFB129:
 420:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 384              		.loc 1 420 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388              	.LVL25:
 422:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 389              		.loc 1 422 0
 390 0000 0128     		cmp	r0, #1
 420:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 391              		.loc 1 420 0
 392 0002 10B5     		push	{r4, lr}
 393              	.LCFI6:
 394              		.cfi_def_cfa_offset 8
 395              		.cfi_offset 4, -8
 396              		.cfi_offset 14, -4
 420:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 397              		.loc 1 420 0
 398 0004 0446     		mov	r4, r0
 422:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 399              		.loc 1 422 0
 400 0006 07D9     		bls	.L34
 422:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 401              		.loc 1 422 0 is_stmt 0 discriminator 1
 402 0008 40F20000 		movw	r0, #:lower16:.LC0
 403              	.LVL26:
 404 000c C0F20000 		movt	r0, #:upper16:.LC0
 405 0010 4FF4D371 		mov	r1, #422
 406 0014 FFF7FEFF 		bl	assert_failed
 407              	.LVL27:
 408              	.L34:
 424:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 409              		.loc 1 424 0 is_stmt 1
 410 0018 4FF46863 		mov	r3, #3712
 411 001c C4F24723 		movt	r3, 16967
 412 0020 1C60     		str	r4, [r3]
 413 0022 10BD     		pop	{r4, pc}
 414              		.cfi_endproc
 415              	.LFE129:
 417              		.section	.text.RCC_PLLConfig,"ax",%progbits
 418              		.align	2
 419              		.global	RCC_PLLConfig
 420              		.thumb
 421              		.thumb_func
 423              	RCC_PLLConfig:
 424              	.LFB130:
 519:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 425              		.loc 1 519 0
 426              		.cfi_startproc
 427              		@ args = 4, pretend = 0, frame = 0
 428              		@ frame_needed = 0, uses_anonymous_args = 0
 429              	.LVL28:
 430 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 431              	.LCFI7:
 432              		.cfi_def_cfa_offset 24
 433              		.cfi_offset 4, -24
 434              		.cfi_offset 5, -20
 435              		.cfi_offset 6, -16
 436              		.cfi_offset 7, -12
 437              		.cfi_offset 8, -8
 438              		.cfi_offset 14, -4
 519:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 439              		.loc 1 519 0
 440 0004 1C46     		mov	r4, r3
 521:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 441              		.loc 1 521 0
 442 0006 30F48003 		bics	r3, r0, #4194304
 443              	.LVL29:
 519:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 444              		.loc 1 519 0
 445 000a 0646     		mov	r6, r0
 446 000c 0F46     		mov	r7, r1
 447 000e 9046     		mov	r8, r2
 448 0010 069D     		ldr	r5, [sp, #24]
 521:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 449              		.loc 1 521 0
 450 0012 3AD1     		bne	.L50
 451              	.LVL30:
 452              	.L36:
 522:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 453              		.loc 1 522 0
 454 0014 3F2F     		cmp	r7, #63
 455 0016 2FD8     		bhi	.L51
 456              	.L37:
 523:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 457              		.loc 1 523 0
 458 0018 A8F1C003 		sub	r3, r8, #192
 459 001c F02B     		cmp	r3, #240
 460 001e 22D8     		bhi	.L52
 461              	.L38:
 524:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 462              		.loc 1 524 0
 463 0020 24F00403 		bic	r3, r4, #4
 464 0024 022B     		cmp	r3, #2
 465 0026 18BF     		it	ne
 466 0028 042C     		cmpne	r4, #4
 467 002a 01D0     		beq	.L39
 524:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 468              		.loc 1 524 0 is_stmt 0 discriminator 1
 469 002c 082C     		cmp	r4, #8
 470 002e 35D1     		bne	.L53
 471              	.L39:
 525:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 472              		.loc 1 525 0 is_stmt 1
 473 0030 2B1F     		subs	r3, r5, #4
 474 0032 0B2B     		cmp	r3, #11
 475 0034 07D9     		bls	.L40
 525:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 476              		.loc 1 525 0 is_stmt 0 discriminator 1
 477 0036 40F20000 		movw	r0, #:lower16:.LC0
 478 003a C0F20000 		movt	r0, #:upper16:.LC0
 479 003e 40F20D21 		movw	r1, #525
 480 0042 FFF7FEFF 		bl	assert_failed
 481              	.LVL31:
 482              	.L40:
 527:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 483              		.loc 1 527 0 is_stmt 1
 484 0046 47EA8817 		orr	r7, r7, r8, lsl #6
 485              	.LVL32:
 486 004a 6408     		lsrs	r4, r4, #1
 487              	.LVL33:
 488 004c 47EA0565 		orr	r5, r7, r5, lsl #24
 489 0050 013C     		subs	r4, r4, #1
 490 0052 4FF46053 		mov	r3, #14336
 491 0056 45EA0445 		orr	r5, r5, r4, lsl #16
 492 005a C4F20203 		movt	r3, 16386
 493 005e 2E43     		orrs	r6, r6, r5
 494              	.LVL34:
 495 0060 5E60     		str	r6, [r3, #4]
 496 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 497              	.LVL35:
 498              	.L52:
 523:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 499              		.loc 1 523 0 discriminator 1
 500 0066 40F20000 		movw	r0, #:lower16:.LC0
 501 006a C0F20000 		movt	r0, #:upper16:.LC0
 502 006e 40F20B21 		movw	r1, #523
 503 0072 FFF7FEFF 		bl	assert_failed
 504              	.LVL36:
 505 0076 D3E7     		b	.L38
 506              	.L51:
 522:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 507              		.loc 1 522 0 discriminator 1
 508 0078 40F20000 		movw	r0, #:lower16:.LC0
 509 007c C0F20000 		movt	r0, #:upper16:.LC0
 510 0080 40F20A21 		movw	r1, #522
 511 0084 FFF7FEFF 		bl	assert_failed
 512              	.LVL37:
 513 0088 C6E7     		b	.L37
 514              	.LVL38:
 515              	.L50:
 521:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 516              		.loc 1 521 0 discriminator 1
 517 008a 40F20000 		movw	r0, #:lower16:.LC0
 518              	.LVL39:
 519 008e C0F20000 		movt	r0, #:upper16:.LC0
 520 0092 40F20921 		movw	r1, #521
 521              	.LVL40:
 522 0096 FFF7FEFF 		bl	assert_failed
 523              	.LVL41:
 524 009a BBE7     		b	.L36
 525              	.L53:
 524:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 526              		.loc 1 524 0 discriminator 1
 527 009c 40F20000 		movw	r0, #:lower16:.LC0
 528 00a0 C0F20000 		movt	r0, #:upper16:.LC0
 529 00a4 4FF40371 		mov	r1, #524
 530 00a8 FFF7FEFF 		bl	assert_failed
 531              	.LVL42:
 532 00ac C0E7     		b	.L39
 533              		.cfi_endproc
 534              	.LFE130:
 536 00ae 00BF     		.section	.text.RCC_PLLCmd,"ax",%progbits
 537              		.align	2
 538              		.global	RCC_PLLCmd
 539              		.thumb
 540              		.thumb_func
 542              	RCC_PLLCmd:
 543              	.LFB131:
 543:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 544              		.loc 1 543 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548              	.LVL43:
 545:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 549              		.loc 1 545 0
 550 0000 0128     		cmp	r0, #1
 543:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 551              		.loc 1 543 0
 552 0002 10B5     		push	{r4, lr}
 553              	.LCFI8:
 554              		.cfi_def_cfa_offset 8
 555              		.cfi_offset 4, -8
 556              		.cfi_offset 14, -4
 543:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 557              		.loc 1 543 0
 558 0004 0446     		mov	r4, r0
 545:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 559              		.loc 1 545 0
 560 0006 07D9     		bls	.L55
 545:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 561              		.loc 1 545 0 is_stmt 0 discriminator 1
 562 0008 40F20000 		movw	r0, #:lower16:.LC0
 563              	.LVL44:
 564 000c C0F20000 		movt	r0, #:upper16:.LC0
 565 0010 40F22121 		movw	r1, #545
 566 0014 FFF7FEFF 		bl	assert_failed
 567              	.LVL45:
 568              	.L55:
 546:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 569              		.loc 1 546 0 is_stmt 1
 570 0018 6023     		movs	r3, #96
 571 001a C4F24723 		movt	r3, 16967
 572 001e 1C60     		str	r4, [r3]
 573 0020 10BD     		pop	{r4, pc}
 574              		.cfi_endproc
 575              	.LFE131:
 577 0022 00BF     		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 578              		.align	2
 579              		.global	RCC_PLLI2SConfig
 580              		.thumb
 581              		.thumb_func
 583              	RCC_PLLI2SConfig:
 584              	.LFB132:
 573:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 585              		.loc 1 573 0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 0
 588              		@ frame_needed = 0, uses_anonymous_args = 0
 589              	.LVL46:
 590 0000 38B5     		push	{r3, r4, r5, lr}
 591              	.LCFI9:
 592              		.cfi_def_cfa_offset 16
 593              		.cfi_offset 3, -16
 594              		.cfi_offset 4, -12
 595              		.cfi_offset 5, -8
 596              		.cfi_offset 14, -4
 575:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 597              		.loc 1 575 0
 598 0002 A0F1C003 		sub	r3, r0, #192
 599 0006 F02B     		cmp	r3, #240
 573:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 600              		.loc 1 573 0
 601 0008 0446     		mov	r4, r0
 602 000a 0D46     		mov	r5, r1
 575:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 603              		.loc 1 575 0
 604 000c 14D8     		bhi	.L59
 605              	.LVL47:
 606              	.L57:
 576:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 607              		.loc 1 576 0
 608 000e AB1E     		subs	r3, r5, #2
 609 0010 052B     		cmp	r3, #5
 610 0012 07D9     		bls	.L58
 576:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 611              		.loc 1 576 0 is_stmt 0 discriminator 1
 612 0014 40F20000 		movw	r0, #:lower16:.LC0
 613 0018 C0F20000 		movt	r0, #:upper16:.LC0
 614 001c 4FF41071 		mov	r1, #576
 615 0020 FFF7FEFF 		bl	assert_failed
 616              	.LVL48:
 617              	.L58:
 578:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 618              		.loc 1 578 0 is_stmt 1
 619 0024 4FF46053 		mov	r3, #14336
 620 0028 2D07     		lsls	r5, r5, #28
 621              	.LVL49:
 622 002a C4F20203 		movt	r3, 16386
 623 002e 45EA8414 		orr	r4, r5, r4, lsl #6
 624              	.LVL50:
 625 0032 C3F88440 		str	r4, [r3, #132]
 626 0036 38BD     		pop	{r3, r4, r5, pc}
 627              	.LVL51:
 628              	.L59:
 575:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 629              		.loc 1 575 0 discriminator 1
 630 0038 40F20000 		movw	r0, #:lower16:.LC0
 631              	.LVL52:
 632 003c C0F20000 		movt	r0, #:upper16:.LC0
 633 0040 40F23F21 		movw	r1, #575
 634              	.LVL53:
 635 0044 FFF7FEFF 		bl	assert_failed
 636              	.LVL54:
 637 0048 E1E7     		b	.L57
 638              		.cfi_endproc
 639              	.LFE132:
 641 004a 00BF     		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 642              		.align	2
 643              		.global	RCC_PLLI2SCmd
 644              		.thumb
 645              		.thumb_func
 647              	RCC_PLLI2SCmd:
 648              	.LFB133:
 712:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 649              		.loc 1 712 0
 650              		.cfi_startproc
 651              		@ args = 0, pretend = 0, frame = 0
 652              		@ frame_needed = 0, uses_anonymous_args = 0
 653              	.LVL55:
 714:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 654              		.loc 1 714 0
 655 0000 0128     		cmp	r0, #1
 712:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 656              		.loc 1 712 0
 657 0002 10B5     		push	{r4, lr}
 658              	.LCFI10:
 659              		.cfi_def_cfa_offset 8
 660              		.cfi_offset 4, -8
 661              		.cfi_offset 14, -4
 712:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 662              		.loc 1 712 0
 663 0004 0446     		mov	r4, r0
 714:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 664              		.loc 1 714 0
 665 0006 07D9     		bls	.L61
 714:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 666              		.loc 1 714 0 is_stmt 0 discriminator 1
 667 0008 40F20000 		movw	r0, #:lower16:.LC0
 668              	.LVL56:
 669 000c C0F20000 		movt	r0, #:upper16:.LC0
 670 0010 40F2CA21 		movw	r1, #714
 671 0014 FFF7FEFF 		bl	assert_failed
 672              	.LVL57:
 673              	.L61:
 715:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 674              		.loc 1 715 0 is_stmt 1
 675 0018 6823     		movs	r3, #104
 676 001a C4F24723 		movt	r3, 16967
 677 001e 1C60     		str	r4, [r3]
 678 0020 10BD     		pop	{r4, pc}
 679              		.cfi_endproc
 680              	.LFE133:
 682 0022 00BF     		.section	.text.RCC_PLLSAIConfig,"ax",%progbits
 683              		.align	2
 684              		.global	RCC_PLLSAIConfig
 685              		.thumb
 686              		.thumb_func
 688              	RCC_PLLSAIConfig:
 689              	.LFB134:
 783:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 690              		.loc 1 783 0
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 0
 693              		@ frame_needed = 0, uses_anonymous_args = 0
 694              	.LVL58:
 785:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 695              		.loc 1 785 0
 696 0000 A0F13103 		sub	r3, r0, #49
 697 0004 B3F5C07F 		cmp	r3, #384
 783:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 698              		.loc 1 783 0
 699 0008 70B5     		push	{r4, r5, r6, lr}
 700              	.LCFI11:
 701              		.cfi_def_cfa_offset 16
 702              		.cfi_offset 4, -16
 703              		.cfi_offset 5, -12
 704              		.cfi_offset 6, -8
 705              		.cfi_offset 14, -4
 783:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 706              		.loc 1 783 0
 707 000a 0446     		mov	r4, r0
 708 000c 0D46     		mov	r5, r1
 709 000e 1646     		mov	r6, r2
 785:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 710              		.loc 1 785 0
 711 0010 22D2     		bcs	.L66
 712              	.LVL59:
 713              	.L63:
 786:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 714              		.loc 1 786 0
 715 0012 B31E     		subs	r3, r6, #2
 716 0014 052B     		cmp	r3, #5
 717 0016 16D8     		bhi	.L67
 718              	.L64:
 787:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 719              		.loc 1 787 0
 720 0018 AB1E     		subs	r3, r5, #2
 721 001a 0D2B     		cmp	r3, #13
 722 001c 07D9     		bls	.L65
 787:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 723              		.loc 1 787 0 is_stmt 0 discriminator 1
 724 001e 40F20000 		movw	r0, #:lower16:.LC0
 725 0022 C0F20000 		movt	r0, #:upper16:.LC0
 726 0026 40F21331 		movw	r1, #787
 727 002a FFF7FEFF 		bl	assert_failed
 728              	.LVL60:
 729              	.L65:
 789:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 730              		.loc 1 789 0 is_stmt 1
 731 002e 2D06     		lsls	r5, r5, #24
 732              	.LVL61:
 733 0030 4FF46053 		mov	r3, #14336
 734 0034 45EA0676 		orr	r6, r5, r6, lsl #28
 735              	.LVL62:
 736 0038 C4F20203 		movt	r3, 16386
 737 003c 46EA8414 		orr	r4, r6, r4, lsl #6
 738              	.LVL63:
 739 0040 C3F88840 		str	r4, [r3, #136]
 740 0044 70BD     		pop	{r4, r5, r6, pc}
 741              	.LVL64:
 742              	.L67:
 786:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 743              		.loc 1 786 0 discriminator 1
 744 0046 40F20000 		movw	r0, #:lower16:.LC0
 745 004a C0F20000 		movt	r0, #:upper16:.LC0
 746 004e 40F21231 		movw	r1, #786
 747 0052 FFF7FEFF 		bl	assert_failed
 748              	.LVL65:
 749 0056 DFE7     		b	.L64
 750              	.LVL66:
 751              	.L66:
 785:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 752              		.loc 1 785 0 discriminator 1
 753 0058 40F20000 		movw	r0, #:lower16:.LC0
 754              	.LVL67:
 755 005c C0F20000 		movt	r0, #:upper16:.LC0
 756 0060 40F21131 		movw	r1, #785
 757              	.LVL68:
 758 0064 FFF7FEFF 		bl	assert_failed
 759              	.LVL69:
 760 0068 D3E7     		b	.L63
 761              		.cfi_endproc
 762              	.LFE134:
 764 006a 00BF     		.section	.text.RCC_PLLSAICmd,"ax",%progbits
 765              		.align	2
 766              		.global	RCC_PLLSAICmd
 767              		.thumb
 768              		.thumb_func
 770              	RCC_PLLSAICmd:
 771              	.LFB135:
 803:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 772              		.loc 1 803 0
 773              		.cfi_startproc
 774              		@ args = 0, pretend = 0, frame = 0
 775              		@ frame_needed = 0, uses_anonymous_args = 0
 776              	.LVL70:
 805:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 777              		.loc 1 805 0
 778 0000 0128     		cmp	r0, #1
 803:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 779              		.loc 1 803 0
 780 0002 10B5     		push	{r4, lr}
 781              	.LCFI12:
 782              		.cfi_def_cfa_offset 8
 783              		.cfi_offset 4, -8
 784              		.cfi_offset 14, -4
 803:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 785              		.loc 1 803 0
 786 0004 0446     		mov	r4, r0
 805:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 787              		.loc 1 805 0
 788 0006 07D9     		bls	.L69
 805:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 789              		.loc 1 805 0 is_stmt 0 discriminator 1
 790 0008 40F20000 		movw	r0, #:lower16:.LC0
 791              	.LVL71:
 792 000c C0F20000 		movt	r0, #:upper16:.LC0
 793 0010 40F22531 		movw	r1, #805
 794 0014 FFF7FEFF 		bl	assert_failed
 795              	.LVL72:
 796              	.L69:
 806:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 797              		.loc 1 806 0 is_stmt 1
 798 0018 7023     		movs	r3, #112
 799 001a C4F24723 		movt	r3, 16967
 800 001e 1C60     		str	r4, [r3]
 801 0020 10BD     		pop	{r4, pc}
 802              		.cfi_endproc
 803              	.LFE135:
 805 0022 00BF     		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 806              		.align	2
 807              		.global	RCC_ClockSecuritySystemCmd
 808              		.thumb
 809              		.thumb_func
 811              	RCC_ClockSecuritySystemCmd:
 812              	.LFB136:
 821:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 813              		.loc 1 821 0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 0
 816              		@ frame_needed = 0, uses_anonymous_args = 0
 817              	.LVL73:
 823:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 818              		.loc 1 823 0
 819 0000 0128     		cmp	r0, #1
 821:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 820              		.loc 1 821 0
 821 0002 10B5     		push	{r4, lr}
 822              	.LCFI13:
 823              		.cfi_def_cfa_offset 8
 824              		.cfi_offset 4, -8
 825              		.cfi_offset 14, -4
 821:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 826              		.loc 1 821 0
 827 0004 0446     		mov	r4, r0
 823:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 828              		.loc 1 823 0
 829 0006 07D9     		bls	.L71
 823:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 830              		.loc 1 823 0 is_stmt 0 discriminator 1
 831 0008 40F20000 		movw	r0, #:lower16:.LC0
 832              	.LVL74:
 833 000c C0F20000 		movt	r0, #:upper16:.LC0
 834 0010 40F23731 		movw	r1, #823
 835 0014 FFF7FEFF 		bl	assert_failed
 836              	.LVL75:
 837              	.L71:
 824:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 838              		.loc 1 824 0 is_stmt 1
 839 0018 4C23     		movs	r3, #76
 840 001a C4F24723 		movt	r3, 16967
 841 001e 1C60     		str	r4, [r3]
 842 0020 10BD     		pop	{r4, pc}
 843              		.cfi_endproc
 844              	.LFE136:
 846 0022 00BF     		.section	.text.RCC_MCO1Config,"ax",%progbits
 847              		.align	2
 848              		.global	RCC_MCO1Config
 849              		.thumb
 850              		.thumb_func
 852              	RCC_MCO1Config:
 853              	.LFB137:
 846:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 854              		.loc 1 846 0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 0
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 858              	.LVL76:
 859 0000 38B5     		push	{r3, r4, r5, lr}
 860              	.LCFI14:
 861              		.cfi_def_cfa_offset 16
 862              		.cfi_offset 3, -16
 863              		.cfi_offset 4, -12
 864              		.cfi_offset 5, -8
 865              		.cfi_offset 14, -4
 850:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 866              		.loc 1 850 0
 867 0002 30F4C003 		bics	r3, r0, #6291456
 846:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 868              		.loc 1 846 0
 869 0006 0546     		mov	r5, r0
 870 0008 0C46     		mov	r4, r1
 850:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 871              		.loc 1 850 0
 872 000a 07D0     		beq	.L73
 850:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 873              		.loc 1 850 0 is_stmt 0 discriminator 1
 874 000c 40F20000 		movw	r0, #:lower16:.LC0
 875              	.LVL77:
 876 0010 C0F20000 		movt	r0, #:upper16:.LC0
 877 0014 40F25231 		movw	r1, #850
 878              	.LVL78:
 879 0018 FFF7FEFF 		bl	assert_failed
 880              	.LVL79:
 881              	.L73:
 851:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 882              		.loc 1 851 0 is_stmt 1
 883 001c 34F08063 		bics	r3, r4, #67108864
 884 0020 0FD0     		beq	.L74
 851:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 885              		.loc 1 851 0 is_stmt 0 discriminator 1
 886 0022 24F00073 		bic	r3, r4, #33554432
 887 0026 B3F1A06F 		cmp	r3, #83886080
 888 002a 18BF     		it	ne
 889 002c B4F1C06F 		cmpne	r4, #100663296
 890 0030 07D0     		beq	.L74
 891 0032 40F20000 		movw	r0, #:lower16:.LC0
 892 0036 C0F20000 		movt	r0, #:upper16:.LC0
 893 003a 40F25331 		movw	r1, #851
 894 003e FFF7FEFF 		bl	assert_failed
 895              	.LVL80:
 896              	.L74:
 853:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 897              		.loc 1 853 0 is_stmt 1
 898 0042 4FF46053 		mov	r3, #14336
 899 0046 C4F20203 		movt	r3, 16386
 900 004a 9A68     		ldr	r2, [r3, #8]
 901              	.LVL81:
 856:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 902              		.loc 1 856 0
 903 004c 22F0EC62 		bic	r2, r2, #123731968
 904              	.LVL82:
 859:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 905              		.loc 1 859 0
 906 0050 1443     		orrs	r4, r4, r2
 907              	.LVL83:
 908 0052 2543     		orrs	r5, r5, r4
 909              	.LVL84:
 862:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 910              		.loc 1 862 0
 911 0054 9D60     		str	r5, [r3, #8]
 912 0056 38BD     		pop	{r3, r4, r5, pc}
 913              		.cfi_endproc
 914              	.LFE137:
 916              		.section	.text.RCC_MCO2Config,"ax",%progbits
 917              		.align	2
 918              		.global	RCC_MCO2Config
 919              		.thumb
 920              		.thumb_func
 922              	RCC_MCO2Config:
 923              	.LFB138:
 884:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 924              		.loc 1 884 0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 928              	.LVL85:
 929 0000 38B5     		push	{r3, r4, r5, lr}
 930              	.LCFI15:
 931              		.cfi_def_cfa_offset 16
 932              		.cfi_offset 3, -16
 933              		.cfi_offset 4, -12
 934              		.cfi_offset 5, -8
 935              		.cfi_offset 14, -4
 888:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 936              		.loc 1 888 0
 937 0002 20F04043 		bic	r3, r0, #-1073741824
 884:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 938              		.loc 1 884 0
 939 0006 0546     		mov	r5, r0
 940 0008 0C46     		mov	r4, r1
 888:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 941              		.loc 1 888 0
 942 000a 3BB1     		cbz	r3, .L85
 888:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 943              		.loc 1 888 0 is_stmt 0 discriminator 1
 944 000c 40F20000 		movw	r0, #:lower16:.LC0
 945              	.LVL86:
 946 0010 C0F20000 		movt	r0, #:upper16:.LC0
 947 0014 4FF45E71 		mov	r1, #888
 948              	.LVL87:
 949 0018 FFF7FEFF 		bl	assert_failed
 950              	.LVL88:
 951              	.L85:
 889:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 952              		.loc 1 889 0 is_stmt 1
 953 001c 34F00053 		bics	r3, r4, #536870912
 954 0020 0FD0     		beq	.L86
 889:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 955              		.loc 1 889 0 is_stmt 0 discriminator 1
 956 0022 24F08053 		bic	r3, r4, #268435456
 957 0026 B3F1205F 		cmp	r3, #671088640
 958 002a 18BF     		it	ne
 959 002c B4F1405F 		cmpne	r4, #805306368
 960 0030 07D0     		beq	.L86
 961 0032 40F20000 		movw	r0, #:lower16:.LC0
 962 0036 C0F20000 		movt	r0, #:upper16:.LC0
 963 003a 40F27931 		movw	r1, #889
 964 003e FFF7FEFF 		bl	assert_failed
 965              	.LVL89:
 966              	.L86:
 891:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 967              		.loc 1 891 0 is_stmt 1
 968 0042 4FF46053 		mov	r3, #14336
 969 0046 C4F20203 		movt	r3, 16386
 970 004a 9A68     		ldr	r2, [r3, #8]
 971              	.LVL90:
 894:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 972              		.loc 1 894 0
 973 004c 22F07842 		bic	r2, r2, #-134217728
 974              	.LVL91:
 897:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 975              		.loc 1 897 0
 976 0050 1443     		orrs	r4, r4, r2
 977              	.LVL92:
 978 0052 2543     		orrs	r5, r5, r4
 979              	.LVL93:
 900:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 980              		.loc 1 900 0
 981 0054 9D60     		str	r5, [r3, #8]
 982 0056 38BD     		pop	{r3, r4, r5, pc}
 983              		.cfi_endproc
 984              	.LFE138:
 986              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 987              		.align	2
 988              		.global	RCC_SYSCLKConfig
 989              		.thumb
 990              		.thumb_func
 992              	RCC_SYSCLKConfig:
 993              	.LFB139:
1080:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 994              		.loc 1 1080 0
 995              		.cfi_startproc
 996              		@ args = 0, pretend = 0, frame = 0
 997              		@ frame_needed = 0, uses_anonymous_args = 0
 998              	.LVL94:
1084:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 999              		.loc 1 1084 0
 1000 0000 0228     		cmp	r0, #2
1080:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1001              		.loc 1 1080 0
 1002 0002 10B5     		push	{r4, lr}
 1003              	.LCFI16:
 1004              		.cfi_def_cfa_offset 8
 1005              		.cfi_offset 4, -8
 1006              		.cfi_offset 14, -4
1080:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1007              		.loc 1 1080 0
 1008 0004 0446     		mov	r4, r0
1084:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1009              		.loc 1 1084 0
 1010 0006 07D9     		bls	.L97
1084:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1011              		.loc 1 1084 0 is_stmt 0 discriminator 1
 1012 0008 40F20000 		movw	r0, #:lower16:.LC0
 1013              	.LVL95:
 1014 000c C0F20000 		movt	r0, #:upper16:.LC0
 1015 0010 40F23C41 		movw	r1, #1084
 1016 0014 FFF7FEFF 		bl	assert_failed
 1017              	.LVL96:
 1018              	.L97:
1086:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1019              		.loc 1 1086 0 is_stmt 1
 1020 0018 4FF46053 		mov	r3, #14336
 1021 001c C4F20203 		movt	r3, 16386
 1022 0020 9A68     		ldr	r2, [r3, #8]
 1023              	.LVL97:
1089:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1024              		.loc 1 1089 0
 1025 0022 22F00302 		bic	r2, r2, #3
 1026              	.LVL98:
1092:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1027              		.loc 1 1092 0
 1028 0026 1443     		orrs	r4, r4, r2
 1029              	.LVL99:
1095:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1030              		.loc 1 1095 0
 1031 0028 9C60     		str	r4, [r3, #8]
 1032 002a 10BD     		pop	{r4, pc}
 1033              		.cfi_endproc
 1034              	.LFE139:
 1036              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 1037              		.align	2
 1038              		.global	RCC_GetSYSCLKSource
 1039              		.thumb
 1040              		.thumb_func
 1042              	RCC_GetSYSCLKSource:
 1043              	.LFB140:
1109:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 1044              		.loc 1 1109 0
 1045              		.cfi_startproc
 1046              		@ args = 0, pretend = 0, frame = 0
 1047              		@ frame_needed = 0, uses_anonymous_args = 0
 1048              		@ link register save eliminated.
1110:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1049              		.loc 1 1110 0
 1050 0000 4FF46053 		mov	r3, #14336
 1051 0004 C4F20203 		movt	r3, 16386
 1052 0008 9868     		ldr	r0, [r3, #8]
1111:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1053              		.loc 1 1111 0
 1054 000a 00F00C00 		and	r0, r0, #12
 1055 000e 7047     		bx	lr
 1056              		.cfi_endproc
 1057              	.LFE140:
 1059              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 1060              		.align	2
 1061              		.global	RCC_HCLKConfig
 1062              		.thumb
 1063              		.thumb_func
 1065              	RCC_HCLKConfig:
 1066              	.LFB141:
1134:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1067              		.loc 1 1134 0
 1068              		.cfi_startproc
 1069              		@ args = 0, pretend = 0, frame = 0
 1070              		@ frame_needed = 0, uses_anonymous_args = 0
 1071              	.LVL100:
1138:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1072              		.loc 1 1138 0
 1073 0000 30F08003 		bics	r3, r0, #128
1134:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1074              		.loc 1 1134 0
 1075 0004 10B5     		push	{r4, lr}
 1076              	.LCFI17:
 1077              		.cfi_def_cfa_offset 8
 1078              		.cfi_offset 4, -8
 1079              		.cfi_offset 14, -4
1134:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1080              		.loc 1 1134 0
 1081 0006 0446     		mov	r4, r0
1138:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1082              		.loc 1 1138 0
 1083 0008 15D0     		beq	.L100
1138:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1084              		.loc 1 1138 0 is_stmt 0 discriminator 1
 1085 000a 20F02002 		bic	r2, r0, #32
 1086 000e 20F04003 		bic	r3, r0, #64
 1087 0012 902A     		cmp	r2, #144
 1088 0014 18BF     		it	ne
 1089 0016 A02B     		cmpne	r3, #160
 1090 0018 0DD0     		beq	.L100
 1091 001a 20F01003 		bic	r3, r0, #16
 1092 001e C02B     		cmp	r3, #192
 1093 0020 09D0     		beq	.L100
 1094 0022 F028     		cmp	r0, #240
 1095 0024 07D0     		beq	.L100
 1096 0026 40F20000 		movw	r0, #:lower16:.LC0
 1097              	.LVL101:
 1098 002a C0F20000 		movt	r0, #:upper16:.LC0
 1099 002e 40F27241 		movw	r1, #1138
 1100 0032 FFF7FEFF 		bl	assert_failed
 1101              	.LVL102:
 1102              	.L100:
1140:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1103              		.loc 1 1140 0 is_stmt 1
 1104 0036 4FF46053 		mov	r3, #14336
 1105 003a C4F20203 		movt	r3, 16386
 1106 003e 9A68     		ldr	r2, [r3, #8]
 1107              	.LVL103:
1143:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1108              		.loc 1 1143 0
 1109 0040 22F0F002 		bic	r2, r2, #240
 1110              	.LVL104:
1146:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1111              		.loc 1 1146 0
 1112 0044 1443     		orrs	r4, r4, r2
 1113              	.LVL105:
1149:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1114              		.loc 1 1149 0
 1115 0046 9C60     		str	r4, [r3, #8]
 1116 0048 10BD     		pop	{r4, pc}
 1117              		.cfi_endproc
 1118              	.LFE141:
 1120 004a 00BF     		.section	.text.RCC_PCLK1Config,"ax",%progbits
 1121              		.align	2
 1122              		.global	RCC_PCLK1Config
 1123              		.thumb
 1124              		.thumb_func
 1126              	RCC_PCLK1Config:
 1127              	.LFB142:
1166:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1128              		.loc 1 1166 0
 1129              		.cfi_startproc
 1130              		@ args = 0, pretend = 0, frame = 0
 1131              		@ frame_needed = 0, uses_anonymous_args = 0
 1132              	.LVL106:
1170:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1133              		.loc 1 1170 0
 1134 0000 30F48053 		bics	r3, r0, #4096
1166:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1135              		.loc 1 1166 0
 1136 0004 10B5     		push	{r4, lr}
 1137              	.LCFI18:
 1138              		.cfi_def_cfa_offset 8
 1139              		.cfi_offset 4, -8
 1140              		.cfi_offset 14, -4
1166:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1141              		.loc 1 1166 0
 1142 0006 0446     		mov	r4, r0
1170:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1143              		.loc 1 1170 0
 1144 0008 0FD0     		beq	.L114
1170:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1145              		.loc 1 1170 0 is_stmt 0 discriminator 1
 1146 000a 20F40063 		bic	r3, r0, #2048
 1147 000e B3F5A05F 		cmp	r3, #5120
 1148 0012 18BF     		it	ne
 1149 0014 B0F5C05F 		cmpne	r0, #6144
 1150 0018 07D0     		beq	.L114
 1151 001a 40F20000 		movw	r0, #:lower16:.LC0
 1152              	.LVL107:
 1153 001e C0F20000 		movt	r0, #:upper16:.LC0
 1154 0022 40F29241 		movw	r1, #1170
 1155 0026 FFF7FEFF 		bl	assert_failed
 1156              	.LVL108:
 1157              	.L114:
1172:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1158              		.loc 1 1172 0 is_stmt 1
 1159 002a 4FF46053 		mov	r3, #14336
 1160 002e C4F20203 		movt	r3, 16386
 1161 0032 9A68     		ldr	r2, [r3, #8]
 1162              	.LVL109:
1175:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1163              		.loc 1 1175 0
 1164 0034 22F4E052 		bic	r2, r2, #7168
 1165              	.LVL110:
1178:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1166              		.loc 1 1178 0
 1167 0038 1443     		orrs	r4, r4, r2
 1168              	.LVL111:
1181:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1169              		.loc 1 1181 0
 1170 003a 9C60     		str	r4, [r3, #8]
 1171 003c 10BD     		pop	{r4, pc}
 1172              		.cfi_endproc
 1173              	.LFE142:
 1175 003e 00BF     		.section	.text.RCC_PCLK2Config,"ax",%progbits
 1176              		.align	2
 1177              		.global	RCC_PCLK2Config
 1178              		.thumb
 1179              		.thumb_func
 1181              	RCC_PCLK2Config:
 1182              	.LFB143:
1197:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1183              		.loc 1 1197 0
 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 0
 1186              		@ frame_needed = 0, uses_anonymous_args = 0
 1187              	.LVL112:
1201:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1188              		.loc 1 1201 0
 1189 0000 30F48053 		bics	r3, r0, #4096
1197:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1190              		.loc 1 1197 0
 1191 0004 10B5     		push	{r4, lr}
 1192              	.LCFI19:
 1193              		.cfi_def_cfa_offset 8
 1194              		.cfi_offset 4, -8
 1195              		.cfi_offset 14, -4
1197:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1196              		.loc 1 1197 0
 1197 0006 0446     		mov	r4, r0
1201:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1198              		.loc 1 1201 0
 1199 0008 0FD0     		beq	.L122
1201:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1200              		.loc 1 1201 0 is_stmt 0 discriminator 1
 1201 000a 20F40063 		bic	r3, r0, #2048
 1202 000e B3F5A05F 		cmp	r3, #5120
 1203 0012 18BF     		it	ne
 1204 0014 B0F5C05F 		cmpne	r0, #6144
 1205 0018 07D0     		beq	.L122
 1206 001a 40F20000 		movw	r0, #:lower16:.LC0
 1207              	.LVL113:
 1208 001e C0F20000 		movt	r0, #:upper16:.LC0
 1209 0022 40F2B141 		movw	r1, #1201
 1210 0026 FFF7FEFF 		bl	assert_failed
 1211              	.LVL114:
 1212              	.L122:
1203:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1213              		.loc 1 1203 0 is_stmt 1
 1214 002a 4FF46053 		mov	r3, #14336
 1215 002e C4F20203 		movt	r3, 16386
 1216 0032 9A68     		ldr	r2, [r3, #8]
 1217              	.LVL115:
1206:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1218              		.loc 1 1206 0
 1219 0034 22F46042 		bic	r2, r2, #57344
 1220              	.LVL116:
1209:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1221              		.loc 1 1209 0
 1222 0038 42EAC404 		orr	r4, r2, r4, lsl #3
 1223              	.LVL117:
1212:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1224              		.loc 1 1212 0
 1225 003c 9C60     		str	r4, [r3, #8]
 1226 003e 10BD     		pop	{r4, pc}
 1227              		.cfi_endproc
 1228              	.LFE143:
 1230              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 1231              		.align	2
 1232              		.global	RCC_GetClocksFreq
 1233              		.thumb
 1234              		.thumb_func
 1236              	RCC_GetClocksFreq:
 1237              	.LFB144:
1249:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 1238              		.loc 1 1249 0
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 0
 1241              		@ frame_needed = 0, uses_anonymous_args = 0
 1242              		@ link register save eliminated.
 1243              	.LVL118:
1256:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 1244              		.loc 1 1256 0
 1245 0000 4FF46053 		mov	r3, #14336
 1246 0004 C4F20203 		movt	r3, 16386
1249:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 1247              		.loc 1 1249 0
 1248 0008 10B4     		push	{r4}
 1249              	.LCFI20:
 1250              		.cfi_def_cfa_offset 4
 1251              		.cfi_offset 4, -4
1256:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 1252              		.loc 1 1256 0
 1253 000a 9A68     		ldr	r2, [r3, #8]
 1254              	.LVL119:
 1255 000c 02F00C02 		and	r2, r2, #12
 1256              	.LVL120:
1258:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1257              		.loc 1 1258 0
 1258 0010 042A     		cmp	r2, #4
 1259 0012 24D0     		beq	.L131
 1260 0014 082A     		cmp	r2, #8
 1261 0016 28D0     		beq	.L132
1261:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     break;
 1262              		.loc 1 1261 0
 1263 0018 4FF41051 		mov	r1, #9216
 1264 001c C0F2F401 		movt	r1, 244
 1265 0020 0160     		str	r1, [r0]
 1266              	.LVL121:
 1267              	.L134:
1320:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 1268              		.loc 1 1320 0
 1269 0022 4FF46052 		mov	r2, #14336
 1270 0026 C4F20202 		movt	r2, 16386
1322:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
 1271              		.loc 1 1322 0
 1272 002a 40F20003 		movw	r3, #:lower16:.LANCHOR0
1320:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 1273              		.loc 1 1320 0
 1274 002e 9468     		ldr	r4, [r2, #8]
 1275              	.LVL122:
1322:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
 1276              		.loc 1 1322 0
 1277 0030 C0F20003 		movt	r3, #:upper16:.LANCHOR0
1321:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1278              		.loc 1 1321 0
 1279 0034 C4F30314 		ubfx	r4, r4, #4, #4
 1280              	.LVL123:
1322:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
 1281              		.loc 1 1322 0
 1282 0038 1C5D     		ldrb	r4, [r3, r4]	@ zero_extendqisi2
 1283              	.LVL124:
1324:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1284              		.loc 1 1324 0
 1285 003a E140     		lsrs	r1, r1, r4
 1286 003c 4160     		str	r1, [r0, #4]
1327:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 1287              		.loc 1 1327 0
 1288 003e 9468     		ldr	r4, [r2, #8]
 1289              	.LVL125:
1328:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1290              		.loc 1 1328 0
 1291 0040 C4F38224 		ubfx	r4, r4, #10, #3
 1292              	.LVL126:
1329:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
 1293              		.loc 1 1329 0
 1294 0044 1C5D     		ldrb	r4, [r3, r4]	@ zero_extendqisi2
 1295              	.LVL127:
1331:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1296              		.loc 1 1331 0
 1297 0046 21FA04F4 		lsr	r4, r1, r4
 1298              	.LVL128:
 1299 004a 8460     		str	r4, [r0, #8]
1334:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 1300              		.loc 1 1334 0
 1301 004c 9268     		ldr	r2, [r2, #8]
 1302              	.LVL129:
1339:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1303              		.loc 1 1339 0
 1304 004e 5DF8044B 		ldr	r4, [sp], #4
1335:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1305              		.loc 1 1335 0
 1306 0052 C2F34232 		ubfx	r2, r2, #13, #3
 1307              	.LVL130:
1336:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
 1308              		.loc 1 1336 0
 1309 0056 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1310              	.LVL131:
1338:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1311              		.loc 1 1338 0
 1312 0058 D940     		lsrs	r1, r1, r3
 1313 005a C160     		str	r1, [r0, #12]
1339:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1314              		.loc 1 1339 0
 1315 005c 7047     		bx	lr
 1316              	.LVL132:
 1317              	.L131:
1264:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     break;
 1318              		.loc 1 1264 0
 1319 005e 4FF49051 		mov	r1, #4608
 1320 0062 C0F27A01 		movt	r1, 122
 1321 0066 0160     		str	r1, [r0]
1265:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   case 0x08:  /* PLL P used as system clock  source */
 1322              		.loc 1 1265 0
 1323 0068 DBE7     		b	.L134
 1324              	.L132:
1271:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1325              		.loc 1 1271 0
 1326 006a 5C68     		ldr	r4, [r3, #4]
 1327              	.LVL133:
1272:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
 1328              		.loc 1 1272 0
 1329 006c 5A68     		ldr	r2, [r3, #4]
 1330              	.LVL134:
1274:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     {
 1331              		.loc 1 1274 0
 1332 006e 14F4800F 		tst	r4, #4194304
1277:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     }
 1333              		.loc 1 1277 0
 1334 0072 5C68     		ldr	r4, [r3, #4]
 1335              	.LVL135:
 1336 0074 15BF     		itete	ne
 1337 0076 4FF49053 		movne	r3, #4608
1282:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     }
 1338              		.loc 1 1282 0
 1339 007a 4FF41053 		moveq	r3, #9216
1277:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     }
 1340              		.loc 1 1277 0
 1341 007e C0F27A03 		movtne	r3, 122
1282:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     }
 1342              		.loc 1 1282 0
 1343 0082 C0F2F403 		movteq	r3, 244
1272:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
 1344              		.loc 1 1272 0
 1345 0086 02F03F02 		and	r2, r2, #63
 1346              	.LVL136:
1282:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     }
 1347              		.loc 1 1282 0
 1348 008a B3FBF2F1 		udiv	r1, r3, r2
1285:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 1349              		.loc 1 1285 0
 1350 008e 4FF46053 		mov	r3, #14336
 1351 0092 C4F20203 		movt	r3, 16386
1282:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     }
 1352              		.loc 1 1282 0
 1353 0096 C4F38814 		ubfx	r4, r4, #6, #9
1285:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 1354              		.loc 1 1285 0
 1355 009a 5B68     		ldr	r3, [r3, #4]
 1356 009c C3F30143 		ubfx	r3, r3, #16, #2
 1357 00a0 0133     		adds	r3, r3, #1
1282:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     }
 1358              		.loc 1 1282 0
 1359 00a2 01FB04F1 		mul	r1, r1, r4
 1360              	.LVL137:
1285:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 1361              		.loc 1 1285 0
 1362 00a6 5B00     		lsls	r3, r3, #1
1286:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     break;
 1363              		.loc 1 1286 0
 1364 00a8 B1FBF3F1 		udiv	r1, r1, r3
 1365              	.LVL138:
 1366 00ac 0160     		str	r1, [r0]
1287:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1367              		.loc 1 1287 0
 1368 00ae B8E7     		b	.L134
 1369              		.cfi_endproc
 1370              	.LFE144:
 1372              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 1373              		.align	2
 1374              		.global	RCC_RTCCLKConfig
 1375              		.thumb
 1376              		.thumb_func
 1378              	RCC_RTCCLKConfig:
 1379              	.LFB145:
1402:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1380              		.loc 1 1402 0
 1381              		.cfi_startproc
 1382              		@ args = 0, pretend = 0, frame = 0
 1383              		@ frame_needed = 0, uses_anonymous_args = 0
 1384              	.LVL139:
1406:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1385              		.loc 1 1406 0
 1386 0000 B0F5007F 		cmp	r0, #512
 1387 0004 18BF     		it	ne
 1388 0006 B0F5807F 		cmpne	r0, #256
1402:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1389              		.loc 1 1402 0
 1390 000a 10B5     		push	{r4, lr}
 1391              	.LCFI21:
 1392              		.cfi_def_cfa_offset 8
 1393              		.cfi_offset 4, -8
 1394              		.cfi_offset 14, -4
1402:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1395              		.loc 1 1402 0
 1396 000c 0446     		mov	r4, r0
1406:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1397              		.loc 1 1406 0
 1398 000e 09D0     		beq	.L139
1406:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1399              		.loc 1 1406 0 is_stmt 0 discriminator 1
 1400 0010 4FF44073 		mov	r3, #768
 1401 0014 C0F20203 		movt	r3, 2
 1402 0018 20F4A022 		bic	r2, r0, #327680
 1403 001c 9A42     		cmp	r2, r3
 1404 001e 20F48031 		bic	r1, r0, #65536
 1405 0022 1BD1     		bne	.L144
 1406              	.LVL140:
 1407              	.L139:
1408:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
 1408              		.loc 1 1408 0 is_stmt 1
 1409 0024 04F44073 		and	r3, r4, #768
 1410 0028 B3F5407F 		cmp	r3, #768
 1411 002c 0CD1     		bne	.L140
1410:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1412              		.loc 1 1410 0
 1413 002e 4FF46053 		mov	r3, #14336
 1414 0032 C4F20203 		movt	r3, 16386
1416:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1415              		.loc 1 1416 0
 1416 0036 24F07041 		bic	r1, r4, #-268435456
1410:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1417              		.loc 1 1410 0
 1418 003a 9A68     		ldr	r2, [r3, #8]
 1419              	.LVL141:
1416:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1420              		.loc 1 1416 0
 1421 003c 21F44071 		bic	r1, r1, #768
1413:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1422              		.loc 1 1413 0
 1423 0040 22F4F812 		bic	r2, r2, #2031616
 1424              	.LVL142:
1416:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1425              		.loc 1 1416 0
 1426 0044 0A43     		orrs	r2, r2, r1
 1427              	.LVL143:
1419:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1428              		.loc 1 1419 0
 1429 0046 9A60     		str	r2, [r3, #8]
 1430              	.LVL144:
 1431              	.L140:
1423:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1432              		.loc 1 1423 0
 1433 0048 4FF46053 		mov	r3, #14336
 1434 004c C4F20203 		movt	r3, 16386
 1435 0050 C4F30B04 		ubfx	r4, r4, #0, #12
 1436              	.LVL145:
 1437 0054 1A6F     		ldr	r2, [r3, #112]
 1438 0056 1443     		orrs	r4, r4, r2
 1439 0058 1C67     		str	r4, [r3, #112]
 1440 005a 10BD     		pop	{r4, pc}
 1441              	.LVL146:
 1442              	.L144:
1406:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1443              		.loc 1 1406 0 discriminator 1
 1444 005c 4FF44073 		mov	r3, #768
 1445 0060 C0F20403 		movt	r3, 4
 1446 0064 20F41022 		bic	r2, r0, #589824
 1447 0068 9A42     		cmp	r2, r3
 1448 006a DBD0     		beq	.L139
 1449 006c 4FF44073 		mov	r3, #768
 1450 0070 C0F20803 		movt	r3, 8
 1451 0074 20F44032 		bic	r2, r0, #196608
 1452 0078 9A42     		cmp	r2, r3
 1453 007a D3D0     		beq	.L139
 1454 007c 4FF44073 		mov	r3, #768
 1455 0080 C0F20E03 		movt	r3, 14
 1456 0084 20F48810 		bic	r0, r0, #1114112
 1457              	.LVL147:
 1458 0088 9842     		cmp	r0, r3
 1459 008a CBD0     		beq	.L139
 1460 008c 4FF44073 		mov	r3, #768
 1461 0090 C0F21003 		movt	r3, 16
 1462 0094 9A42     		cmp	r2, r3
 1463 0096 C5D0     		beq	.L139
 1464 0098 4FF44073 		mov	r3, #768
 1465 009c C0F21403 		movt	r3, 20
 1466 00a0 9A42     		cmp	r2, r3
 1467 00a2 BFD0     		beq	.L139
 1468 00a4 4FF44073 		mov	r3, #768
 1469 00a8 C0F21803 		movt	r3, 24
 1470 00ac 9A42     		cmp	r2, r3
 1471 00ae B9D0     		beq	.L139
 1472 00b0 4FF44073 		mov	r3, #768
 1473 00b4 C0F21C03 		movt	r3, 28
 1474 00b8 9942     		cmp	r1, r3
 1475 00ba B3D0     		beq	.L139
 1476 00bc 40F20000 		movw	r0, #:lower16:.LC0
 1477 00c0 C0F20000 		movt	r0, #:upper16:.LC0
 1478 00c4 40F27E51 		movw	r1, #1406
 1479 00c8 FFF7FEFF 		bl	assert_failed
 1480              	.LVL148:
 1481 00cc AAE7     		b	.L139
 1482              		.cfi_endproc
 1483              	.LFE145:
 1485 00ce 00BF     		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1486              		.align	2
 1487              		.global	RCC_RTCCLKCmd
 1488              		.thumb
 1489              		.thumb_func
 1491              	RCC_RTCCLKCmd:
 1492              	.LFB146:
1434:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1493              		.loc 1 1434 0
 1494              		.cfi_startproc
 1495              		@ args = 0, pretend = 0, frame = 0
 1496              		@ frame_needed = 0, uses_anonymous_args = 0
 1497              	.LVL149:
1436:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1498              		.loc 1 1436 0
 1499 0000 0128     		cmp	r0, #1
1434:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1500              		.loc 1 1434 0
 1501 0002 10B5     		push	{r4, lr}
 1502              	.LCFI22:
 1503              		.cfi_def_cfa_offset 8
 1504              		.cfi_offset 4, -8
 1505              		.cfi_offset 14, -4
1434:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1506              		.loc 1 1434 0
 1507 0004 0446     		mov	r4, r0
1436:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1508              		.loc 1 1436 0
 1509 0006 07D9     		bls	.L146
1436:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1510              		.loc 1 1436 0 is_stmt 0 discriminator 1
 1511 0008 40F20000 		movw	r0, #:lower16:.LC0
 1512              	.LVL150:
 1513 000c C0F20000 		movt	r0, #:upper16:.LC0
 1514 0010 40F29C51 		movw	r1, #1436
 1515 0014 FFF7FEFF 		bl	assert_failed
 1516              	.LVL151:
 1517              	.L146:
1438:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1518              		.loc 1 1438 0 is_stmt 1
 1519 0018 40F63C63 		movw	r3, #3644
 1520 001c C4F24723 		movt	r3, 16967
 1521 0020 1C60     		str	r4, [r3]
 1522 0022 10BD     		pop	{r4, pc}
 1523              		.cfi_endproc
 1524              	.LFE146:
 1526              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1527              		.align	2
 1528              		.global	RCC_BackupResetCmd
 1529              		.thumb
 1530              		.thumb_func
 1532              	RCC_BackupResetCmd:
 1533              	.LFB147:
1451:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1534              		.loc 1 1451 0
 1535              		.cfi_startproc
 1536              		@ args = 0, pretend = 0, frame = 0
 1537              		@ frame_needed = 0, uses_anonymous_args = 0
 1538              	.LVL152:
1453:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1539              		.loc 1 1453 0
 1540 0000 0128     		cmp	r0, #1
1451:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1541              		.loc 1 1451 0
 1542 0002 10B5     		push	{r4, lr}
 1543              	.LCFI23:
 1544              		.cfi_def_cfa_offset 8
 1545              		.cfi_offset 4, -8
 1546              		.cfi_offset 14, -4
1451:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1547              		.loc 1 1451 0
 1548 0004 0446     		mov	r4, r0
1453:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1549              		.loc 1 1453 0
 1550 0006 07D9     		bls	.L148
1453:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1551              		.loc 1 1453 0 is_stmt 0 discriminator 1
 1552 0008 40F20000 		movw	r0, #:lower16:.LC0
 1553              	.LVL153:
 1554 000c C0F20000 		movt	r0, #:upper16:.LC0
 1555 0010 40F2AD51 		movw	r1, #1453
 1556 0014 FFF7FEFF 		bl	assert_failed
 1557              	.LVL154:
 1558              	.L148:
1454:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1559              		.loc 1 1454 0 is_stmt 1
 1560 0018 4FF46463 		mov	r3, #3648
 1561 001c C4F24723 		movt	r3, 16967
 1562 0020 1C60     		str	r4, [r3]
 1563 0022 10BD     		pop	{r4, pc}
 1564              		.cfi_endproc
 1565              	.LFE147:
 1567              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 1568              		.align	2
 1569              		.global	RCC_I2SCLKConfig
 1570              		.thumb
 1571              		.thumb_func
 1573              	RCC_I2SCLKConfig:
 1574              	.LFB148:
1550:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1575              		.loc 1 1550 0
 1576              		.cfi_startproc
 1577              		@ args = 0, pretend = 0, frame = 0
 1578              		@ frame_needed = 0, uses_anonymous_args = 0
 1579              	.LVL155:
1552:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1580              		.loc 1 1552 0
 1581 0000 0128     		cmp	r0, #1
1550:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1582              		.loc 1 1550 0
 1583 0002 10B5     		push	{r4, lr}
 1584              	.LCFI24:
 1585              		.cfi_def_cfa_offset 8
 1586              		.cfi_offset 4, -8
 1587              		.cfi_offset 14, -4
1550:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1588              		.loc 1 1550 0
 1589 0004 0446     		mov	r4, r0
1552:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1590              		.loc 1 1552 0
 1591 0006 07D9     		bls	.L150
1552:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1592              		.loc 1 1552 0 is_stmt 0 discriminator 1
 1593 0008 40F20000 		movw	r0, #:lower16:.LC0
 1594              	.LVL156:
 1595 000c C0F20000 		movt	r0, #:upper16:.LC0
 1596 0010 4FF4C261 		mov	r1, #1552
 1597 0014 FFF7FEFF 		bl	assert_failed
 1598              	.LVL157:
 1599              	.L150:
1554:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1600              		.loc 1 1554 0 is_stmt 1
 1601 0018 4FF4AE73 		mov	r3, #348
 1602 001c C4F24723 		movt	r3, 16967
 1603 0020 1C60     		str	r4, [r3]
 1604 0022 10BD     		pop	{r4, pc}
 1605              		.cfi_endproc
 1606              	.LFE148:
 1608              		.section	.text.RCC_SAIBlockACLKConfig,"ax",%progbits
 1609              		.align	2
 1610              		.global	RCC_SAIBlockACLKConfig
 1611              		.thumb
 1612              		.thumb_func
 1614              	RCC_SAIBlockACLKConfig:
 1615              	.LFB149:
1575:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1616              		.loc 1 1575 0
 1617              		.cfi_startproc
 1618              		@ args = 0, pretend = 0, frame = 0
 1619              		@ frame_needed = 0, uses_anonymous_args = 0
 1620              	.LVL158:
1579:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 1621              		.loc 1 1579 0
 1622 0000 30F48013 		bics	r3, r0, #1048576
1575:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1623              		.loc 1 1575 0
 1624 0004 10B5     		push	{r4, lr}
 1625              	.LCFI25:
 1626              		.cfi_def_cfa_offset 8
 1627              		.cfi_offset 4, -8
 1628              		.cfi_offset 14, -4
1575:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1629              		.loc 1 1575 0
 1630 0006 0446     		mov	r4, r0
1579:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 1631              		.loc 1 1579 0
 1632 0008 0AD0     		beq	.L152
1579:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 1633              		.loc 1 1579 0 is_stmt 0 discriminator 1
 1634 000a B0F5001F 		cmp	r0, #2097152
 1635 000e 07D0     		beq	.L152
 1636 0010 40F20000 		movw	r0, #:lower16:.LC0
 1637              	.LVL159:
 1638 0014 C0F20000 		movt	r0, #:upper16:.LC0
 1639 0018 40F22B61 		movw	r1, #1579
 1640 001c FFF7FEFF 		bl	assert_failed
 1641              	.LVL160:
 1642              	.L152:
1581:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1643              		.loc 1 1581 0 is_stmt 1
 1644 0020 4FF46053 		mov	r3, #14336
 1645 0024 C4F20203 		movt	r3, 16386
 1646 0028 D3F88C20 		ldr	r2, [r3, #140]
 1647              	.LVL161:
1584:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1648              		.loc 1 1584 0
 1649 002c 22F44012 		bic	r2, r2, #3145728
 1650              	.LVL162:
1587:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1651              		.loc 1 1587 0
 1652 0030 1443     		orrs	r4, r4, r2
 1653              	.LVL163:
1590:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1654              		.loc 1 1590 0
 1655 0032 C3F88C40 		str	r4, [r3, #140]
 1656 0036 10BD     		pop	{r4, pc}
 1657              		.cfi_endproc
 1658              	.LFE149:
 1660              		.section	.text.RCC_SAIBlockBCLKConfig,"ax",%progbits
 1661              		.align	2
 1662              		.global	RCC_SAIBlockBCLKConfig
 1663              		.thumb
 1664              		.thumb_func
 1666              	RCC_SAIBlockBCLKConfig:
 1667              	.LFB150:
1611:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1668              		.loc 1 1611 0
 1669              		.cfi_startproc
 1670              		@ args = 0, pretend = 0, frame = 0
 1671              		@ frame_needed = 0, uses_anonymous_args = 0
 1672              	.LVL164:
1615:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 1673              		.loc 1 1615 0
 1674 0000 30F48003 		bics	r3, r0, #4194304
1611:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1675              		.loc 1 1611 0
 1676 0004 10B5     		push	{r4, lr}
 1677              	.LCFI26:
 1678              		.cfi_def_cfa_offset 8
 1679              		.cfi_offset 4, -8
 1680              		.cfi_offset 14, -4
1611:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1681              		.loc 1 1611 0
 1682 0006 0446     		mov	r4, r0
1615:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 1683              		.loc 1 1615 0
 1684 0008 0AD0     		beq	.L160
1615:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 1685              		.loc 1 1615 0 is_stmt 0 discriminator 1
 1686 000a B0F5000F 		cmp	r0, #8388608
 1687 000e 07D0     		beq	.L160
 1688 0010 40F20000 		movw	r0, #:lower16:.LC0
 1689              	.LVL165:
 1690 0014 C0F20000 		movt	r0, #:upper16:.LC0
 1691 0018 40F24F61 		movw	r1, #1615
 1692 001c FFF7FEFF 		bl	assert_failed
 1693              	.LVL166:
 1694              	.L160:
1617:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1695              		.loc 1 1617 0 is_stmt 1
 1696 0020 4FF46053 		mov	r3, #14336
 1697 0024 C4F20203 		movt	r3, 16386
 1698 0028 D3F88C20 		ldr	r2, [r3, #140]
 1699              	.LVL167:
1620:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1700              		.loc 1 1620 0
 1701 002c 22F44002 		bic	r2, r2, #12582912
 1702              	.LVL168:
1623:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1703              		.loc 1 1623 0
 1704 0030 1443     		orrs	r4, r4, r2
 1705              	.LVL169:
1626:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1706              		.loc 1 1626 0
 1707 0032 C3F88C40 		str	r4, [r3, #140]
 1708 0036 10BD     		pop	{r4, pc}
 1709              		.cfi_endproc
 1710              	.LFE150:
 1712              		.section	.text.RCC_SAIPLLI2SClkDivConfig,"ax",%progbits
 1713              		.align	2
 1714              		.global	RCC_SAIPLLI2SClkDivConfig
 1715              		.thumb
 1716              		.thumb_func
 1718              	RCC_SAIPLLI2SClkDivConfig:
 1719              	.LFB151:
1644:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1720              		.loc 1 1644 0
 1721              		.cfi_startproc
 1722              		@ args = 0, pretend = 0, frame = 0
 1723              		@ frame_needed = 0, uses_anonymous_args = 0
 1724              	.LVL170:
 1725 0000 10B5     		push	{r4, lr}
 1726              	.LCFI27:
 1727              		.cfi_def_cfa_offset 8
 1728              		.cfi_offset 4, -8
 1729              		.cfi_offset 14, -4
1648:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 1730              		.loc 1 1648 0
 1731 0002 441E     		subs	r4, r0, #1
 1732 0004 1F2C     		cmp	r4, #31
 1733 0006 07D9     		bls	.L168
1648:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 1734              		.loc 1 1648 0 is_stmt 0 discriminator 1
 1735 0008 40F20000 		movw	r0, #:lower16:.LC0
 1736              	.LVL171:
 1737 000c C0F20000 		movt	r0, #:upper16:.LC0
 1738 0010 4FF4CE61 		mov	r1, #1648
 1739 0014 FFF7FEFF 		bl	assert_failed
 1740              	.LVL172:
 1741              	.L168:
1650:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1742              		.loc 1 1650 0 is_stmt 1
 1743 0018 4FF46053 		mov	r3, #14336
 1744 001c C4F20203 		movt	r3, 16386
 1745 0020 D3F88C20 		ldr	r2, [r3, #140]
 1746              	.LVL173:
1653:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1747              		.loc 1 1653 0
 1748 0024 22F01F02 		bic	r2, r2, #31
 1749              	.LVL174:
1656:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1750              		.loc 1 1656 0
 1751 0028 1443     		orrs	r4, r4, r2
 1752              	.LVL175:
1659:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1753              		.loc 1 1659 0
 1754 002a C3F88C40 		str	r4, [r3, #140]
 1755 002e 10BD     		pop	{r4, pc}
 1756              		.cfi_endproc
 1757              	.LFE151:
 1759              		.section	.text.RCC_SAIPLLSAIClkDivConfig,"ax",%progbits
 1760              		.align	2
 1761              		.global	RCC_SAIPLLSAIClkDivConfig
 1762              		.thumb
 1763              		.thumb_func
 1765              	RCC_SAIPLLSAIClkDivConfig:
 1766              	.LFB152:
1676:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1767              		.loc 1 1676 0
 1768              		.cfi_startproc
 1769              		@ args = 0, pretend = 0, frame = 0
 1770              		@ frame_needed = 0, uses_anonymous_args = 0
 1771              	.LVL176:
 1772 0000 10B5     		push	{r4, lr}
 1773              	.LCFI28:
 1774              		.cfi_def_cfa_offset 8
 1775              		.cfi_offset 4, -8
 1776              		.cfi_offset 14, -4
1680:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 1777              		.loc 1 1680 0
 1778 0002 441E     		subs	r4, r0, #1
 1779 0004 1F2C     		cmp	r4, #31
 1780 0006 07D9     		bls	.L170
1680:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 1781              		.loc 1 1680 0 is_stmt 0 discriminator 1
 1782 0008 40F20000 		movw	r0, #:lower16:.LC0
 1783              	.LVL177:
 1784 000c C0F20000 		movt	r0, #:upper16:.LC0
 1785 0010 4FF4D261 		mov	r1, #1680
 1786 0014 FFF7FEFF 		bl	assert_failed
 1787              	.LVL178:
 1788              	.L170:
1682:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1789              		.loc 1 1682 0 is_stmt 1
 1790 0018 4FF46053 		mov	r3, #14336
 1791 001c C4F20203 		movt	r3, 16386
 1792 0020 D3F88C20 		ldr	r2, [r3, #140]
 1793              	.LVL179:
1685:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1794              		.loc 1 1685 0
 1795 0024 22F4F852 		bic	r2, r2, #7936
 1796              	.LVL180:
1688:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1797              		.loc 1 1688 0
 1798 0028 42EA0424 		orr	r4, r2, r4, lsl #8
 1799              	.LVL181:
1691:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1800              		.loc 1 1691 0
 1801 002c C3F88C40 		str	r4, [r3, #140]
 1802 0030 10BD     		pop	{r4, pc}
 1803              		.cfi_endproc
 1804              	.LFE152:
 1806 0032 00BF     		.section	.text.RCC_LTDCCLKDivConfig,"ax",%progbits
 1807              		.align	2
 1808              		.global	RCC_LTDCCLKDivConfig
 1809              		.thumb
 1810              		.thumb_func
 1812              	RCC_LTDCCLKDivConfig:
 1813              	.LFB153:
1712:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1814              		.loc 1 1712 0
 1815              		.cfi_startproc
 1816              		@ args = 0, pretend = 0, frame = 0
 1817              		@ frame_needed = 0, uses_anonymous_args = 0
 1818              	.LVL182:
1716:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 1819              		.loc 1 1716 0
 1820 0000 30F44033 		bics	r3, r0, #196608
1712:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1821              		.loc 1 1712 0
 1822 0004 10B5     		push	{r4, lr}
 1823              	.LCFI29:
 1824              		.cfi_def_cfa_offset 8
 1825              		.cfi_offset 4, -8
 1826              		.cfi_offset 14, -4
1712:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1827              		.loc 1 1712 0
 1828 0006 0446     		mov	r4, r0
1716:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 1829              		.loc 1 1716 0
 1830 0008 07D0     		beq	.L172
1716:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 1831              		.loc 1 1716 0 is_stmt 0 discriminator 1
 1832 000a 40F20000 		movw	r0, #:lower16:.LC0
 1833              	.LVL183:
 1834 000e C0F20000 		movt	r0, #:upper16:.LC0
 1835 0012 40F2B461 		movw	r1, #1716
 1836 0016 FFF7FEFF 		bl	assert_failed
 1837              	.LVL184:
 1838              	.L172:
1718:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1839              		.loc 1 1718 0 is_stmt 1
 1840 001a 4FF46053 		mov	r3, #14336
 1841 001e C4F20203 		movt	r3, 16386
 1842 0022 D3F88C20 		ldr	r2, [r3, #140]
 1843              	.LVL185:
1721:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1844              		.loc 1 1721 0
 1845 0026 22F44032 		bic	r2, r2, #196608
 1846              	.LVL186:
1724:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1847              		.loc 1 1724 0
 1848 002a 1443     		orrs	r4, r4, r2
 1849              	.LVL187:
1727:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1850              		.loc 1 1727 0
 1851 002c C3F88C40 		str	r4, [r3, #140]
 1852 0030 10BD     		pop	{r4, pc}
 1853              		.cfi_endproc
 1854              	.LFE153:
 1856 0032 00BF     		.section	.text.RCC_TIMCLKPresConfig,"ax",%progbits
 1857              		.align	2
 1858              		.global	RCC_TIMCLKPresConfig
 1859              		.thumb
 1860              		.thumb_func
 1862              	RCC_TIMCLKPresConfig:
 1863              	.LFB154:
1749:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1864              		.loc 1 1749 0
 1865              		.cfi_startproc
 1866              		@ args = 0, pretend = 0, frame = 0
 1867              		@ frame_needed = 0, uses_anonymous_args = 0
 1868              	.LVL188:
1751:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1869              		.loc 1 1751 0
 1870 0000 0128     		cmp	r0, #1
1749:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1871              		.loc 1 1749 0
 1872 0002 10B5     		push	{r4, lr}
 1873              	.LCFI30:
 1874              		.cfi_def_cfa_offset 8
 1875              		.cfi_offset 4, -8
 1876              		.cfi_offset 14, -4
1749:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1877              		.loc 1 1749 0
 1878 0004 0446     		mov	r4, r0
1751:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1879              		.loc 1 1751 0
 1880 0006 07D9     		bls	.L177
1751:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1881              		.loc 1 1751 0 is_stmt 0 discriminator 1
 1882 0008 40F20000 		movw	r0, #:lower16:.LC0
 1883              	.LVL189:
 1884 000c C0F20000 		movt	r0, #:upper16:.LC0
 1885 0010 40F2D761 		movw	r1, #1751
 1886 0014 FFF7FEFF 		bl	assert_failed
 1887              	.LVL190:
 1888              	.L177:
1753:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1889              		.loc 1 1753 0 is_stmt 1
 1890 0018 4FF48F53 		mov	r3, #4576
 1891 001c C4F24723 		movt	r3, 16967
 1892 0020 1C60     		str	r4, [r3]
 1893 0022 10BD     		pop	{r4, pc}
 1894              		.cfi_endproc
 1895              	.LFE154:
 1897              		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 1898              		.align	2
 1899              		.global	RCC_AHB1PeriphClockCmd
 1900              		.thumb
 1901              		.thumb_func
 1903              	RCC_AHB1PeriphClockCmd:
 1904              	.LFB155:
1791:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1905              		.loc 1 1791 0
 1906              		.cfi_startproc
 1907              		@ args = 0, pretend = 0, frame = 0
 1908              		@ frame_needed = 0, uses_anonymous_args = 0
 1909              	.LVL191:
 1910 0000 38B5     		push	{r3, r4, r5, lr}
 1911              	.LCFI31:
 1912              		.cfi_def_cfa_offset 16
 1913              		.cfi_offset 3, -16
 1914              		.cfi_offset 4, -12
 1915              		.cfi_offset 5, -8
 1916              		.cfi_offset 14, -4
1793:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1917              		.loc 1 1793 0
 1918 0002 4FF46843 		mov	r3, #59392
 1919 0006 C8F20B13 		movt	r3, 33035
 1920 000a 0340     		ands	r3, r3, r0
1791:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1921              		.loc 1 1791 0
 1922 000c 0446     		mov	r4, r0
 1923 000e 0D46     		mov	r5, r1
1793:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1924              		.loc 1 1793 0
 1925 0010 93B9     		cbnz	r3, .L179
1793:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1926              		.loc 1 1793 0 is_stmt 0 discriminator 2
 1927 0012 88B1     		cbz	r0, .L179
1795:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1928              		.loc 1 1795 0 is_stmt 1
 1929 0014 012D     		cmp	r5, #1
 1930 0016 19D9     		bls	.L181
 1931              	.LVL192:
 1932              	.L185:
1795:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1933              		.loc 1 1795 0 is_stmt 0 discriminator 1
 1934 0018 40F20000 		movw	r0, #:lower16:.LC0
 1935 001c C0F20000 		movt	r0, #:upper16:.LC0
 1936 0020 40F20371 		movw	r1, #1795
 1937 0024 FFF7FEFF 		bl	assert_failed
 1938              	.LVL193:
 1939              	.L182:
1798:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1940              		.loc 1 1798 0 is_stmt 1
 1941 0028 4FF46053 		mov	r3, #14336
 1942 002c C4F20203 		movt	r3, 16386
 1943 0030 1A6B     		ldr	r2, [r3, #48]
 1944 0032 1443     		orrs	r4, r4, r2
 1945              	.LVL194:
 1946 0034 1C63     		str	r4, [r3, #48]
 1947 0036 38BD     		pop	{r3, r4, r5, pc}
 1948              	.LVL195:
 1949              	.L179:
1793:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1950              		.loc 1 1793 0 discriminator 1
 1951 0038 40F20000 		movw	r0, #:lower16:.LC0
 1952              	.LVL196:
 1953 003c C0F20000 		movt	r0, #:upper16:.LC0
 1954 0040 40F20171 		movw	r1, #1793
 1955              	.LVL197:
 1956 0044 FFF7FEFF 		bl	assert_failed
 1957              	.LVL198:
1795:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1958              		.loc 1 1795 0 discriminator 1
 1959 0048 012D     		cmp	r5, #1
 1960 004a E5D8     		bhi	.L185
 1961              	.L181:
1796:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1962              		.loc 1 1796 0
 1963 004c 002D     		cmp	r5, #0
 1964 004e EBD1     		bne	.L182
1802:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1965              		.loc 1 1802 0
 1966 0050 4FF46053 		mov	r3, #14336
 1967 0054 C4F20203 		movt	r3, 16386
 1968 0058 1A6B     		ldr	r2, [r3, #48]
 1969 005a 22EA0404 		bic	r4, r2, r4
 1970              	.LVL199:
 1971 005e 1C63     		str	r4, [r3, #48]
 1972 0060 38BD     		pop	{r3, r4, r5, pc}
 1973              		.cfi_endproc
 1974              	.LFE155:
 1976 0062 00BF     		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 1977              		.align	2
 1978              		.global	RCC_AHB2PeriphClockCmd
 1979              		.thumb
 1980              		.thumb_func
 1982              	RCC_AHB2PeriphClockCmd:
 1983              	.LFB156:
1823:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1984              		.loc 1 1823 0
 1985              		.cfi_startproc
 1986              		@ args = 0, pretend = 0, frame = 0
 1987              		@ frame_needed = 0, uses_anonymous_args = 0
 1988              	.LVL200:
 1989 0000 38B5     		push	{r3, r4, r5, lr}
 1990              	.LCFI32:
 1991              		.cfi_def_cfa_offset 16
 1992              		.cfi_offset 3, -16
 1993              		.cfi_offset 4, -12
 1994              		.cfi_offset 5, -8
 1995              		.cfi_offset 14, -4
1825:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1996              		.loc 1 1825 0
 1997 0002 30F0F103 		bics	r3, r0, #241
1823:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1998              		.loc 1 1823 0
 1999 0006 0446     		mov	r4, r0
 2000 0008 0D46     		mov	r5, r1
1825:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2001              		.loc 1 1825 0
 2002 000a 12D1     		bne	.L187
1825:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2003              		.loc 1 1825 0 is_stmt 0 discriminator 2
 2004 000c 88B1     		cbz	r0, .L187
1826:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2005              		.loc 1 1826 0 is_stmt 1
 2006 000e 012D     		cmp	r5, #1
 2007 0010 19D9     		bls	.L189
 2008              	.LVL201:
 2009              	.L193:
1826:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2010              		.loc 1 1826 0 is_stmt 0 discriminator 1
 2011 0012 40F20000 		movw	r0, #:lower16:.LC0
 2012 0016 C0F20000 		movt	r0, #:upper16:.LC0
 2013 001a 40F22271 		movw	r1, #1826
 2014 001e FFF7FEFF 		bl	assert_failed
 2015              	.LVL202:
 2016              	.L190:
1830:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2017              		.loc 1 1830 0 is_stmt 1
 2018 0022 4FF46053 		mov	r3, #14336
 2019 0026 C4F20203 		movt	r3, 16386
 2020 002a 5A6B     		ldr	r2, [r3, #52]
 2021 002c 1443     		orrs	r4, r4, r2
 2022              	.LVL203:
 2023 002e 5C63     		str	r4, [r3, #52]
 2024 0030 38BD     		pop	{r3, r4, r5, pc}
 2025              	.LVL204:
 2026              	.L187:
1825:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2027              		.loc 1 1825 0 discriminator 1
 2028 0032 40F20000 		movw	r0, #:lower16:.LC0
 2029              	.LVL205:
 2030 0036 C0F20000 		movt	r0, #:upper16:.LC0
 2031 003a 40F22171 		movw	r1, #1825
 2032              	.LVL206:
 2033 003e FFF7FEFF 		bl	assert_failed
 2034              	.LVL207:
1826:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2035              		.loc 1 1826 0 discriminator 1
 2036 0042 012D     		cmp	r5, #1
 2037 0044 E5D8     		bhi	.L193
 2038              	.L189:
1828:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 2039              		.loc 1 1828 0
 2040 0046 002D     		cmp	r5, #0
 2041 0048 EBD1     		bne	.L190
1834:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2042              		.loc 1 1834 0
 2043 004a 4FF46053 		mov	r3, #14336
 2044 004e C4F20203 		movt	r3, 16386
 2045 0052 5A6B     		ldr	r2, [r3, #52]
 2046 0054 22EA0404 		bic	r4, r2, r4
 2047              	.LVL208:
 2048 0058 5C63     		str	r4, [r3, #52]
 2049 005a 38BD     		pop	{r3, r4, r5, pc}
 2050              		.cfi_endproc
 2051              	.LFE156:
 2053              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 2054              		.align	2
 2055              		.global	RCC_APB1PeriphClockCmd
 2056              		.thumb
 2057              		.thumb_func
 2059              	RCC_APB1PeriphClockCmd:
 2060              	.LFB157:
1909:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2061              		.loc 1 1909 0
 2062              		.cfi_startproc
 2063              		@ args = 0, pretend = 0, frame = 0
 2064              		@ frame_needed = 0, uses_anonymous_args = 0
 2065              	.LVL209:
1911:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2066              		.loc 1 1911 0
 2067 0000 10F4585F 		tst	r0, #13824
1909:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2068              		.loc 1 1909 0
 2069 0004 38B5     		push	{r3, r4, r5, lr}
 2070              	.LCFI33:
 2071              		.cfi_def_cfa_offset 16
 2072              		.cfi_offset 3, -16
 2073              		.cfi_offset 4, -12
 2074              		.cfi_offset 5, -8
 2075              		.cfi_offset 14, -4
1909:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2076              		.loc 1 1909 0
 2077 0006 0446     		mov	r4, r0
 2078 0008 0D46     		mov	r5, r1
1911:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2079              		.loc 1 1911 0
 2080 000a 12D1     		bne	.L195
1911:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2081              		.loc 1 1911 0 is_stmt 0 discriminator 2
 2082 000c 88B1     		cbz	r0, .L195
1912:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2083              		.loc 1 1912 0 is_stmt 1
 2084 000e 012D     		cmp	r5, #1
 2085 0010 19D9     		bls	.L197
 2086              	.LVL210:
 2087              	.L201:
1912:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2088              		.loc 1 1912 0 is_stmt 0 discriminator 1
 2089 0012 40F20000 		movw	r0, #:lower16:.LC0
 2090 0016 C0F20000 		movt	r0, #:upper16:.LC0
 2091 001a 4FF4EF61 		mov	r1, #1912
 2092 001e FFF7FEFF 		bl	assert_failed
 2093              	.LVL211:
 2094              	.L198:
1916:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2095              		.loc 1 1916 0 is_stmt 1
 2096 0022 4FF46053 		mov	r3, #14336
 2097 0026 C4F20203 		movt	r3, 16386
 2098 002a 1A6C     		ldr	r2, [r3, #64]
 2099 002c 1443     		orrs	r4, r4, r2
 2100              	.LVL212:
 2101 002e 1C64     		str	r4, [r3, #64]
 2102 0030 38BD     		pop	{r3, r4, r5, pc}
 2103              	.LVL213:
 2104              	.L195:
1911:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2105              		.loc 1 1911 0 discriminator 1
 2106 0032 40F20000 		movw	r0, #:lower16:.LC0
 2107              	.LVL214:
 2108 0036 C0F20000 		movt	r0, #:upper16:.LC0
 2109 003a 40F27771 		movw	r1, #1911
 2110              	.LVL215:
 2111 003e FFF7FEFF 		bl	assert_failed
 2112              	.LVL216:
1912:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2113              		.loc 1 1912 0 discriminator 1
 2114 0042 012D     		cmp	r5, #1
 2115 0044 E5D8     		bhi	.L201
 2116              	.L197:
1914:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 2117              		.loc 1 1914 0
 2118 0046 002D     		cmp	r5, #0
 2119 0048 EBD1     		bne	.L198
1920:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2120              		.loc 1 1920 0
 2121 004a 4FF46053 		mov	r3, #14336
 2122 004e C4F20203 		movt	r3, 16386
 2123 0052 1A6C     		ldr	r2, [r3, #64]
 2124 0054 22EA0404 		bic	r4, r2, r4
 2125              	.LVL217:
 2126 0058 1C64     		str	r4, [r3, #64]
 2127 005a 38BD     		pop	{r3, r4, r5, pc}
 2128              		.cfi_endproc
 2129              	.LFE157:
 2131              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 2132              		.align	2
 2133              		.global	RCC_APB2PeriphClockCmd
 2134              		.thumb
 2135              		.thumb_func
 2137              	RCC_APB2PeriphClockCmd:
 2138              	.LFB158:
1955:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2139              		.loc 1 1955 0
 2140              		.cfi_startproc
 2141              		@ args = 0, pretend = 0, frame = 0
 2142              		@ frame_needed = 0, uses_anonymous_args = 0
 2143              	.LVL218:
 2144 0000 38B5     		push	{r3, r4, r5, lr}
 2145              	.LCFI34:
 2146              		.cfi_def_cfa_offset 16
 2147              		.cfi_offset 3, -16
 2148              		.cfi_offset 4, -12
 2149              		.cfi_offset 5, -8
 2150              		.cfi_offset 14, -4
1957:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2151              		.loc 1 1957 0
 2152 0002 48F2CC03 		movw	r3, #32972
 2153 0006 CFF20833 		movt	r3, 62216
 2154 000a 0340     		ands	r3, r3, r0
1955:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2155              		.loc 1 1955 0
 2156 000c 0446     		mov	r4, r0
 2157 000e 0D46     		mov	r5, r1
1957:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2158              		.loc 1 1957 0
 2159 0010 93B9     		cbnz	r3, .L203
1957:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2160              		.loc 1 1957 0 is_stmt 0 discriminator 2
 2161 0012 88B1     		cbz	r0, .L203
1958:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2162              		.loc 1 1958 0 is_stmt 1
 2163 0014 012D     		cmp	r5, #1
 2164 0016 19D9     		bls	.L205
 2165              	.LVL219:
 2166              	.L209:
1958:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2167              		.loc 1 1958 0 is_stmt 0 discriminator 1
 2168 0018 40F20000 		movw	r0, #:lower16:.LC0
 2169 001c C0F20000 		movt	r0, #:upper16:.LC0
 2170 0020 40F2A671 		movw	r1, #1958
 2171 0024 FFF7FEFF 		bl	assert_failed
 2172              	.LVL220:
 2173              	.L206:
1962:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2174              		.loc 1 1962 0 is_stmt 1
 2175 0028 4FF46053 		mov	r3, #14336
 2176 002c C4F20203 		movt	r3, 16386
 2177 0030 5A6C     		ldr	r2, [r3, #68]
 2178 0032 1443     		orrs	r4, r4, r2
 2179              	.LVL221:
 2180 0034 5C64     		str	r4, [r3, #68]
 2181 0036 38BD     		pop	{r3, r4, r5, pc}
 2182              	.LVL222:
 2183              	.L203:
1957:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2184              		.loc 1 1957 0 discriminator 1
 2185 0038 40F20000 		movw	r0, #:lower16:.LC0
 2186              	.LVL223:
 2187 003c C0F20000 		movt	r0, #:upper16:.LC0
 2188 0040 40F2A571 		movw	r1, #1957
 2189              	.LVL224:
 2190 0044 FFF7FEFF 		bl	assert_failed
 2191              	.LVL225:
1958:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2192              		.loc 1 1958 0 discriminator 1
 2193 0048 012D     		cmp	r5, #1
 2194 004a E5D8     		bhi	.L209
 2195              	.L205:
1960:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 2196              		.loc 1 1960 0
 2197 004c 002D     		cmp	r5, #0
 2198 004e EBD1     		bne	.L206
1966:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2199              		.loc 1 1966 0
 2200 0050 4FF46053 		mov	r3, #14336
 2201 0054 C4F20203 		movt	r3, 16386
 2202 0058 5A6C     		ldr	r2, [r3, #68]
 2203 005a 22EA0404 		bic	r4, r2, r4
 2204              	.LVL226:
 2205 005e 5C64     		str	r4, [r3, #68]
 2206 0060 38BD     		pop	{r3, r4, r5, pc}
 2207              		.cfi_endproc
 2208              	.LFE158:
 2210 0062 00BF     		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 2211              		.align	2
 2212              		.global	RCC_AHB1PeriphResetCmd
 2213              		.thumb
 2214              		.thumb_func
 2216              	RCC_AHB1PeriphResetCmd:
 2217              	.LFB159:
1997:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2218              		.loc 1 1997 0
 2219              		.cfi_startproc
 2220              		@ args = 0, pretend = 0, frame = 0
 2221              		@ frame_needed = 0, uses_anonymous_args = 0
 2222              	.LVL227:
 2223 0000 38B5     		push	{r3, r4, r5, lr}
 2224              	.LCFI35:
 2225              		.cfi_def_cfa_offset 16
 2226              		.cfi_offset 3, -16
 2227              		.cfi_offset 4, -12
 2228              		.cfi_offset 5, -8
 2229              		.cfi_offset 14, -4
1999:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2230              		.loc 1 1999 0
 2231 0002 4FF46843 		mov	r3, #59392
 2232 0006 CDF61F53 		movt	r3, 56607
 2233 000a 0340     		ands	r3, r3, r0
1997:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2234              		.loc 1 1997 0
 2235 000c 0446     		mov	r4, r0
 2236 000e 0D46     		mov	r5, r1
1999:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2237              		.loc 1 1999 0
 2238 0010 93B9     		cbnz	r3, .L211
1999:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2239              		.loc 1 1999 0 is_stmt 0 discriminator 2
 2240 0012 88B1     		cbz	r0, .L211
2000:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2241              		.loc 1 2000 0 is_stmt 1
 2242 0014 012D     		cmp	r5, #1
 2243 0016 19D9     		bls	.L213
 2244              	.LVL228:
 2245              	.L217:
2000:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2246              		.loc 1 2000 0 is_stmt 0 discriminator 1
 2247 0018 40F20000 		movw	r0, #:lower16:.LC0
 2248 001c C0F20000 		movt	r0, #:upper16:.LC0
 2249 0020 4FF4FA61 		mov	r1, #2000
 2250 0024 FFF7FEFF 		bl	assert_failed
 2251              	.LVL229:
 2252              	.L214:
2004:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2253              		.loc 1 2004 0 is_stmt 1
 2254 0028 4FF46053 		mov	r3, #14336
 2255 002c C4F20203 		movt	r3, 16386
 2256 0030 1A69     		ldr	r2, [r3, #16]
 2257 0032 1443     		orrs	r4, r4, r2
 2258              	.LVL230:
 2259 0034 1C61     		str	r4, [r3, #16]
 2260 0036 38BD     		pop	{r3, r4, r5, pc}
 2261              	.LVL231:
 2262              	.L211:
1999:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2263              		.loc 1 1999 0 discriminator 1
 2264 0038 40F20000 		movw	r0, #:lower16:.LC0
 2265              	.LVL232:
 2266 003c C0F20000 		movt	r0, #:upper16:.LC0
 2267 0040 40F2CF71 		movw	r1, #1999
 2268              	.LVL233:
 2269 0044 FFF7FEFF 		bl	assert_failed
 2270              	.LVL234:
2000:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2271              		.loc 1 2000 0 discriminator 1
 2272 0048 012D     		cmp	r5, #1
 2273 004a E5D8     		bhi	.L217
 2274              	.L213:
2002:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 2275              		.loc 1 2002 0
 2276 004c 002D     		cmp	r5, #0
 2277 004e EBD1     		bne	.L214
2008:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2278              		.loc 1 2008 0
 2279 0050 4FF46053 		mov	r3, #14336
 2280 0054 C4F20203 		movt	r3, 16386
 2281 0058 1A69     		ldr	r2, [r3, #16]
 2282 005a 22EA0404 		bic	r4, r2, r4
 2283              	.LVL235:
 2284 005e 1C61     		str	r4, [r3, #16]
 2285 0060 38BD     		pop	{r3, r4, r5, pc}
 2286              		.cfi_endproc
 2287              	.LFE159:
 2289 0062 00BF     		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 2290              		.align	2
 2291              		.global	RCC_AHB2PeriphResetCmd
 2292              		.thumb
 2293              		.thumb_func
 2295              	RCC_AHB2PeriphResetCmd:
 2296              	.LFB160:
2026:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2297              		.loc 1 2026 0
 2298              		.cfi_startproc
 2299              		@ args = 0, pretend = 0, frame = 0
 2300              		@ frame_needed = 0, uses_anonymous_args = 0
 2301              	.LVL236:
 2302 0000 38B5     		push	{r3, r4, r5, lr}
 2303              	.LCFI36:
 2304              		.cfi_def_cfa_offset 16
 2305              		.cfi_offset 3, -16
 2306              		.cfi_offset 4, -12
 2307              		.cfi_offset 5, -8
 2308              		.cfi_offset 14, -4
2028:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2309              		.loc 1 2028 0
 2310 0002 30F0F103 		bics	r3, r0, #241
2026:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2311              		.loc 1 2026 0
 2312 0006 0446     		mov	r4, r0
 2313 0008 0D46     		mov	r5, r1
2028:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2314              		.loc 1 2028 0
 2315 000a 12D1     		bne	.L219
2028:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2316              		.loc 1 2028 0 is_stmt 0 discriminator 2
 2317 000c 88B1     		cbz	r0, .L219
2029:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2318              		.loc 1 2029 0 is_stmt 1
 2319 000e 012D     		cmp	r5, #1
 2320 0010 19D9     		bls	.L221
 2321              	.LVL237:
 2322              	.L225:
2029:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2323              		.loc 1 2029 0 is_stmt 0 discriminator 1
 2324 0012 40F20000 		movw	r0, #:lower16:.LC0
 2325 0016 C0F20000 		movt	r0, #:upper16:.LC0
 2326 001a 40F2ED71 		movw	r1, #2029
 2327 001e FFF7FEFF 		bl	assert_failed
 2328              	.LVL238:
 2329              	.L222:
2033:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2330              		.loc 1 2033 0 is_stmt 1
 2331 0022 4FF46053 		mov	r3, #14336
 2332 0026 C4F20203 		movt	r3, 16386
 2333 002a 5A69     		ldr	r2, [r3, #20]
 2334 002c 1443     		orrs	r4, r4, r2
 2335              	.LVL239:
 2336 002e 5C61     		str	r4, [r3, #20]
 2337 0030 38BD     		pop	{r3, r4, r5, pc}
 2338              	.LVL240:
 2339              	.L219:
2028:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2340              		.loc 1 2028 0 discriminator 1
 2341 0032 40F20000 		movw	r0, #:lower16:.LC0
 2342              	.LVL241:
 2343 0036 C0F20000 		movt	r0, #:upper16:.LC0
 2344 003a 40F2EC71 		movw	r1, #2028
 2345              	.LVL242:
 2346 003e FFF7FEFF 		bl	assert_failed
 2347              	.LVL243:
2029:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2348              		.loc 1 2029 0 discriminator 1
 2349 0042 012D     		cmp	r5, #1
 2350 0044 E5D8     		bhi	.L225
 2351              	.L221:
2031:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 2352              		.loc 1 2031 0
 2353 0046 002D     		cmp	r5, #0
 2354 0048 EBD1     		bne	.L222
2037:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2355              		.loc 1 2037 0
 2356 004a 4FF46053 		mov	r3, #14336
 2357 004e C4F20203 		movt	r3, 16386
 2358 0052 5A69     		ldr	r2, [r3, #20]
 2359 0054 22EA0404 		bic	r4, r2, r4
 2360              	.LVL244:
 2361 0058 5C61     		str	r4, [r3, #20]
 2362 005a 38BD     		pop	{r3, r4, r5, pc}
 2363              		.cfi_endproc
 2364              	.LFE160:
 2366              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 2367              		.align	2
 2368              		.global	RCC_APB1PeriphResetCmd
 2369              		.thumb
 2370              		.thumb_func
 2372              	RCC_APB1PeriphResetCmd:
 2373              	.LFB161:
2106:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2374              		.loc 1 2106 0
 2375              		.cfi_startproc
 2376              		@ args = 0, pretend = 0, frame = 0
 2377              		@ frame_needed = 0, uses_anonymous_args = 0
 2378              	.LVL245:
2108:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2379              		.loc 1 2108 0
 2380 0000 10F4585F 		tst	r0, #13824
2106:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2381              		.loc 1 2106 0
 2382 0004 38B5     		push	{r3, r4, r5, lr}
 2383              	.LCFI37:
 2384              		.cfi_def_cfa_offset 16
 2385              		.cfi_offset 3, -16
 2386              		.cfi_offset 4, -12
 2387              		.cfi_offset 5, -8
 2388              		.cfi_offset 14, -4
2106:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2389              		.loc 1 2106 0
 2390 0006 0446     		mov	r4, r0
 2391 0008 0D46     		mov	r5, r1
2108:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2392              		.loc 1 2108 0
 2393 000a 12D1     		bne	.L227
2108:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2394              		.loc 1 2108 0 is_stmt 0 discriminator 2
 2395 000c 88B1     		cbz	r0, .L227
2109:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2396              		.loc 1 2109 0 is_stmt 1
 2397 000e 012D     		cmp	r5, #1
 2398 0010 19D9     		bls	.L229
 2399              	.LVL246:
 2400              	.L233:
2109:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2401              		.loc 1 2109 0 is_stmt 0 discriminator 1
 2402 0012 40F20000 		movw	r0, #:lower16:.LC0
 2403 0016 C0F20000 		movt	r0, #:upper16:.LC0
 2404 001a 40F63D01 		movw	r1, #2109
 2405 001e FFF7FEFF 		bl	assert_failed
 2406              	.LVL247:
 2407              	.L230:
2112:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2408              		.loc 1 2112 0 is_stmt 1
 2409 0022 4FF46053 		mov	r3, #14336
 2410 0026 C4F20203 		movt	r3, 16386
 2411 002a 1A6A     		ldr	r2, [r3, #32]
 2412 002c 1443     		orrs	r4, r4, r2
 2413              	.LVL248:
 2414 002e 1C62     		str	r4, [r3, #32]
 2415 0030 38BD     		pop	{r3, r4, r5, pc}
 2416              	.LVL249:
 2417              	.L227:
2108:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2418              		.loc 1 2108 0 discriminator 1
 2419 0032 40F20000 		movw	r0, #:lower16:.LC0
 2420              	.LVL250:
 2421 0036 C0F20000 		movt	r0, #:upper16:.LC0
 2422 003a 40F63C01 		movw	r1, #2108
 2423              	.LVL251:
 2424 003e FFF7FEFF 		bl	assert_failed
 2425              	.LVL252:
2109:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2426              		.loc 1 2109 0 discriminator 1
 2427 0042 012D     		cmp	r5, #1
 2428 0044 E5D8     		bhi	.L233
 2429              	.L229:
2110:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 2430              		.loc 1 2110 0
 2431 0046 002D     		cmp	r5, #0
 2432 0048 EBD1     		bne	.L230
2116:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2433              		.loc 1 2116 0
 2434 004a 4FF46053 		mov	r3, #14336
 2435 004e C4F20203 		movt	r3, 16386
 2436 0052 1A6A     		ldr	r2, [r3, #32]
 2437 0054 22EA0404 		bic	r4, r2, r4
 2438              	.LVL253:
 2439 0058 1C62     		str	r4, [r3, #32]
 2440 005a 38BD     		pop	{r3, r4, r5, pc}
 2441              		.cfi_endproc
 2442              	.LFE161:
 2444              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 2445              		.align	2
 2446              		.global	RCC_APB2PeriphResetCmd
 2447              		.thumb
 2448              		.thumb_func
 2450              	RCC_APB2PeriphResetCmd:
 2451              	.LFB162:
2148:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2452              		.loc 1 2148 0
 2453              		.cfi_startproc
 2454              		@ args = 0, pretend = 0, frame = 0
 2455              		@ frame_needed = 0, uses_anonymous_args = 0
 2456              	.LVL254:
 2457 0000 38B5     		push	{r3, r4, r5, lr}
 2458              	.LCFI38:
 2459              		.cfi_def_cfa_offset 16
 2460              		.cfi_offset 3, -16
 2461              		.cfi_offset 4, -12
 2462              		.cfi_offset 5, -8
 2463              		.cfi_offset 14, -4
2150:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2464              		.loc 1 2150 0
 2465 0002 48F2CC63 		movw	r3, #34508
 2466 0006 CFF20833 		movt	r3, 62216
 2467 000a 0340     		ands	r3, r3, r0
2148:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2468              		.loc 1 2148 0
 2469 000c 0446     		mov	r4, r0
 2470 000e 0D46     		mov	r5, r1
2150:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2471              		.loc 1 2150 0
 2472 0010 93B9     		cbnz	r3, .L235
2150:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2473              		.loc 1 2150 0 is_stmt 0 discriminator 2
 2474 0012 88B1     		cbz	r0, .L235
2151:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2475              		.loc 1 2151 0 is_stmt 1
 2476 0014 012D     		cmp	r5, #1
 2477 0016 19D9     		bls	.L237
 2478              	.LVL255:
 2479              	.L241:
2151:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2480              		.loc 1 2151 0 is_stmt 0 discriminator 1
 2481 0018 40F20000 		movw	r0, #:lower16:.LC0
 2482 001c C0F20000 		movt	r0, #:upper16:.LC0
 2483 0020 40F66701 		movw	r1, #2151
 2484 0024 FFF7FEFF 		bl	assert_failed
 2485              	.LVL256:
 2486              	.L238:
2154:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2487              		.loc 1 2154 0 is_stmt 1
 2488 0028 4FF46053 		mov	r3, #14336
 2489 002c C4F20203 		movt	r3, 16386
 2490 0030 5A6A     		ldr	r2, [r3, #36]
 2491 0032 1443     		orrs	r4, r4, r2
 2492              	.LVL257:
 2493 0034 5C62     		str	r4, [r3, #36]
 2494 0036 38BD     		pop	{r3, r4, r5, pc}
 2495              	.LVL258:
 2496              	.L235:
2150:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2497              		.loc 1 2150 0 discriminator 1
 2498 0038 40F20000 		movw	r0, #:lower16:.LC0
 2499              	.LVL259:
 2500 003c C0F20000 		movt	r0, #:upper16:.LC0
 2501 0040 40F66601 		movw	r1, #2150
 2502              	.LVL260:
 2503 0044 FFF7FEFF 		bl	assert_failed
 2504              	.LVL261:
2151:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2505              		.loc 1 2151 0 discriminator 1
 2506 0048 012D     		cmp	r5, #1
 2507 004a E5D8     		bhi	.L241
 2508              	.L237:
2152:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 2509              		.loc 1 2152 0
 2510 004c 002D     		cmp	r5, #0
 2511 004e EBD1     		bne	.L238
2158:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2512              		.loc 1 2158 0
 2513 0050 4FF46053 		mov	r3, #14336
 2514 0054 C4F20203 		movt	r3, 16386
 2515 0058 5A6A     		ldr	r2, [r3, #36]
 2516 005a 22EA0404 		bic	r4, r2, r4
 2517              	.LVL262:
 2518 005e 5C62     		str	r4, [r3, #36]
 2519 0060 38BD     		pop	{r3, r4, r5, pc}
 2520              		.cfi_endproc
 2521              	.LFE162:
 2523 0062 00BF     		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 2524              		.align	2
 2525              		.global	RCC_AHB1PeriphClockLPModeCmd
 2526              		.thumb
 2527              		.thumb_func
 2529              	RCC_AHB1PeriphClockLPModeCmd:
 2530              	.LFB163:
2197:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2531              		.loc 1 2197 0
 2532              		.cfi_startproc
 2533              		@ args = 0, pretend = 0, frame = 0
 2534              		@ frame_needed = 0, uses_anonymous_args = 0
 2535              	.LVL263:
 2536 0000 38B5     		push	{r3, r4, r5, lr}
 2537              	.LCFI39:
 2538              		.cfi_def_cfa_offset 16
 2539              		.cfi_offset 3, -16
 2540              		.cfi_offset 4, -12
 2541              		.cfi_offset 5, -8
 2542              		.cfi_offset 14, -4
2199:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2543              		.loc 1 2199 0
 2544 0002 4FF4D043 		mov	r3, #26624
 2545 0006 C8F21013 		movt	r3, 33040
 2546 000a 0340     		ands	r3, r3, r0
2197:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2547              		.loc 1 2197 0
 2548 000c 0446     		mov	r4, r0
 2549 000e 0D46     		mov	r5, r1
2199:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2550              		.loc 1 2199 0
 2551 0010 93B9     		cbnz	r3, .L243
2199:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2552              		.loc 1 2199 0 is_stmt 0 discriminator 2
 2553 0012 88B1     		cbz	r0, .L243
2200:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2554              		.loc 1 2200 0 is_stmt 1
 2555 0014 012D     		cmp	r5, #1
 2556 0016 19D9     		bls	.L245
 2557              	.LVL264:
 2558              	.L249:
2200:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2559              		.loc 1 2200 0 is_stmt 0 discriminator 1
 2560 0018 40F20000 		movw	r0, #:lower16:.LC0
 2561 001c C0F20000 		movt	r0, #:upper16:.LC0
 2562 0020 40F69801 		movw	r1, #2200
 2563 0024 FFF7FEFF 		bl	assert_failed
 2564              	.LVL265:
 2565              	.L246:
2203:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2566              		.loc 1 2203 0 is_stmt 1
 2567 0028 4FF46053 		mov	r3, #14336
 2568 002c C4F20203 		movt	r3, 16386
 2569 0030 1A6D     		ldr	r2, [r3, #80]
 2570 0032 1443     		orrs	r4, r4, r2
 2571              	.LVL266:
 2572 0034 1C65     		str	r4, [r3, #80]
 2573 0036 38BD     		pop	{r3, r4, r5, pc}
 2574              	.LVL267:
 2575              	.L243:
2199:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2576              		.loc 1 2199 0 discriminator 1
 2577 0038 40F20000 		movw	r0, #:lower16:.LC0
 2578              	.LVL268:
 2579 003c C0F20000 		movt	r0, #:upper16:.LC0
 2580 0040 40F69701 		movw	r1, #2199
 2581              	.LVL269:
 2582 0044 FFF7FEFF 		bl	assert_failed
 2583              	.LVL270:
2200:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2584              		.loc 1 2200 0 discriminator 1
 2585 0048 012D     		cmp	r5, #1
 2586 004a E5D8     		bhi	.L249
 2587              	.L245:
2201:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 2588              		.loc 1 2201 0
 2589 004c 002D     		cmp	r5, #0
 2590 004e EBD1     		bne	.L246
2207:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2591              		.loc 1 2207 0
 2592 0050 4FF46053 		mov	r3, #14336
 2593 0054 C4F20203 		movt	r3, 16386
 2594 0058 1A6D     		ldr	r2, [r3, #80]
 2595 005a 22EA0404 		bic	r4, r2, r4
 2596              	.LVL271:
 2597 005e 1C65     		str	r4, [r3, #80]
 2598 0060 38BD     		pop	{r3, r4, r5, pc}
 2599              		.cfi_endproc
 2600              	.LFE163:
 2602 0062 00BF     		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 2603              		.align	2
 2604              		.global	RCC_AHB2PeriphClockLPModeCmd
 2605              		.thumb
 2606              		.thumb_func
 2608              	RCC_AHB2PeriphClockLPModeCmd:
 2609              	.LFB164:
2229:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2610              		.loc 1 2229 0
 2611              		.cfi_startproc
 2612              		@ args = 0, pretend = 0, frame = 0
 2613              		@ frame_needed = 0, uses_anonymous_args = 0
 2614              	.LVL272:
 2615 0000 38B5     		push	{r3, r4, r5, lr}
 2616              	.LCFI40:
 2617              		.cfi_def_cfa_offset 16
 2618              		.cfi_offset 3, -16
 2619              		.cfi_offset 4, -12
 2620              		.cfi_offset 5, -8
 2621              		.cfi_offset 14, -4
2231:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2622              		.loc 1 2231 0
 2623 0002 30F0F103 		bics	r3, r0, #241
2229:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2624              		.loc 1 2229 0
 2625 0006 0446     		mov	r4, r0
 2626 0008 0D46     		mov	r5, r1
2231:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2627              		.loc 1 2231 0
 2628 000a 12D1     		bne	.L251
2231:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2629              		.loc 1 2231 0 is_stmt 0 discriminator 2
 2630 000c 88B1     		cbz	r0, .L251
2232:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2631              		.loc 1 2232 0 is_stmt 1
 2632 000e 012D     		cmp	r5, #1
 2633 0010 19D9     		bls	.L253
 2634              	.LVL273:
 2635              	.L257:
2232:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2636              		.loc 1 2232 0 is_stmt 0 discriminator 1
 2637 0012 40F20000 		movw	r0, #:lower16:.LC0
 2638 0016 C0F20000 		movt	r0, #:upper16:.LC0
 2639 001a 40F6B801 		movw	r1, #2232
 2640 001e FFF7FEFF 		bl	assert_failed
 2641              	.LVL274:
 2642              	.L254:
2235:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2643              		.loc 1 2235 0 is_stmt 1
 2644 0022 4FF46053 		mov	r3, #14336
 2645 0026 C4F20203 		movt	r3, 16386
 2646 002a 5A6D     		ldr	r2, [r3, #84]
 2647 002c 1443     		orrs	r4, r4, r2
 2648              	.LVL275:
 2649 002e 5C65     		str	r4, [r3, #84]
 2650 0030 38BD     		pop	{r3, r4, r5, pc}
 2651              	.LVL276:
 2652              	.L251:
2231:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2653              		.loc 1 2231 0 discriminator 1
 2654 0032 40F20000 		movw	r0, #:lower16:.LC0
 2655              	.LVL277:
 2656 0036 C0F20000 		movt	r0, #:upper16:.LC0
 2657 003a 40F6B701 		movw	r1, #2231
 2658              	.LVL278:
 2659 003e FFF7FEFF 		bl	assert_failed
 2660              	.LVL279:
2232:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2661              		.loc 1 2232 0 discriminator 1
 2662 0042 012D     		cmp	r5, #1
 2663 0044 E5D8     		bhi	.L257
 2664              	.L253:
2233:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 2665              		.loc 1 2233 0
 2666 0046 002D     		cmp	r5, #0
 2667 0048 EBD1     		bne	.L254
2239:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2668              		.loc 1 2239 0
 2669 004a 4FF46053 		mov	r3, #14336
 2670 004e C4F20203 		movt	r3, 16386
 2671 0052 5A6D     		ldr	r2, [r3, #84]
 2672 0054 22EA0404 		bic	r4, r2, r4
 2673              	.LVL280:
 2674 0058 5C65     		str	r4, [r3, #84]
 2675 005a 38BD     		pop	{r3, r4, r5, pc}
 2676              		.cfi_endproc
 2677              	.LFE164:
 2679              		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 2680              		.align	2
 2681              		.global	RCC_APB1PeriphClockLPModeCmd
 2682              		.thumb
 2683              		.thumb_func
 2685              	RCC_APB1PeriphClockLPModeCmd:
 2686              	.LFB165:
2315:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2687              		.loc 1 2315 0
 2688              		.cfi_startproc
 2689              		@ args = 0, pretend = 0, frame = 0
 2690              		@ frame_needed = 0, uses_anonymous_args = 0
 2691              	.LVL281:
2317:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2692              		.loc 1 2317 0
 2693 0000 10F4585F 		tst	r0, #13824
2315:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2694              		.loc 1 2315 0
 2695 0004 38B5     		push	{r3, r4, r5, lr}
 2696              	.LCFI41:
 2697              		.cfi_def_cfa_offset 16
 2698              		.cfi_offset 3, -16
 2699              		.cfi_offset 4, -12
 2700              		.cfi_offset 5, -8
 2701              		.cfi_offset 14, -4
2315:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2702              		.loc 1 2315 0
 2703 0006 0446     		mov	r4, r0
 2704 0008 0D46     		mov	r5, r1
2317:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2705              		.loc 1 2317 0
 2706 000a 12D1     		bne	.L259
2317:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2707              		.loc 1 2317 0 is_stmt 0 discriminator 2
 2708 000c 88B1     		cbz	r0, .L259
2318:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2709              		.loc 1 2318 0 is_stmt 1
 2710 000e 012D     		cmp	r5, #1
 2711 0010 19D9     		bls	.L261
 2712              	.LVL282:
 2713              	.L265:
2318:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2714              		.loc 1 2318 0 is_stmt 0 discriminator 1
 2715 0012 40F20000 		movw	r0, #:lower16:.LC0
 2716 0016 C0F20000 		movt	r0, #:upper16:.LC0
 2717 001a 40F60E11 		movw	r1, #2318
 2718 001e FFF7FEFF 		bl	assert_failed
 2719              	.LVL283:
 2720              	.L262:
2321:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2721              		.loc 1 2321 0 is_stmt 1
 2722 0022 4FF46053 		mov	r3, #14336
 2723 0026 C4F20203 		movt	r3, 16386
 2724 002a 1A6E     		ldr	r2, [r3, #96]
 2725 002c 1443     		orrs	r4, r4, r2
 2726              	.LVL284:
 2727 002e 1C66     		str	r4, [r3, #96]
 2728 0030 38BD     		pop	{r3, r4, r5, pc}
 2729              	.LVL285:
 2730              	.L259:
2317:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2731              		.loc 1 2317 0 discriminator 1
 2732 0032 40F20000 		movw	r0, #:lower16:.LC0
 2733              	.LVL286:
 2734 0036 C0F20000 		movt	r0, #:upper16:.LC0
 2735 003a 40F60D11 		movw	r1, #2317
 2736              	.LVL287:
 2737 003e FFF7FEFF 		bl	assert_failed
 2738              	.LVL288:
2318:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2739              		.loc 1 2318 0 discriminator 1
 2740 0042 012D     		cmp	r5, #1
 2741 0044 E5D8     		bhi	.L265
 2742              	.L261:
2319:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 2743              		.loc 1 2319 0
 2744 0046 002D     		cmp	r5, #0
 2745 0048 EBD1     		bne	.L262
2325:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2746              		.loc 1 2325 0
 2747 004a 4FF46053 		mov	r3, #14336
 2748 004e C4F20203 		movt	r3, 16386
 2749 0052 1A6E     		ldr	r2, [r3, #96]
 2750 0054 22EA0404 		bic	r4, r2, r4
 2751              	.LVL289:
 2752 0058 1C66     		str	r4, [r3, #96]
 2753 005a 38BD     		pop	{r3, r4, r5, pc}
 2754              		.cfi_endproc
 2755              	.LFE165:
 2757              		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 2758              		.align	2
 2759              		.global	RCC_APB2PeriphClockLPModeCmd
 2760              		.thumb
 2761              		.thumb_func
 2763              	RCC_APB2PeriphClockLPModeCmd:
 2764              	.LFB166:
2361:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2765              		.loc 1 2361 0
 2766              		.cfi_startproc
 2767              		@ args = 0, pretend = 0, frame = 0
 2768              		@ frame_needed = 0, uses_anonymous_args = 0
 2769              	.LVL290:
 2770 0000 38B5     		push	{r3, r4, r5, lr}
 2771              	.LCFI42:
 2772              		.cfi_def_cfa_offset 16
 2773              		.cfi_offset 3, -16
 2774              		.cfi_offset 4, -12
 2775              		.cfi_offset 5, -8
 2776              		.cfi_offset 14, -4
2363:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2777              		.loc 1 2363 0
 2778 0002 48F2CC03 		movw	r3, #32972
 2779 0006 CFF20833 		movt	r3, 62216
 2780 000a 0340     		ands	r3, r3, r0
2361:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2781              		.loc 1 2361 0
 2782 000c 0446     		mov	r4, r0
 2783 000e 0D46     		mov	r5, r1
2363:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2784              		.loc 1 2363 0
 2785 0010 93B9     		cbnz	r3, .L267
2363:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2786              		.loc 1 2363 0 is_stmt 0 discriminator 2
 2787 0012 88B1     		cbz	r0, .L267
2364:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2788              		.loc 1 2364 0 is_stmt 1
 2789 0014 012D     		cmp	r5, #1
 2790 0016 19D9     		bls	.L269
 2791              	.LVL291:
 2792              	.L273:
2364:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2793              		.loc 1 2364 0 is_stmt 0 discriminator 1
 2794 0018 40F20000 		movw	r0, #:lower16:.LC0
 2795 001c C0F20000 		movt	r0, #:upper16:.LC0
 2796 0020 40F63C11 		movw	r1, #2364
 2797 0024 FFF7FEFF 		bl	assert_failed
 2798              	.LVL292:
 2799              	.L270:
2367:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2800              		.loc 1 2367 0 is_stmt 1
 2801 0028 4FF46053 		mov	r3, #14336
 2802 002c C4F20203 		movt	r3, 16386
 2803 0030 5A6E     		ldr	r2, [r3, #100]
 2804 0032 1443     		orrs	r4, r4, r2
 2805              	.LVL293:
 2806 0034 5C66     		str	r4, [r3, #100]
 2807 0036 38BD     		pop	{r3, r4, r5, pc}
 2808              	.LVL294:
 2809              	.L267:
2363:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2810              		.loc 1 2363 0 discriminator 1
 2811 0038 40F20000 		movw	r0, #:lower16:.LC0
 2812              	.LVL295:
 2813 003c C0F20000 		movt	r0, #:upper16:.LC0
 2814 0040 40F63B11 		movw	r1, #2363
 2815              	.LVL296:
 2816 0044 FFF7FEFF 		bl	assert_failed
 2817              	.LVL297:
2364:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2818              		.loc 1 2364 0 discriminator 1
 2819 0048 012D     		cmp	r5, #1
 2820 004a E5D8     		bhi	.L273
 2821              	.L269:
2365:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 2822              		.loc 1 2365 0
 2823 004c 002D     		cmp	r5, #0
 2824 004e EBD1     		bne	.L270
2371:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2825              		.loc 1 2371 0
 2826 0050 4FF46053 		mov	r3, #14336
 2827 0054 C4F20203 		movt	r3, 16386
 2828 0058 5A6E     		ldr	r2, [r3, #100]
 2829 005a 22EA0404 		bic	r4, r2, r4
 2830              	.LVL298:
 2831 005e 5C66     		str	r4, [r3, #100]
 2832 0060 38BD     		pop	{r3, r4, r5, pc}
 2833              		.cfi_endproc
 2834              	.LFE166:
 2836 0062 00BF     		.section	.text.RCC_LSEModeConfig,"ax",%progbits
 2837              		.align	2
 2838              		.global	RCC_LSEModeConfig
 2839              		.thumb
 2840              		.thumb_func
 2842              	RCC_LSEModeConfig:
 2843              	.LFB167:
2385:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2844              		.loc 1 2385 0
 2845              		.cfi_startproc
 2846              		@ args = 0, pretend = 0, frame = 0
 2847              		@ frame_needed = 0, uses_anonymous_args = 0
 2848              	.LVL299:
2387:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 2849              		.loc 1 2387 0
 2850 0000 0128     		cmp	r0, #1
2385:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2851              		.loc 1 2385 0
 2852 0002 08B5     		push	{r3, lr}
 2853              	.LCFI43:
 2854              		.cfi_def_cfa_offset 8
 2855              		.cfi_offset 3, -8
 2856              		.cfi_offset 14, -4
2387:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 2857              		.loc 1 2387 0
 2858 0004 10D9     		bls	.L275
2387:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 2859              		.loc 1 2387 0 is_stmt 0 discriminator 1
 2860 0006 40F20000 		movw	r0, #:lower16:.LC0
 2861              	.LVL300:
 2862 000a C0F20000 		movt	r0, #:upper16:.LC0
 2863 000e 40F65311 		movw	r1, #2387
 2864 0012 FFF7FEFF 		bl	assert_failed
 2865              	.LVL301:
 2866              	.L276:
2395:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2867              		.loc 1 2395 0 is_stmt 1
 2868 0016 4FF46053 		mov	r3, #14336
 2869 001a C4F20203 		movt	r3, 16386
 2870 001e 1A6F     		ldr	r2, [r3, #112]
 2871 0020 22F00802 		bic	r2, r2, #8
 2872 0024 1A67     		str	r2, [r3, #112]
 2873 0026 08BD     		pop	{r3, pc}
 2874              	.LVL302:
 2875              	.L275:
2389:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 2876              		.loc 1 2389 0
 2877 0028 F5D1     		bne	.L276
2391:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2878              		.loc 1 2391 0
 2879 002a 4FF46053 		mov	r3, #14336
 2880 002e C4F20203 		movt	r3, 16386
 2881 0032 1A6F     		ldr	r2, [r3, #112]
 2882 0034 42F00802 		orr	r2, r2, #8
 2883 0038 1A67     		str	r2, [r3, #112]
 2884 003a 08BD     		pop	{r3, pc}
 2885              		.cfi_endproc
 2886              	.LFE167:
 2888              		.section	.text.RCC_ITConfig,"ax",%progbits
 2889              		.align	2
 2890              		.global	RCC_ITConfig
 2891              		.thumb
 2892              		.thumb_func
 2894              	RCC_ITConfig:
 2895              	.LFB168:
2583:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2896              		.loc 1 2583 0
 2897              		.cfi_startproc
 2898              		@ args = 0, pretend = 0, frame = 0
 2899              		@ frame_needed = 0, uses_anonymous_args = 0
 2900              	.LVL303:
 2901 0000 38B5     		push	{r3, r4, r5, lr}
 2902              	.LCFI44:
 2903              		.cfi_def_cfa_offset 16
 2904              		.cfi_offset 3, -16
 2905              		.cfi_offset 4, -12
 2906              		.cfi_offset 5, -8
 2907              		.cfi_offset 14, -4
2585:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2908              		.loc 1 2585 0
 2909 0002 43B2     		sxtb	r3, r0
 2910 0004 002B     		cmp	r3, #0
2583:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 2911              		.loc 1 2583 0
 2912 0006 0446     		mov	r4, r0
 2913 0008 0D46     		mov	r5, r1
2585:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2914              		.loc 1 2585 0
 2915 000a 1CDD     		ble	.L284
 2916              	.LVL304:
 2917              	.L279:
2586:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2918              		.loc 1 2586 0
 2919 000c 012D     		cmp	r5, #1
 2920 000e 0FD9     		bls	.L280
2586:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2921              		.loc 1 2586 0 is_stmt 0 discriminator 1
 2922 0010 40F20000 		movw	r0, #:lower16:.LC0
 2923 0014 C0F20000 		movt	r0, #:upper16:.LC0
 2924 0018 40F61A21 		movw	r1, #2586
 2925 001c FFF7FEFF 		bl	assert_failed
 2926              	.LVL305:
 2927              	.L281:
2590:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2928              		.loc 1 2590 0 is_stmt 1
 2929 0020 43F60D03 		movw	r3, #14349
 2930 0024 C4F20203 		movt	r3, 16386
 2931 0028 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2932 002a 1443     		orrs	r4, r4, r2
 2933 002c 1C70     		strb	r4, [r3]
 2934 002e 38BD     		pop	{r3, r4, r5, pc}
 2935              	.L280:
2587:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 2936              		.loc 1 2587 0
 2937 0030 002D     		cmp	r5, #0
 2938 0032 F5D1     		bne	.L281
2595:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 2939              		.loc 1 2595 0
 2940 0034 43F60D03 		movw	r3, #14349
 2941 0038 C4F20203 		movt	r3, 16386
 2942 003c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2943 003e 22EA0404 		bic	r4, r2, r4
 2944 0042 1C70     		strb	r4, [r3]
 2945 0044 38BD     		pop	{r3, r4, r5, pc}
 2946              	.LVL306:
 2947              	.L284:
2585:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2948              		.loc 1 2585 0 discriminator 1
 2949 0046 40F20000 		movw	r0, #:lower16:.LC0
 2950              	.LVL307:
 2951 004a C0F20000 		movt	r0, #:upper16:.LC0
 2952 004e 40F61921 		movw	r1, #2585
 2953              	.LVL308:
 2954 0052 FFF7FEFF 		bl	assert_failed
 2955              	.LVL309:
 2956 0056 D9E7     		b	.L279
 2957              		.cfi_endproc
 2958              	.LFE168:
 2960              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 2961              		.align	2
 2962              		.global	RCC_GetFlagStatus
 2963              		.thumb
 2964              		.thumb_func
 2966              	RCC_GetFlagStatus:
 2967              	.LFB169:
2620:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
 2968              		.loc 1 2620 0
 2969              		.cfi_startproc
 2970              		@ args = 0, pretend = 0, frame = 0
 2971              		@ frame_needed = 0, uses_anonymous_args = 0
 2972              	.LVL310:
2626:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2973              		.loc 1 2626 0
 2974 0000 00F0EF03 		and	r3, r0, #239
 2975 0004 212B     		cmp	r3, #33
2620:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
 2976              		.loc 1 2620 0
 2977 0006 10B5     		push	{r4, lr}
 2978              	.LCFI45:
 2979              		.cfi_def_cfa_offset 8
 2980              		.cfi_offset 4, -8
 2981              		.cfi_offset 14, -4
2620:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
 2982              		.loc 1 2620 0
 2983 0008 0446     		mov	r4, r0
2626:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2984              		.loc 1 2626 0
 2985 000a 07D0     		beq	.L286
2626:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 2986              		.loc 1 2626 0 is_stmt 0 discriminator 1
 2987 000c 00F0FD02 		and	r2, r0, #253
 2988 0010 00F0DF03 		and	r3, r0, #223
 2989 0014 392A     		cmp	r2, #57
 2990 0016 18BF     		it	ne
 2991 0018 412B     		cmpne	r3, #65
 2992 001a 10D1     		bne	.L300
 2993              	.LVL311:
 2994              	.L286:
2629:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 2995              		.loc 1 2629 0 is_stmt 1
 2996 001c 6309     		lsrs	r3, r4, #5
 2997              	.LVL312:
2630:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 2998              		.loc 1 2630 0
 2999 001e 012B     		cmp	r3, #1
 3000 0020 1CD0     		beq	.L287
2634:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 3001              		.loc 1 2634 0
 3002 0022 022B     		cmp	r3, #2
2636:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 3003              		.loc 1 2636 0
 3004 0024 4FF46053 		mov	r3, #14336
 3005              	.LVL313:
 3006 0028 C4F20203 		movt	r3, 16386
 3007              		.loc 1 2645 0
 3008 002c 04F01F04 		and	r4, r4, #31
 3009              	.LVL314:
2636:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 3010              		.loc 1 2636 0
 3011 0030 0CBF     		ite	eq
 3012 0032 186F     		ldreq	r0, [r3, #112]
 3013              	.LVL315:
2640:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 3014              		.loc 1 2640 0
 3015 0034 586F     		ldrne	r0, [r3, #116]
 3016              	.LVL316:
 3017              		.loc 1 2645 0
 3018 0036 E040     		lsrs	r0, r0, r4
 3019              	.LVL317:
2646:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2647:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
2648:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2649:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2650:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2651:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
2652:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2653:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the flag status */
2654:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return bitstatus;
2655:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 3020              		.loc 1 2655 0
 3021 0038 00F00100 		and	r0, r0, #1
 3022 003c 10BD     		pop	{r4, pc}
 3023              	.LVL318:
 3024              	.L300:
2626:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 3025              		.loc 1 2626 0 discriminator 1
 3026 003e A0F17903 		sub	r3, r0, #121
 3027 0042 062B     		cmp	r3, #6
 3028 0044 EAD9     		bls	.L286
 3029 0046 3D28     		cmp	r0, #61
 3030 0048 08D0     		beq	.L287
 3031 004a 40F20000 		movw	r0, #:lower16:.LC0
 3032              	.LVL319:
 3033 004e C0F20000 		movt	r0, #:upper16:.LC0
 3034 0052 40F64221 		movw	r1, #2626
 3035 0056 FFF7FEFF 		bl	assert_failed
 3036              	.LVL320:
 3037 005a DFE7     		b	.L286
 3038              	.LVL321:
 3039              	.L287:
2632:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 3040              		.loc 1 2632 0
 3041 005c 4FF46053 		mov	r3, #14336
 3042 0060 C4F20203 		movt	r3, 16386
2645:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 3043              		.loc 1 2645 0
 3044 0064 04F01F04 		and	r4, r4, #31
2632:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 3045              		.loc 1 2632 0
 3046 0068 1868     		ldr	r0, [r3]
 3047              	.LVL322:
2645:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 3048              		.loc 1 2645 0
 3049 006a E040     		lsrs	r0, r0, r4
 3050              	.LVL323:
 3051              		.loc 1 2655 0
 3052 006c 00F00100 		and	r0, r0, #1
 3053 0070 10BD     		pop	{r4, pc}
 3054              		.cfi_endproc
 3055              	.LFE169:
 3057 0072 00BF     		.section	.text.RCC_ClearFlag,"ax",%progbits
 3058              		.align	2
 3059              		.global	RCC_ClearFlag
 3060              		.thumb
 3061              		.thumb_func
 3063              	RCC_ClearFlag:
 3064              	.LFB170:
2656:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2657:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2658:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
2659:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
2660:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
2661:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
2662:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2663:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2664:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
2665:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 3065              		.loc 1 2665 0
 3066              		.cfi_startproc
 3067              		@ args = 0, pretend = 0, frame = 0
 3068              		@ frame_needed = 0, uses_anonymous_args = 0
 3069              		@ link register save eliminated.
2666:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
2667:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 3070              		.loc 1 2667 0
 3071 0000 4FF46053 		mov	r3, #14336
 3072 0004 C4F20203 		movt	r3, 16386
 3073 0008 5A6F     		ldr	r2, [r3, #116]
 3074 000a 42F08072 		orr	r2, r2, #16777216
 3075 000e 5A67     		str	r2, [r3, #116]
 3076 0010 7047     		bx	lr
 3077              		.cfi_endproc
 3078              	.LFE170:
 3080 0012 00BF     		.section	.text.RCC_GetITStatus,"ax",%progbits
 3081              		.align	2
 3082              		.global	RCC_GetITStatus
 3083              		.thumb
 3084              		.thumb_func
 3086              	RCC_GetITStatus:
 3087              	.LFB171:
2668:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2669:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2670:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2671:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
2672:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
2673:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2674:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
2675:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
2676:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
2677:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
2678:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
2679:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt           
2680:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx devi
2681:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
2682:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
2683:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2684:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
2685:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 3088              		.loc 1 2685 0
 3089              		.cfi_startproc
 3090              		@ args = 0, pretend = 0, frame = 0
 3091              		@ frame_needed = 0, uses_anonymous_args = 0
 3092              	.LVL324:
2686:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
2687:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2688:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2689:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
 3093              		.loc 1 2689 0
 3094 0000 431E     		subs	r3, r0, #1
 3095 0002 0428     		cmp	r0, #4
 3096 0004 18BF     		it	ne
 3097 0006 012B     		cmpne	r3, #1
2685:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
 3098              		.loc 1 2685 0
 3099 0008 10B5     		push	{r4, lr}
 3100              	.LCFI46:
 3101              		.cfi_def_cfa_offset 8
 3102              		.cfi_offset 4, -8
 3103              		.cfi_offset 14, -4
2685:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
 3104              		.loc 1 2685 0
 3105 000a 0446     		mov	r4, r0
 3106              		.loc 1 2689 0
 3107 000c 11D9     		bls	.L303
 3108              		.loc 1 2689 0 is_stmt 0 discriminator 1
 3109 000e 0828     		cmp	r0, #8
 3110 0010 18BF     		it	ne
 3111 0012 1028     		cmpne	r0, #16
 3112 0014 0DD0     		beq	.L303
 3113 0016 8028     		cmp	r0, #128
 3114 0018 18BF     		it	ne
 3115 001a 4028     		cmpne	r0, #64
 3116 001c 09D0     		beq	.L303
 3117 001e 2028     		cmp	r0, #32
 3118 0020 07D0     		beq	.L303
 3119 0022 40F20000 		movw	r0, #:lower16:.LC0
 3120              	.LVL325:
 3121 0026 C0F20000 		movt	r0, #:upper16:.LC0
 3122 002a 40F68121 		movw	r1, #2689
 3123 002e FFF7FEFF 		bl	assert_failed
 3124              	.LVL326:
 3125              	.L303:
2690:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2691:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
2692:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 3126              		.loc 1 2692 0 is_stmt 1
 3127 0032 4FF46053 		mov	r3, #14336
 3128 0036 C4F20203 		movt	r3, 16386
 3129 003a DB68     		ldr	r3, [r3, #12]
 3130              	.LVL327:
 3131 003c 1C42     		tst	r4, r3
2693:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2694:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
2695:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2696:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2697:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2698:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
2699:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2700:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
2701:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return  bitstatus;
2702:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 3132              		.loc 1 2702 0
 3133 003e 0CBF     		ite	eq
 3134 0040 0020     		moveq	r0, #0
 3135 0042 0120     		movne	r0, #1
 3136 0044 10BD     		pop	{r4, pc}
 3137              		.cfi_endproc
 3138              	.LFE171:
 3140 0046 00BF     		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 3141              		.align	2
 3142              		.global	RCC_ClearITPendingBit
 3143              		.thumb
 3144              		.thumb_func
 3146              	RCC_ClearITPendingBit:
 3147              	.LFB172:
2703:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2704:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2705:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
2706:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
2707:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2708:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
2709:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
2710:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
2711:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
2712:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
2713:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
2714:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)  
2715:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
2716:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2717:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2718:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
2719:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 3148              		.loc 1 2719 0
 3149              		.cfi_startproc
 3150              		@ args = 0, pretend = 0, frame = 0
 3151              		@ frame_needed = 0, uses_anonymous_args = 0
 3152              	.LVL328:
 3153 0000 10B5     		push	{r4, lr}
 3154              	.LCFI47:
 3155              		.cfi_def_cfa_offset 8
 3156              		.cfi_offset 4, -8
 3157              		.cfi_offset 14, -4
2720:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2721:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
 3158              		.loc 1 2721 0
 3159 0002 0446     		mov	r4, r0
 3160 0004 38B9     		cbnz	r0, .L317
 3161              		.loc 1 2721 0 is_stmt 0 discriminator 1
 3162 0006 40F20000 		movw	r0, #:lower16:.LC0
 3163              	.LVL329:
 3164 000a C0F20000 		movt	r0, #:upper16:.LC0
 3165 000e 40F6A121 		movw	r1, #2721
 3166 0012 FFF7FEFF 		bl	assert_failed
 3167              	.LVL330:
 3168              	.L317:
2722:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2723:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
2724:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      pending bits */
2725:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 3169              		.loc 1 2725 0 is_stmt 1
 3170 0016 43F60E03 		movw	r3, #14350
 3171 001a C4F20203 		movt	r3, 16386
 3172 001e 1C70     		strb	r4, [r3]
 3173 0020 10BD     		pop	{r4, pc}
 3174              		.cfi_endproc
 3175              	.LFE172:
 3177 0022 00BF     		.section	.rodata.str1.4,"aMS",%progbits,1
 3178              		.align	2
 3179              	.LC0:
 3180 0000 4C696272 		.ascii	"Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_"
 3180      61726965 
 3180      732F5354 
 3180      4D333246 
 3180      3478785F 
 3181 0033 7263632E 		.ascii	"rcc.c\000"
 3181      6300
 3182 0039 000000   		.section	.data.APBAHBPrescTable,"aw",%progbits
 3183              		.align	2
 3184              		.set	.LANCHOR0,. + 0
 3187              	APBAHBPrescTable:
 3188 0000 00       		.byte	0
 3189 0001 00       		.byte	0
 3190 0002 00       		.byte	0
 3191 0003 00       		.byte	0
 3192 0004 01       		.byte	1
 3193 0005 02       		.byte	2
 3194 0006 03       		.byte	3
 3195 0007 04       		.byte	4
 3196 0008 01       		.byte	1
 3197 0009 02       		.byte	2
 3198 000a 03       		.byte	3
 3199 000b 04       		.byte	4
 3200 000c 06       		.byte	6
 3201 000d 07       		.byte	7
 3202 000e 08       		.byte	8
 3203 000f 09       		.byte	9
 3204              		.text
 3205              	.Letext0:
 3206              		.file 2 "/opt/toolchains/eabi/arm-2014.05/arm-none-eabi/include/stdint.h"
 3207              		.file 3 "inc/stm32f4xx.h"
 3208              		.file 4 "Libraries/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 3209              		.file 5 "Libraries/CMSIS/Include/core_cm4.h"
 3210              		.file 6 "inc/stm32f4xx_conf.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rcc.c
     /tmp/ccWyxpBd.s:21     .text.RCC_DeInit:00000000 $t
     /tmp/ccWyxpBd.s:26     .text.RCC_DeInit:00000000 RCC_DeInit
     /tmp/ccWyxpBd.s:93     .text.RCC_HSEConfig:00000000 $t
     /tmp/ccWyxpBd.s:98     .text.RCC_HSEConfig:00000000 RCC_HSEConfig
     /tmp/ccWyxpBd.s:3179   .rodata.str1.4:00000000 .LC0
     /tmp/ccWyxpBd.s:139    .text.RCC_WaitForHSEStartUp:00000000 $t
     /tmp/ccWyxpBd.s:144    .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
     /tmp/ccWyxpBd.s:219    .text.RCC_AdjustHSICalibrationValue:00000000 $t
     /tmp/ccWyxpBd.s:224    .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
     /tmp/ccWyxpBd.s:269    .text.RCC_HSICmd:00000000 $t
     /tmp/ccWyxpBd.s:274    .text.RCC_HSICmd:00000000 RCC_HSICmd
     /tmp/ccWyxpBd.s:310    .text.RCC_LSEConfig:00000000 $t
     /tmp/ccWyxpBd.s:315    .text.RCC_LSEConfig:00000000 RCC_LSEConfig
     /tmp/ccWyxpBd.s:377    .text.RCC_LSICmd:00000000 $t
     /tmp/ccWyxpBd.s:382    .text.RCC_LSICmd:00000000 RCC_LSICmd
     /tmp/ccWyxpBd.s:418    .text.RCC_PLLConfig:00000000 $t
     /tmp/ccWyxpBd.s:423    .text.RCC_PLLConfig:00000000 RCC_PLLConfig
     /tmp/ccWyxpBd.s:537    .text.RCC_PLLCmd:00000000 $t
     /tmp/ccWyxpBd.s:542    .text.RCC_PLLCmd:00000000 RCC_PLLCmd
     /tmp/ccWyxpBd.s:578    .text.RCC_PLLI2SConfig:00000000 $t
     /tmp/ccWyxpBd.s:583    .text.RCC_PLLI2SConfig:00000000 RCC_PLLI2SConfig
     /tmp/ccWyxpBd.s:642    .text.RCC_PLLI2SCmd:00000000 $t
     /tmp/ccWyxpBd.s:647    .text.RCC_PLLI2SCmd:00000000 RCC_PLLI2SCmd
     /tmp/ccWyxpBd.s:683    .text.RCC_PLLSAIConfig:00000000 $t
     /tmp/ccWyxpBd.s:688    .text.RCC_PLLSAIConfig:00000000 RCC_PLLSAIConfig
     /tmp/ccWyxpBd.s:765    .text.RCC_PLLSAICmd:00000000 $t
     /tmp/ccWyxpBd.s:770    .text.RCC_PLLSAICmd:00000000 RCC_PLLSAICmd
     /tmp/ccWyxpBd.s:806    .text.RCC_ClockSecuritySystemCmd:00000000 $t
     /tmp/ccWyxpBd.s:811    .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
     /tmp/ccWyxpBd.s:847    .text.RCC_MCO1Config:00000000 $t
     /tmp/ccWyxpBd.s:852    .text.RCC_MCO1Config:00000000 RCC_MCO1Config
     /tmp/ccWyxpBd.s:917    .text.RCC_MCO2Config:00000000 $t
     /tmp/ccWyxpBd.s:922    .text.RCC_MCO2Config:00000000 RCC_MCO2Config
     /tmp/ccWyxpBd.s:987    .text.RCC_SYSCLKConfig:00000000 $t
     /tmp/ccWyxpBd.s:992    .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
     /tmp/ccWyxpBd.s:1037   .text.RCC_GetSYSCLKSource:00000000 $t
     /tmp/ccWyxpBd.s:1042   .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
     /tmp/ccWyxpBd.s:1060   .text.RCC_HCLKConfig:00000000 $t
     /tmp/ccWyxpBd.s:1065   .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
     /tmp/ccWyxpBd.s:1121   .text.RCC_PCLK1Config:00000000 $t
     /tmp/ccWyxpBd.s:1126   .text.RCC_PCLK1Config:00000000 RCC_PCLK1Config
     /tmp/ccWyxpBd.s:1176   .text.RCC_PCLK2Config:00000000 $t
     /tmp/ccWyxpBd.s:1181   .text.RCC_PCLK2Config:00000000 RCC_PCLK2Config
     /tmp/ccWyxpBd.s:1231   .text.RCC_GetClocksFreq:00000000 $t
     /tmp/ccWyxpBd.s:1236   .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
     /tmp/ccWyxpBd.s:3184   .data.APBAHBPrescTable:00000000 .LANCHOR0
     /tmp/ccWyxpBd.s:1373   .text.RCC_RTCCLKConfig:00000000 $t
     /tmp/ccWyxpBd.s:1378   .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
     /tmp/ccWyxpBd.s:1486   .text.RCC_RTCCLKCmd:00000000 $t
     /tmp/ccWyxpBd.s:1491   .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
     /tmp/ccWyxpBd.s:1527   .text.RCC_BackupResetCmd:00000000 $t
     /tmp/ccWyxpBd.s:1532   .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
     /tmp/ccWyxpBd.s:1568   .text.RCC_I2SCLKConfig:00000000 $t
     /tmp/ccWyxpBd.s:1573   .text.RCC_I2SCLKConfig:00000000 RCC_I2SCLKConfig
     /tmp/ccWyxpBd.s:1609   .text.RCC_SAIBlockACLKConfig:00000000 $t
     /tmp/ccWyxpBd.s:1614   .text.RCC_SAIBlockACLKConfig:00000000 RCC_SAIBlockACLKConfig
     /tmp/ccWyxpBd.s:1661   .text.RCC_SAIBlockBCLKConfig:00000000 $t
     /tmp/ccWyxpBd.s:1666   .text.RCC_SAIBlockBCLKConfig:00000000 RCC_SAIBlockBCLKConfig
     /tmp/ccWyxpBd.s:1713   .text.RCC_SAIPLLI2SClkDivConfig:00000000 $t
     /tmp/ccWyxpBd.s:1718   .text.RCC_SAIPLLI2SClkDivConfig:00000000 RCC_SAIPLLI2SClkDivConfig
     /tmp/ccWyxpBd.s:1760   .text.RCC_SAIPLLSAIClkDivConfig:00000000 $t
     /tmp/ccWyxpBd.s:1765   .text.RCC_SAIPLLSAIClkDivConfig:00000000 RCC_SAIPLLSAIClkDivConfig
     /tmp/ccWyxpBd.s:1807   .text.RCC_LTDCCLKDivConfig:00000000 $t
     /tmp/ccWyxpBd.s:1812   .text.RCC_LTDCCLKDivConfig:00000000 RCC_LTDCCLKDivConfig
     /tmp/ccWyxpBd.s:1857   .text.RCC_TIMCLKPresConfig:00000000 $t
     /tmp/ccWyxpBd.s:1862   .text.RCC_TIMCLKPresConfig:00000000 RCC_TIMCLKPresConfig
     /tmp/ccWyxpBd.s:1898   .text.RCC_AHB1PeriphClockCmd:00000000 $t
     /tmp/ccWyxpBd.s:1903   .text.RCC_AHB1PeriphClockCmd:00000000 RCC_AHB1PeriphClockCmd
     /tmp/ccWyxpBd.s:1977   .text.RCC_AHB2PeriphClockCmd:00000000 $t
     /tmp/ccWyxpBd.s:1982   .text.RCC_AHB2PeriphClockCmd:00000000 RCC_AHB2PeriphClockCmd
     /tmp/ccWyxpBd.s:2054   .text.RCC_APB1PeriphClockCmd:00000000 $t
     /tmp/ccWyxpBd.s:2059   .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
     /tmp/ccWyxpBd.s:2132   .text.RCC_APB2PeriphClockCmd:00000000 $t
     /tmp/ccWyxpBd.s:2137   .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
     /tmp/ccWyxpBd.s:2211   .text.RCC_AHB1PeriphResetCmd:00000000 $t
     /tmp/ccWyxpBd.s:2216   .text.RCC_AHB1PeriphResetCmd:00000000 RCC_AHB1PeriphResetCmd
     /tmp/ccWyxpBd.s:2290   .text.RCC_AHB2PeriphResetCmd:00000000 $t
     /tmp/ccWyxpBd.s:2295   .text.RCC_AHB2PeriphResetCmd:00000000 RCC_AHB2PeriphResetCmd
     /tmp/ccWyxpBd.s:2367   .text.RCC_APB1PeriphResetCmd:00000000 $t
     /tmp/ccWyxpBd.s:2372   .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
     /tmp/ccWyxpBd.s:2445   .text.RCC_APB2PeriphResetCmd:00000000 $t
     /tmp/ccWyxpBd.s:2450   .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
     /tmp/ccWyxpBd.s:2524   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 $t
     /tmp/ccWyxpBd.s:2529   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 RCC_AHB1PeriphClockLPModeCmd
     /tmp/ccWyxpBd.s:2603   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 $t
     /tmp/ccWyxpBd.s:2608   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 RCC_AHB2PeriphClockLPModeCmd
     /tmp/ccWyxpBd.s:2680   .text.RCC_APB1PeriphClockLPModeCmd:00000000 $t
     /tmp/ccWyxpBd.s:2685   .text.RCC_APB1PeriphClockLPModeCmd:00000000 RCC_APB1PeriphClockLPModeCmd
     /tmp/ccWyxpBd.s:2758   .text.RCC_APB2PeriphClockLPModeCmd:00000000 $t
     /tmp/ccWyxpBd.s:2763   .text.RCC_APB2PeriphClockLPModeCmd:00000000 RCC_APB2PeriphClockLPModeCmd
     /tmp/ccWyxpBd.s:2837   .text.RCC_LSEModeConfig:00000000 $t
     /tmp/ccWyxpBd.s:2842   .text.RCC_LSEModeConfig:00000000 RCC_LSEModeConfig
     /tmp/ccWyxpBd.s:2889   .text.RCC_ITConfig:00000000 $t
     /tmp/ccWyxpBd.s:2894   .text.RCC_ITConfig:00000000 RCC_ITConfig
     /tmp/ccWyxpBd.s:2961   .text.RCC_GetFlagStatus:00000000 $t
     /tmp/ccWyxpBd.s:2966   .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
     /tmp/ccWyxpBd.s:3058   .text.RCC_ClearFlag:00000000 $t
     /tmp/ccWyxpBd.s:3063   .text.RCC_ClearFlag:00000000 RCC_ClearFlag
     /tmp/ccWyxpBd.s:3081   .text.RCC_GetITStatus:00000000 $t
     /tmp/ccWyxpBd.s:3086   .text.RCC_GetITStatus:00000000 RCC_GetITStatus
     /tmp/ccWyxpBd.s:3141   .text.RCC_ClearITPendingBit:00000000 $t
     /tmp/ccWyxpBd.s:3146   .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
     /tmp/ccWyxpBd.s:3178   .rodata.str1.4:00000000 $d
     /tmp/ccWyxpBd.s:3183   .data.APBAHBPrescTable:00000000 $d
     /tmp/ccWyxpBd.s:3187   .data.APBAHBPrescTable:00000000 APBAHBPrescTable
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
assert_failed
