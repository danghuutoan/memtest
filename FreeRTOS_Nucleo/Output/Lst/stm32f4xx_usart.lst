   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f4xx_usart.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.USART_DeInit,"ax",%progbits
  21              		.align	2
  22              		.global	USART_DeInit
  23              		.thumb
  24              		.thumb_func
  26              	USART_DeInit:
  27              	.LFB123:
  28              		.file 1 "Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c"
   1:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
   2:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
   3:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @version V1.5.0
   6:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @date    06-March-2015
   7:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Initialization and Configuration
  11:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Data transfers
  12:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Multi-Processor Communication
  13:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + LIN mode
  14:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Half-duplex mode
  15:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Smartcard mode
  16:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + IrDA mode
  17:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + DMA transfers management
  18:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Interrupts and flags management 
  19:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           
  20:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   @verbatim       
  21:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
  22:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         ##### How to use this driver #####
  23:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
  24:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
  25:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable peripheral clock using the following functions
  26:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, 
  28:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           UART4 or UART5.
  29:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
  30:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) According to the USART mode, enable the GPIO clocks using 
  31:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  32:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           or/and SCLK). 
  33:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
  34:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Peripheral's alternate function: 
  35:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Connect the pin to the desired peripherals' Alternate 
  36:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             Function (AF) using GPIO_PinAFConfig() function
  37:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Configure the desired pin in alternate function by:
  38:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  39:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Select the type, pull-up/pull-down and output speed via 
  40:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             GPIO_PuPd, GPIO_OType and GPIO_Speed members
  41:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Call GPIO_Init() function
  42:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           
  43:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  44:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           flow control and Mode(Receiver/Transmitter) using the USART_Init()
  45:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           function.
  46:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
  47:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) For synchronous mode, enable the clock and program the polarity,
  48:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           phase and last bit using the USART_ClockInit() function.
  49:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
  50:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the NVIC and the corresponding interrupt using the function 
  51:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****          USART_ITConfig() if you need to use interrupt mode. 
  52:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
  53:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) When using the DMA mode 
  54:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Configure the DMA using DMA_Init() function
  55:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Active the needed channel Request using USART_DMACmd() function
  56:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    
  57:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
  58:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    
  59:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  60:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
  61:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  62:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           for more details
  63:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
  64:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]        
  65:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In order to reach higher communication baudrates, it is possible to
  66:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  67:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd())
  68:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     and before calling the function USART_Init().
  69:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             
  70:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     @endverbatim        
  71:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
  72:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @attention
  73:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  74:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
  75:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  76:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  77:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * You may not use this file except in compliance with the License.
  78:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * You may obtain a copy of the License at:
  79:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  80:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  81:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  82:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * Unless required by applicable law or agreed to in writing, software 
  83:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  84:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  85:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * See the License for the specific language governing permissions and
  86:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * limitations under the License.
  87:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  88:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************  
  89:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */ 
  90:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  91:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  92:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  93:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  94:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  95:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  96:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  97:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  98:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  99:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART 
 100:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief USART driver modules
 101:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 102:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 103:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 104:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
 105:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
 106:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 107:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 108:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 109:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 110:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_RE))
 111:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 112:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 113:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 114:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 115:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 116:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 117:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 118:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 119:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 120:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 121:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 122:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 123:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 124:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 125:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 126:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 127:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 128:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 129:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 130:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 131:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 132:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 133:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 134:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 135:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 136:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             ##### Initialization and Configuration functions #####
 137:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 138:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 139:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to initialize the USART 
 140:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     in asynchronous and in synchronous modes.
 141:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) For the asynchronous mode only these parameters can be configured: 
 142:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Baud Rate
 143:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Word Length 
 144:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Stop Bit
 145:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 146:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****              in the data register is transmitted but is changed by the parity bit.
 147:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 148:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****              the possible USART frame formats are as listed in the following table:
 149:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 150:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 151:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
 152:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 153:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 154:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 155:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 156:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 157:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 158:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 159:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 160:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Hardware flow control
 161:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Receiver/transmitter modes
 162:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 163:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 164:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The USART_Init() function follows the USART  asynchronous configuration 
 165:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     procedure (details for the procedure are available in reference manual (RM0090)).
 166:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 167:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      (+) For the synchronous mode in addition to the asynchronous mode parameters these 
 168:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****          parameters should be also configured:
 169:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART Clock Enabled
 170:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART polarity
 171:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART phase
 172:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART LastBit
 173:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 174:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 175:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     These parameters can be configured using the USART_ClockInit() function.
 176:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 177:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 178:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 179:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 180:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 181:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 182:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 183:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 184:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 185:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 186:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 187:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 188:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
  29              		.loc 1 188 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 38B5     		push	{r3, r4, r5, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 3, -16
  38              		.cfi_offset 4, -12
  39              		.cfi_offset 5, -8
  40              		.cfi_offset 14, -4
 189:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 190:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
  41              		.loc 1 190 0
  42 0002 4FF48842 		mov	r2, #17408
  43 0006 4FF48053 		mov	r3, #4096
  44 000a C4F20002 		movt	r2, 16384
  45 000e C4F20103 		movt	r3, 16385
  46 0012 9042     		cmp	r0, r2
  47 0014 18BF     		it	ne
  48 0016 9842     		cmpne	r0, r3
 188:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
  49              		.loc 1 188 0
  50 0018 0446     		mov	r4, r0
  51              		.loc 1 190 0
  52 001a 0CBF     		ite	eq
  53 001c 0025     		moveq	r5, #0
  54 001e 0125     		movne	r5, #1
  55 0020 30D0     		beq	.L2
  56              		.loc 1 190 0 is_stmt 0 discriminator 1
  57 0022 4FF49042 		mov	r2, #18432
  58 0026 4FF49843 		mov	r3, #19456
  59 002a C4F20002 		movt	r2, 16384
  60 002e C4F20003 		movt	r3, 16384
  61 0032 9042     		cmp	r0, r2
  62 0034 18BF     		it	ne
  63 0036 9842     		cmpne	r0, r3
  64 0038 34D1     		bne	.L22
  65              	.LVL1:
  66              	.L5:
 191:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 192:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USARTx == USART1)
 193:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 194:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 195:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 196:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 197:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART2)
 198:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 199:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 200:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 201:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 202:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART3)
  67              		.loc 1 202 0 is_stmt 1
  68 003a 4FF49043 		mov	r3, #18432
  69 003e C4F20003 		movt	r3, 16384
  70 0042 9C42     		cmp	r4, r3
  71 0044 64D0     		beq	.L23
 203:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 204:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 205:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 206:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 207:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART4)
  72              		.loc 1 207 0
  73 0046 4FF49843 		mov	r3, #19456
  74 004a C4F20003 		movt	r3, 16384
  75 004e 9C42     		cmp	r4, r3
  76 0050 6AD0     		beq	.L24
 208:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 209:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 210:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 211:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 212:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART5)
  77              		.loc 1 212 0
  78 0052 4FF4A043 		mov	r3, #20480
  79 0056 C4F20003 		movt	r3, 16384
  80 005a 9C42     		cmp	r4, r3
  81 005c 70D0     		beq	.L25
 213:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 214:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 215:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 216:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }  
 217:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART6)
  82              		.loc 1 217 0
  83 005e 4FF4A053 		mov	r3, #5120
  84 0062 C4F20103 		movt	r3, 16385
  85 0066 9C42     		cmp	r4, r3
  86 0068 76D0     		beq	.L26
 218:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 219:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 220:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 221:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 222:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART7)
  87              		.loc 1 222 0
  88 006a 4FF4F043 		mov	r3, #30720
  89 006e C4F20003 		movt	r3, 16384
  90 0072 9C42     		cmp	r4, r3
  91 0074 7AD0     		beq	.L27
 223:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 224:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 225:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 226:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 227:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 228:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 229:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     if (USARTx == UART8)
  92              		.loc 1 229 0
  93 0076 4FF4F843 		mov	r3, #31744
  94 007a C4F20003 		movt	r3, 16384
  95 007e 9C42     		cmp	r4, r3
  96 0080 30D0     		beq	.L28
  97 0082 38BD     		pop	{r3, r4, r5, pc}
  98              	.LVL2:
  99              	.L2:
 192:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 100              		.loc 1 192 0
 101 0084 9842     		cmp	r0, r3
 102 0086 39D0     		beq	.L29
 197:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 103              		.loc 1 197 0
 104 0088 9042     		cmp	r0, r2
 105 008a D6D1     		bne	.L5
 199:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 106              		.loc 1 199 0
 107 008c 4FF40030 		mov	r0, #131072
 108              	.LVL3:
 109 0090 0121     		movs	r1, #1
 110 0092 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 111              	.LVL4:
 200:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 112              		.loc 1 200 0
 113 0096 2946     		mov	r1, r5
 114 0098 4FF40030 		mov	r0, #131072
 230:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     { 
 231:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 232:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 233:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     }
 234:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 235:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 115              		.loc 1 235 0
 116 009c BDE83840 		pop	{r3, r4, r5, lr}
 117              	.LVL5:
 200:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 118              		.loc 1 200 0
 119 00a0 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
 120              	.LVL6:
 121              	.L22:
 190:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 122              		.loc 1 190 0 discriminator 1
 123 00a4 4FF4A042 		mov	r2, #20480
 124 00a8 4FF4A053 		mov	r3, #5120
 125 00ac C4F20002 		movt	r2, 16384
 126 00b0 C4F20103 		movt	r3, 16385
 127 00b4 9042     		cmp	r0, r2
 128 00b6 18BF     		it	ne
 129 00b8 9842     		cmpne	r0, r3
 130 00ba BED0     		beq	.L5
 131 00bc 4FF4F042 		mov	r2, #30720
 132 00c0 4FF4F843 		mov	r3, #31744
 133 00c4 C4F20002 		movt	r2, 16384
 134 00c8 C4F20003 		movt	r3, 16384
 135 00cc 9042     		cmp	r0, r2
 136 00ce 18BF     		it	ne
 137 00d0 9842     		cmpne	r0, r3
 138 00d2 B2D0     		beq	.L5
 139 00d4 40F20000 		movw	r0, #:lower16:.LC0
 140              	.LVL7:
 141 00d8 C0F20000 		movt	r0, #:upper16:.LC0
 142 00dc BE21     		movs	r1, #190
 143 00de FFF7FEFF 		bl	assert_failed
 144              	.LVL8:
 145 00e2 AAE7     		b	.L5
 146              	.L28:
 231:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 147              		.loc 1 231 0
 148 00e4 4FF00040 		mov	r0, #-2147483648
 149 00e8 0121     		movs	r1, #1
 150 00ea FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 151              	.LVL9:
 232:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     }
 152              		.loc 1 232 0
 153 00ee 4FF00040 		mov	r0, #-2147483648
 154 00f2 0021     		movs	r1, #0
 155              		.loc 1 235 0
 156 00f4 BDE83840 		pop	{r3, r4, r5, lr}
 157              	.LVL10:
 232:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     }
 158              		.loc 1 232 0
 159 00f8 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
 160              	.LVL11:
 161              	.L29:
 194:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 162              		.loc 1 194 0
 163 00fc 1020     		movs	r0, #16
 164              	.LVL12:
 165 00fe 0121     		movs	r1, #1
 166 0100 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 167              	.LVL13:
 195:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 168              		.loc 1 195 0
 169 0104 2946     		mov	r1, r5
 170 0106 1020     		movs	r0, #16
 171              		.loc 1 235 0
 172 0108 BDE83840 		pop	{r3, r4, r5, lr}
 173              	.LVL14:
 195:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 174              		.loc 1 195 0
 175 010c FFF7FEBF 		b	RCC_APB2PeriphResetCmd
 176              	.LVL15:
 177              	.L23:
 204:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 178              		.loc 1 204 0
 179 0110 4FF48020 		mov	r0, #262144
 180 0114 0121     		movs	r1, #1
 181 0116 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 182              	.LVL16:
 205:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 183              		.loc 1 205 0
 184 011a 4FF48020 		mov	r0, #262144
 185 011e 0021     		movs	r1, #0
 186              		.loc 1 235 0
 187 0120 BDE83840 		pop	{r3, r4, r5, lr}
 188              	.LVL17:
 205:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 189              		.loc 1 205 0
 190 0124 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
 191              	.LVL18:
 192              	.L24:
 209:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 193              		.loc 1 209 0
 194 0128 4FF40020 		mov	r0, #524288
 195 012c 0121     		movs	r1, #1
 196 012e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 197              	.LVL19:
 210:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 198              		.loc 1 210 0
 199 0132 4FF40020 		mov	r0, #524288
 200 0136 0021     		movs	r1, #0
 201              		.loc 1 235 0
 202 0138 BDE83840 		pop	{r3, r4, r5, lr}
 203              	.LVL20:
 210:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 204              		.loc 1 210 0
 205 013c FFF7FEBF 		b	RCC_APB1PeriphResetCmd
 206              	.LVL21:
 207              	.L25:
 214:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 208              		.loc 1 214 0
 209 0140 4FF48010 		mov	r0, #1048576
 210 0144 0121     		movs	r1, #1
 211 0146 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 212              	.LVL22:
 215:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }  
 213              		.loc 1 215 0
 214 014a 4FF48010 		mov	r0, #1048576
 215 014e 0021     		movs	r1, #0
 216              		.loc 1 235 0
 217 0150 BDE83840 		pop	{r3, r4, r5, lr}
 218              	.LVL23:
 215:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }  
 219              		.loc 1 215 0
 220 0154 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
 221              	.LVL24:
 222              	.L26:
 219:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 223              		.loc 1 219 0
 224 0158 2020     		movs	r0, #32
 225 015a 0121     		movs	r1, #1
 226 015c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 227              	.LVL25:
 220:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 228              		.loc 1 220 0
 229 0160 2020     		movs	r0, #32
 230 0162 0021     		movs	r1, #0
 231              		.loc 1 235 0
 232 0164 BDE83840 		pop	{r3, r4, r5, lr}
 233              	.LVL26:
 220:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 234              		.loc 1 220 0
 235 0168 FFF7FEBF 		b	RCC_APB2PeriphResetCmd
 236              	.LVL27:
 237              	.L27:
 224:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 238              		.loc 1 224 0
 239 016c 4FF08040 		mov	r0, #1073741824
 240 0170 0121     		movs	r1, #1
 241 0172 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 242              	.LVL28:
 225:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 243              		.loc 1 225 0
 244 0176 4FF08040 		mov	r0, #1073741824
 245 017a 0021     		movs	r1, #0
 246              		.loc 1 235 0
 247 017c BDE83840 		pop	{r3, r4, r5, lr}
 248              	.LVL29:
 225:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 249              		.loc 1 225 0
 250 0180 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
 251              	.LVL30:
 252              		.cfi_endproc
 253              	.LFE123:
 255              		.section	.text.USART_Init,"ax",%progbits
 256              		.align	2
 257              		.global	USART_Init
 258              		.thumb
 259              		.thumb_func
 261              	USART_Init:
 262              	.LFB124:
 236:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 237:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 238:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 239:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 240:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 241:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 242:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 243:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 244:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 245:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 246:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 247:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 263              		.loc 1 247 0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 16
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267              	.LVL31:
 268 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 269              	.LCFI1:
 270              		.cfi_def_cfa_offset 20
 271              		.cfi_offset 4, -20
 272              		.cfi_offset 5, -16
 273              		.cfi_offset 6, -12
 274              		.cfi_offset 7, -8
 275              		.cfi_offset 14, -4
 248:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 249:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 250:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 251:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 252:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 253:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 254:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 276              		.loc 1 254 0
 277 0002 4FF48842 		mov	r2, #17408
 278 0006 4FF48053 		mov	r3, #4096
 279 000a C4F20002 		movt	r2, 16384
 280 000e C4F20103 		movt	r3, 16385
 281 0012 9042     		cmp	r0, r2
 282 0014 18BF     		it	ne
 283 0016 9842     		cmpne	r0, r3
 247:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 284              		.loc 1 247 0
 285 0018 85B0     		sub	sp, sp, #20
 286              	.LCFI2:
 287              		.cfi_def_cfa_offset 40
 247:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 288              		.loc 1 247 0
 289 001a 0446     		mov	r4, r0
 290 001c 0D46     		mov	r5, r1
 291              		.loc 1 254 0
 292 001e 0CBF     		ite	eq
 293 0020 0026     		moveq	r6, #0
 294 0022 0126     		movne	r6, #1
 295 0024 0CD0     		beq	.L31
 296              		.loc 1 254 0 is_stmt 0 discriminator 1
 297 0026 4FF49042 		mov	r2, #18432
 298 002a 4FF49843 		mov	r3, #19456
 299 002e C4F20002 		movt	r2, 16384
 300 0032 C4F20003 		movt	r3, 16384
 301 0036 9042     		cmp	r0, r2
 302 0038 18BF     		it	ne
 303 003a 9842     		cmpne	r0, r3
 304 003c 40F0CD80 		bne	.L80
 305              	.LVL32:
 306              	.L31:
 255:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 307              		.loc 1 255 0 is_stmt 1
 308 0040 2B68     		ldr	r3, [r5]
 309 0042 47F2DF01 		movw	r1, #28895
 310 0046 013B     		subs	r3, r3, #1
 311 0048 C0F27201 		movt	r1, 114
 312 004c 8B42     		cmp	r3, r1
 313 004e 00F2E680 		bhi	.L81
 314              	.L32:
 256:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 315              		.loc 1 256 0
 316 0052 AB88     		ldrh	r3, [r5, #4]
 317 0054 23F48053 		bic	r3, r3, #4096
 318 0058 1B04     		lsls	r3, r3, #16
 319 005a 1B0C     		lsrs	r3, r3, #16
 320 005c 002B     		cmp	r3, #0
 321 005e 40F0E680 		bne	.L82
 322              	.L33:
 257:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 323              		.loc 1 257 0
 324 0062 EB88     		ldrh	r3, [r5, #6]
 325 0064 23F44053 		bic	r3, r3, #12288
 326 0068 9BB2     		uxth	r3, r3
 327 006a 002B     		cmp	r3, #0
 328 006c 40F0ED80 		bne	.L45
 329              	.L46:
 258:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 330              		.loc 1 258 0
 331 0070 2B89     		ldrh	r3, [r5, #8]
 332 0072 4FF6FF31 		movw	r1, #64511
 333 0076 1940     		ands	r1, r1, r3
 334 0078 51B1     		cbz	r1, .L34
 335              		.loc 1 258 0 is_stmt 0 discriminator 1
 336 007a B3F5C06F 		cmp	r3, #1536
 337 007e 07D0     		beq	.L34
 338 0080 40F20000 		movw	r0, #:lower16:.LC0
 339 0084 C0F20000 		movt	r0, #:upper16:.LC0
 340 0088 4FF48171 		mov	r1, #258
 341 008c FFF7FEFF 		bl	assert_failed
 342              	.LVL33:
 343              	.L34:
 259:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 344              		.loc 1 259 0 is_stmt 1
 345 0090 6B89     		ldrh	r3, [r5, #10]
 346 0092 4FF6F371 		movw	r1, #65523
 347 0096 1940     		ands	r1, r1, r3
 348 0098 0029     		cmp	r1, #0
 349 009a 75D1     		bne	.L35
 350              		.loc 1 259 0 is_stmt 0 discriminator 2
 351 009c 002B     		cmp	r3, #0
 352 009e 73D0     		beq	.L35
 260:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 353              		.loc 1 260 0 is_stmt 1
 354 00a0 AB89     		ldrh	r3, [r5, #12]
 355 00a2 4FF6FF62 		movw	r2, #65279
 356 00a6 1A40     		ands	r2, r2, r3
 357 00a8 002A     		cmp	r2, #0
 358 00aa 7BD0     		beq	.L47
 359              	.L83:
 360              		.loc 1 260 0 is_stmt 0 discriminator 1
 361 00ac B2F5007F 		cmp	r2, #512
 362 00b0 00F0C680 		beq	.L48
 363 00b4 40F20000 		movw	r0, #:lower16:.LC0
 364 00b8 4FF48271 		mov	r1, #260
 365 00bc C0F20000 		movt	r0, #:upper16:.LC0
 366 00c0 FFF7FEFF 		bl	assert_failed
 367              	.LVL34:
 368 00c4 A989     		ldrh	r1, [r5, #12]
 261:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 262:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 263:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 369              		.loc 1 263 0 is_stmt 1 discriminator 1
 370 00c6 0029     		cmp	r1, #0
 371 00c8 6FD1     		bne	.L38
 372              	.L39:
 264:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 265:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 266:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 267:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 268:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 269:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 373              		.loc 1 269 0
 374 00ca 228A     		ldrh	r2, [r4, #16]
 375              	.LVL35:
 270:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 271:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 272:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 273:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 274:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 275:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 276:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 376              		.loc 1 276 0
 377 00cc EB88     		ldrh	r3, [r5, #6]
 277:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 278:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 279:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 280:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 281:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 282:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 283:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 284:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 285:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 286:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 287:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 288:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 289:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 290:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 291:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 378              		.loc 1 291 0
 379 00ce 2F89     		ldrh	r7, [r5, #8]
 380 00d0 AE88     		ldrh	r6, [r5, #4]
 381 00d2 6889     		ldrh	r0, [r5, #10]
 272:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 382              		.loc 1 272 0
 383 00d4 22F44052 		bic	r2, r2, #12288
 384              	.LVL36:
 385 00d8 1204     		lsls	r2, r2, #16
 386 00da 120C     		lsrs	r2, r2, #16
 387              	.LVL37:
 279:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 388              		.loc 1 279 0
 389 00dc 1A43     		orrs	r2, r2, r3
 390              	.LVL38:
 391 00de 2282     		strh	r2, [r4, #16]	@ movhi
 282:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 392              		.loc 1 282 0
 393 00e0 A389     		ldrh	r3, [r4, #12]
 394              	.LVL39:
 285:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 395              		.loc 1 285 0
 396 00e2 23F4B053 		bic	r3, r3, #5632
 397              	.LVL40:
 398              		.loc 1 291 0
 399 00e6 47EA0602 		orr	r2, r7, r6
 285:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 400              		.loc 1 285 0
 401 00ea 23F00C03 		bic	r3, r3, #12
 402              		.loc 1 291 0
 403 00ee 0243     		orrs	r2, r2, r0
 285:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 404              		.loc 1 285 0
 405 00f0 1B04     		lsls	r3, r3, #16
 406              		.loc 1 291 0
 407 00f2 92B2     		uxth	r2, r2
 285:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 408              		.loc 1 285 0
 409 00f4 1B0C     		lsrs	r3, r3, #16
 410              	.LVL41:
 292:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 293:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 294:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR1 */
 295:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 411              		.loc 1 295 0
 412 00f6 1343     		orrs	r3, r3, r2
 413              	.LVL42:
 414 00f8 A381     		strh	r3, [r4, #12]	@ movhi
 296:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 297:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 298:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 415              		.loc 1 298 0
 416 00fa A38A     		ldrh	r3, [r4, #20]
 417              	.LVL43:
 299:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 300:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 301:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 418              		.loc 1 301 0
 419 00fc 23F44073 		bic	r3, r3, #768
 420              	.LVL44:
 421 0100 1B04     		lsls	r3, r3, #16
 422 0102 1B0C     		lsrs	r3, r3, #16
 423              	.LVL45:
 302:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 303:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 304:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 305:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 306:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 307:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR3 */
 308:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 424              		.loc 1 308 0
 425 0104 0B43     		orrs	r3, r3, r1
 426              	.LVL46:
 427 0106 A382     		strh	r3, [r4, #20]	@ movhi
 309:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 310:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 311:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 312:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 428              		.loc 1 312 0
 429 0108 6846     		mov	r0, sp
 430 010a FFF7FEFF 		bl	RCC_GetClocksFreq
 431              	.LVL47:
 313:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 314:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 315:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 316:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 317:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 318:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 319:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 320:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 321:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 322:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 323:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the integer part */
 324:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 432              		.loc 1 324 0
 433 010e A689     		ldrh	r6, [r4, #12]
 320:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 434              		.loc 1 320 0
 435 0110 0298     		ldr	r0, [sp, #8]
 316:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 436              		.loc 1 316 0
 437 0112 039B     		ldr	r3, [sp, #12]
 314:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 438              		.loc 1 314 0
 439 0114 4FF4A051 		mov	r1, #5120
 440 0118 4FF48052 		mov	r2, #4096
 441 011c C4F20101 		movt	r1, 16385
 442 0120 C4F20102 		movt	r2, 16385
 320:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 443              		.loc 1 320 0
 444 0124 9442     		cmp	r4, r2
 445 0126 18BF     		it	ne
 446 0128 8C42     		cmpne	r4, r1
 447              		.loc 1 324 0
 448 012a 32B2     		sxth	r2, r6
 320:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 449              		.loc 1 320 0
 450 012c 18BF     		it	ne
 451 012e 0346     		movne	r3, r0
 452              	.LVL48:
 453              		.loc 1 324 0
 454 0130 002A     		cmp	r2, #0
 325:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 326:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 327:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 455              		.loc 1 327 0
 456 0132 2A68     		ldr	r2, [r5]
 328:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 329:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 330:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 331:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 332:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 333:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 334:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 335:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 336:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the fractional part */
 337:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 338:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 339:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 340:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 457              		.loc 1 340 0
 458 0134 A089     		ldrh	r0, [r4, #12]
 327:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 459              		.loc 1 327 0
 460 0136 03EB8303 		add	r3, r3, r3, lsl #2
 461              	.LVL49:
 462 013a B4BF     		ite	lt
 463 013c 5200     		lsllt	r2, r2, #1
 332:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 464              		.loc 1 332 0
 465 013e 9200     		lslge	r2, r2, #2
 466 0140 03EB8303 		add	r3, r3, r3, lsl #2
 467 0144 B3FBF2F3 		udiv	r3, r3, r2
 468              	.LVL50:
 334:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 469              		.loc 1 334 0
 470 0148 48F21F52 		movw	r2, #34079
 471 014c C5F2EB12 		movt	r2, 20971
 472 0150 A2FB0351 		umull	r5, r1, r2, r3
 473              	.LVL51:
 474              		.loc 1 340 0
 475 0154 00B2     		sxth	r0, r0
 337:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 476              		.loc 1 337 0
 477 0156 6425     		movs	r5, #100
 334:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 478              		.loc 1 334 0
 479 0158 4909     		lsrs	r1, r1, #5
 480              	.LVL52:
 481              		.loc 1 340 0
 482 015a 0028     		cmp	r0, #0
 337:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 483              		.loc 1 337 0
 484 015c 01FB1533 		mls	r3, r1, r5, r3
 485              	.LVL53:
 341:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 342:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 486              		.loc 1 342 0
 487 0160 B5BF     		itete	lt
 488 0162 DB00     		lsllt	r3, r3, #3
 489              	.LVL54:
 343:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 344:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 345:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 346:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 490              		.loc 1 346 0
 491 0164 1B01     		lslge	r3, r3, #4
 342:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 492              		.loc 1 342 0
 493 0166 3233     		addlt	r3, r3, #50
 494              		.loc 1 346 0
 495 0168 3233     		addge	r3, r3, #50
 342:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 496              		.loc 1 342 0
 497 016a B5BF     		itete	lt
 498 016c A2FB0302 		umulllt	r0, r2, r2, r3
 499              		.loc 1 346 0
 500 0170 A2FB0352 		umullge	r5, r2, r2, r3
 342:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 501              		.loc 1 342 0
 502 0174 C2F34212 		ubfxlt	r2, r2, #5, #3
 503              		.loc 1 346 0
 504 0178 C2F34312 		ubfxge	r2, r2, #5, #4
 337:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 505              		.loc 1 337 0
 506 017c 0901     		lsls	r1, r1, #4
 507              	.LVL55:
 508              		.loc 1 346 0
 509 017e 1143     		orrs	r1, r1, r2
 510              	.LVL56:
 347:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 348:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 349:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART BRR register */
 350:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 511              		.loc 1 350 0
 512 0180 89B2     		uxth	r1, r1
 513              	.LVL57:
 514 0182 2181     		strh	r1, [r4, #8]	@ movhi
 351:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 515              		.loc 1 351 0
 516 0184 05B0     		add	sp, sp, #20
 517              		@ sp needed
 518 0186 F0BD     		pop	{r4, r5, r6, r7, pc}
 519              	.LVL58:
 520              	.L35:
 259:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 521              		.loc 1 259 0 discriminator 1
 522 0188 40F20000 		movw	r0, #:lower16:.LC0
 523 018c C0F20000 		movt	r0, #:upper16:.LC0
 524 0190 40F20311 		movw	r1, #259
 525 0194 FFF7FEFF 		bl	assert_failed
 526              	.LVL59:
 260:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 527              		.loc 1 260 0 discriminator 1
 528 0198 AB89     		ldrh	r3, [r5, #12]
 529 019a 4FF6FF62 		movw	r2, #65279
 530 019e 1A40     		ands	r2, r2, r3
 531 01a0 002A     		cmp	r2, #0
 532 01a2 83D1     		bne	.L83
 533              	.L47:
 534 01a4 1946     		mov	r1, r3
 263:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 535              		.loc 1 263 0
 536 01a6 0029     		cmp	r1, #0
 537 01a8 8FD0     		beq	.L39
 538              	.L38:
 265:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 539              		.loc 1 265 0
 540 01aa 002E     		cmp	r6, #0
 541 01ac 8DD0     		beq	.L39
 542              	.L84:
 265:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 543              		.loc 1 265 0 is_stmt 0 discriminator 1
 544 01ae 4FF49042 		mov	r2, #18432
 545 01b2 4FF4A053 		mov	r3, #5120
 546 01b6 C4F20002 		movt	r2, 16384
 547 01ba C4F20103 		movt	r3, 16385
 548 01be 9442     		cmp	r4, r2
 549 01c0 18BF     		it	ne
 550 01c2 9C42     		cmpne	r4, r3
 551 01c4 81D0     		beq	.L39
 552 01c6 40F20000 		movw	r0, #:lower16:.LC0
 553 01ca 40F20911 		movw	r1, #265
 554 01ce C0F20000 		movt	r0, #:upper16:.LC0
 555 01d2 FFF7FEFF 		bl	assert_failed
 556              	.LVL60:
 557 01d6 A989     		ldrh	r1, [r5, #12]
 558 01d8 77E7     		b	.L39
 559              	.LVL61:
 560              	.L80:
 254:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 561              		.loc 1 254 0 is_stmt 1 discriminator 1
 562 01da 4FF4A042 		mov	r2, #20480
 563 01de 4FF4A053 		mov	r3, #5120
 564 01e2 C4F20002 		movt	r2, 16384
 565 01e6 C4F20103 		movt	r3, 16385
 566 01ea 9042     		cmp	r0, r2
 567 01ec 18BF     		it	ne
 568 01ee 9842     		cmpne	r0, r3
 569 01f0 3FF426AF 		beq	.L31
 570 01f4 4FF4F042 		mov	r2, #30720
 571 01f8 4FF4F843 		mov	r3, #31744
 572 01fc C4F20002 		movt	r2, 16384
 573 0200 C4F20003 		movt	r3, 16384
 574 0204 9042     		cmp	r0, r2
 575 0206 18BF     		it	ne
 576 0208 9842     		cmpne	r0, r3
 577 020a 3FF419AF 		beq	.L31
 578 020e 40F20000 		movw	r0, #:lower16:.LC0
 579              	.LVL62:
 580 0212 C0F20000 		movt	r0, #:upper16:.LC0
 581 0216 FE21     		movs	r1, #254
 582              	.LVL63:
 583 0218 FFF7FEFF 		bl	assert_failed
 584              	.LVL64:
 585 021c 10E7     		b	.L31
 586              	.L81:
 255:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 587              		.loc 1 255 0 discriminator 1
 588 021e 40F20000 		movw	r0, #:lower16:.LC0
 589 0222 C0F20000 		movt	r0, #:upper16:.LC0
 590 0226 FF21     		movs	r1, #255
 591 0228 FFF7FEFF 		bl	assert_failed
 592              	.LVL65:
 593 022c 11E7     		b	.L32
 594              	.L82:
 256:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 595              		.loc 1 256 0 discriminator 1
 596 022e 40F20000 		movw	r0, #:lower16:.LC0
 597 0232 C0F20000 		movt	r0, #:upper16:.LC0
 598 0236 4FF48071 		mov	r1, #256
 599 023a FFF7FEFF 		bl	assert_failed
 600              	.LVL66:
 601 023e 10E7     		b	.L33
 602              	.L48:
 603 0240 1946     		mov	r1, r3
 265:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 604              		.loc 1 265 0
 605 0242 002E     		cmp	r6, #0
 606 0244 3FF441AF 		beq	.L39
 607 0248 B1E7     		b	.L84
 608              	.L45:
 257:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 609              		.loc 1 257 0 discriminator 1
 610 024a 40F20000 		movw	r0, #:lower16:.LC0
 611 024e C0F20000 		movt	r0, #:upper16:.LC0
 612 0252 40F20111 		movw	r1, #257
 613 0256 FFF7FEFF 		bl	assert_failed
 614              	.LVL67:
 615 025a 09E7     		b	.L46
 616              		.cfi_endproc
 617              	.LFE124:
 619              		.section	.text.USART_StructInit,"ax",%progbits
 620              		.align	2
 621              		.global	USART_StructInit
 622              		.thumb
 623              		.thumb_func
 625              	USART_StructInit:
 626              	.LFB125:
 352:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 353:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 354:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 355:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 356:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         be initialized.
 357:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 358:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 359:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 360:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 627              		.loc 1 360 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 631              		@ link register save eliminated.
 632              	.LVL68:
 361:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 362:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 363:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 633              		.loc 1 363 0
 634 0000 0023     		movs	r3, #0
 362:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 635              		.loc 1 362 0
 636 0002 4FF41651 		mov	r1, #9600
 364:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 365:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 366:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 637              		.loc 1 366 0
 638 0006 0C22     		movs	r2, #12
 362:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 639              		.loc 1 362 0
 640 0008 0160     		str	r1, [r0]
 641              		.loc 1 366 0
 642 000a 4281     		strh	r2, [r0, #10]	@ movhi
 363:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 643              		.loc 1 363 0
 644 000c 8380     		strh	r3, [r0, #4]	@ movhi
 364:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 645              		.loc 1 364 0
 646 000e C380     		strh	r3, [r0, #6]	@ movhi
 365:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 647              		.loc 1 365 0
 648 0010 0381     		strh	r3, [r0, #8]	@ movhi
 367:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 649              		.loc 1 367 0
 650 0012 8381     		strh	r3, [r0, #12]	@ movhi
 651 0014 7047     		bx	lr
 652              		.cfi_endproc
 653              	.LFE125:
 655 0016 00BF     		.section	.text.USART_ClockInit,"ax",%progbits
 656              		.align	2
 657              		.global	USART_ClockInit
 658              		.thumb
 659              		.thumb_func
 661              	USART_ClockInit:
 662              	.LFB126:
 368:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 369:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 370:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 371:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 372:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 373:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 374:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 375:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 376:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 377:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 378:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 379:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 380:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 663              		.loc 1 380 0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 0
 666              		@ frame_needed = 0, uses_anonymous_args = 0
 667              	.LVL69:
 668 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 669              	.LCFI3:
 670              		.cfi_def_cfa_offset 24
 671              		.cfi_offset 3, -24
 672              		.cfi_offset 4, -20
 673              		.cfi_offset 5, -16
 674              		.cfi_offset 6, -12
 675              		.cfi_offset 7, -8
 676              		.cfi_offset 14, -4
 381:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 382:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 383:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 677              		.loc 1 383 0
 678 0002 4FF48052 		mov	r2, #4096
 679 0006 4FF48843 		mov	r3, #17408
 680 000a C4F20102 		movt	r2, 16385
 681 000e C4F20003 		movt	r3, 16384
 682 0012 9042     		cmp	r0, r2
 683 0014 18BF     		it	ne
 684 0016 9842     		cmpne	r0, r3
 380:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 685              		.loc 1 380 0
 686 0018 0546     		mov	r5, r0
 687 001a 0C46     		mov	r4, r1
 688              		.loc 1 383 0
 689 001c 0BD0     		beq	.L87
 690              		.loc 1 383 0 is_stmt 0 discriminator 1
 691 001e 4FF49042 		mov	r2, #18432
 692 0022 4FF4A053 		mov	r3, #5120
 693 0026 C4F20002 		movt	r2, 16384
 694 002a C4F20103 		movt	r3, 16385
 695 002e 9042     		cmp	r0, r2
 696 0030 18BF     		it	ne
 697 0032 9842     		cmpne	r0, r3
 698 0034 4BD1     		bne	.L108
 699              	.LVL70:
 700              	.L87:
 384:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 701              		.loc 1 384 0 is_stmt 1
 702 0036 2388     		ldrh	r3, [r4]
 703 0038 23F40063 		bic	r3, r3, #2048
 704 003c 1B04     		lsls	r3, r3, #16
 705 003e 1B0C     		lsrs	r3, r3, #16
 706 0040 53BB     		cbnz	r3, .L109
 707              	.L88:
 385:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 708              		.loc 1 385 0
 709 0042 6388     		ldrh	r3, [r4, #2]
 710 0044 23F48063 		bic	r3, r3, #1024
 711 0048 1B04     		lsls	r3, r3, #16
 712 004a 1B0C     		lsrs	r3, r3, #16
 713 004c 002B     		cmp	r3, #0
 714 004e 35D1     		bne	.L110
 715              	.L89:
 386:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 716              		.loc 1 386 0
 717 0050 A388     		ldrh	r3, [r4, #4]
 718 0052 23F40073 		bic	r3, r3, #512
 719 0056 1B04     		lsls	r3, r3, #16
 720 0058 1B0C     		lsrs	r3, r3, #16
 721 005a 33BB     		cbnz	r3, .L111
 722              	.L90:
 387:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 723              		.loc 1 387 0
 724 005c E388     		ldrh	r3, [r4, #6]
 725 005e 4FF6FF62 		movw	r2, #65279
 726 0062 1A40     		ands	r2, r2, r3
 727 0064 1F46     		mov	r7, r3
 728 0066 42B1     		cbz	r2, .L91
 729              		.loc 1 387 0 is_stmt 0 discriminator 1
 730 0068 40F20000 		movw	r0, #:lower16:.LC0
 731 006c C0F20000 		movt	r0, #:upper16:.LC0
 732 0070 40F28311 		movw	r1, #387
 733 0074 FFF7FEFF 		bl	assert_failed
 734              	.LVL71:
 735 0078 E788     		ldrh	r7, [r4, #6]
 736              	.L91:
 388:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 389:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 390:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 391:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 392:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 393:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 394:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 395:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 396:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 397:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 398:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 399:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 737              		.loc 1 399 0 is_stmt 1
 738 007a 6288     		ldrh	r2, [r4, #2]
 739 007c 2688     		ldrh	r6, [r4]
 740 007e A088     		ldrh	r0, [r4, #4]
 390:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 741              		.loc 1 390 0
 742 0080 298A     		ldrh	r1, [r5, #16]
 743              	.LVL72:
 744              		.loc 1 399 0
 745 0082 3243     		orrs	r2, r2, r6
 746 0084 0243     		orrs	r2, r2, r0
 392:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 747              		.loc 1 392 0
 748 0086 21F47063 		bic	r3, r1, #3840
 749              		.loc 1 399 0
 750 008a 3A43     		orrs	r2, r2, r7
 392:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 751              		.loc 1 392 0
 752 008c 1B04     		lsls	r3, r3, #16
 753              		.loc 1 399 0
 754 008e 92B2     		uxth	r2, r2
 392:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 755              		.loc 1 392 0
 756 0090 1B0C     		lsrs	r3, r3, #16
 757              	.LVL73:
 400:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 401:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 758              		.loc 1 401 0
 759 0092 1343     		orrs	r3, r3, r2
 760              	.LVL74:
 761 0094 2B82     		strh	r3, [r5, #16]	@ movhi
 762              	.LVL75:
 763 0096 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 764              	.LVL76:
 765              	.L109:
 384:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 766              		.loc 1 384 0 discriminator 1
 767 0098 40F20000 		movw	r0, #:lower16:.LC0
 768 009c C0F20000 		movt	r0, #:upper16:.LC0
 769 00a0 4FF4C071 		mov	r1, #384
 770 00a4 FFF7FEFF 		bl	assert_failed
 771              	.LVL77:
 772 00a8 CBE7     		b	.L88
 773              	.L111:
 386:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 774              		.loc 1 386 0 discriminator 1
 775 00aa 40F20000 		movw	r0, #:lower16:.LC0
 776 00ae C0F20000 		movt	r0, #:upper16:.LC0
 777 00b2 4FF4C171 		mov	r1, #386
 778 00b6 FFF7FEFF 		bl	assert_failed
 779              	.LVL78:
 780 00ba CFE7     		b	.L90
 781              	.L110:
 385:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 782              		.loc 1 385 0 discriminator 1
 783 00bc 40F20000 		movw	r0, #:lower16:.LC0
 784 00c0 C0F20000 		movt	r0, #:upper16:.LC0
 785 00c4 40F28111 		movw	r1, #385
 786 00c8 FFF7FEFF 		bl	assert_failed
 787              	.LVL79:
 788 00cc C0E7     		b	.L89
 789              	.LVL80:
 790              	.L108:
 383:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 791              		.loc 1 383 0 discriminator 1
 792 00ce 40F20000 		movw	r0, #:lower16:.LC0
 793              	.LVL81:
 794 00d2 C0F20000 		movt	r0, #:upper16:.LC0
 795 00d6 40F27F11 		movw	r1, #383
 796              	.LVL82:
 797 00da FFF7FEFF 		bl	assert_failed
 798              	.LVL83:
 799 00de AAE7     		b	.L87
 800              		.cfi_endproc
 801              	.LFE126:
 803              		.section	.text.USART_ClockStructInit,"ax",%progbits
 804              		.align	2
 805              		.global	USART_ClockStructInit
 806              		.thumb
 807              		.thumb_func
 809              	USART_ClockStructInit:
 810              	.LFB127:
 402:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 403:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 404:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 405:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 406:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 407:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         which will be initialized.
 408:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 409:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 410:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 411:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 811              		.loc 1 411 0
 812              		.cfi_startproc
 813              		@ args = 0, pretend = 0, frame = 0
 814              		@ frame_needed = 0, uses_anonymous_args = 0
 815              		@ link register save eliminated.
 816              	.LVL84:
 412:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 413:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 817              		.loc 1 413 0
 818 0000 0023     		movs	r3, #0
 819 0002 0380     		strh	r3, [r0]	@ movhi
 414:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 820              		.loc 1 414 0
 821 0004 4380     		strh	r3, [r0, #2]	@ movhi
 415:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 822              		.loc 1 415 0
 823 0006 8380     		strh	r3, [r0, #4]	@ movhi
 416:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 824              		.loc 1 416 0
 825 0008 C380     		strh	r3, [r0, #6]	@ movhi
 826 000a 7047     		bx	lr
 827              		.cfi_endproc
 828              	.LFE127:
 830              		.section	.text.USART_Cmd,"ax",%progbits
 831              		.align	2
 832              		.global	USART_Cmd
 833              		.thumb
 834              		.thumb_func
 836              	USART_Cmd:
 837              	.LFB128:
 417:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 418:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 419:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 420:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 421:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 422:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 423:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 424:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 425:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 426:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 427:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 428:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 838              		.loc 1 428 0
 839              		.cfi_startproc
 840              		@ args = 0, pretend = 0, frame = 0
 841              		@ frame_needed = 0, uses_anonymous_args = 0
 842              	.LVL85:
 843 0000 38B5     		push	{r3, r4, r5, lr}
 844              	.LCFI4:
 845              		.cfi_def_cfa_offset 16
 846              		.cfi_offset 3, -16
 847              		.cfi_offset 4, -12
 848              		.cfi_offset 5, -8
 849              		.cfi_offset 14, -4
 429:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 430:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 850              		.loc 1 430 0
 851 0002 4FF48052 		mov	r2, #4096
 852 0006 4FF48843 		mov	r3, #17408
 853 000a C4F20102 		movt	r2, 16385
 854 000e C4F20003 		movt	r3, 16384
 855 0012 9042     		cmp	r0, r2
 856 0014 18BF     		it	ne
 857 0016 9842     		cmpne	r0, r3
 428:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 858              		.loc 1 428 0
 859 0018 0446     		mov	r4, r0
 860 001a 0D46     		mov	r5, r1
 861              		.loc 1 430 0
 862 001c 0BD0     		beq	.L114
 863              		.loc 1 430 0 is_stmt 0 discriminator 1
 864 001e 4FF49042 		mov	r2, #18432
 865 0022 4FF49843 		mov	r3, #19456
 866 0026 C4F20002 		movt	r2, 16384
 867 002a C4F20003 		movt	r3, 16384
 868 002e 9042     		cmp	r0, r2
 869 0030 18BF     		it	ne
 870 0032 9842     		cmpne	r0, r3
 871 0034 0FD1     		bne	.L131
 872              	.LVL86:
 873              	.L114:
 431:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 874              		.loc 1 431 0 is_stmt 1
 875 0036 012D     		cmp	r5, #1
 876 0038 2ED9     		bls	.L115
 877              		.loc 1 431 0 is_stmt 0 discriminator 1
 878 003a 40F20000 		movw	r0, #:lower16:.LC0
 879 003e C0F20000 		movt	r0, #:upper16:.LC0
 880 0042 40F2AF11 		movw	r1, #431
 881 0046 FFF7FEFF 		bl	assert_failed
 882              	.LVL87:
 883              	.L116:
 432:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 433:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 434:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 435:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 436:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 884              		.loc 1 436 0 is_stmt 1
 885 004a A389     		ldrh	r3, [r4, #12]
 886 004c 9BB2     		uxth	r3, r3
 887 004e 43F40053 		orr	r3, r3, #8192
 888 0052 A381     		strh	r3, [r4, #12]	@ movhi
 889 0054 38BD     		pop	{r3, r4, r5, pc}
 890              	.LVL88:
 891              	.L131:
 430:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 892              		.loc 1 430 0 discriminator 1
 893 0056 4FF4A042 		mov	r2, #20480
 894 005a 4FF4A053 		mov	r3, #5120
 895 005e C4F20002 		movt	r2, 16384
 896 0062 C4F20103 		movt	r3, 16385
 897 0066 9042     		cmp	r0, r2
 898 0068 18BF     		it	ne
 899 006a 9842     		cmpne	r0, r3
 900 006c E3D0     		beq	.L114
 901 006e 4FF4F042 		mov	r2, #30720
 902 0072 4FF4F843 		mov	r3, #31744
 903 0076 C4F20002 		movt	r2, 16384
 904 007a C4F20003 		movt	r3, 16384
 905 007e 9042     		cmp	r0, r2
 906 0080 18BF     		it	ne
 907 0082 9842     		cmpne	r0, r3
 908 0084 D7D0     		beq	.L114
 909 0086 40F20000 		movw	r0, #:lower16:.LC0
 910              	.LVL89:
 911 008a C0F20000 		movt	r0, #:upper16:.LC0
 912 008e 4FF4D771 		mov	r1, #430
 913              	.LVL90:
 914 0092 FFF7FEFF 		bl	assert_failed
 915              	.LVL91:
 916 0096 CEE7     		b	.L114
 917              	.L115:
 433:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 918              		.loc 1 433 0
 919 0098 002D     		cmp	r5, #0
 920 009a D6D1     		bne	.L116
 437:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 438:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 439:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 440:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 441:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 921              		.loc 1 441 0
 922 009c A389     		ldrh	r3, [r4, #12]
 923 009e 23F40053 		bic	r3, r3, #8192
 924 00a2 1B04     		lsls	r3, r3, #16
 925 00a4 1B0C     		lsrs	r3, r3, #16
 926 00a6 A381     		strh	r3, [r4, #12]	@ movhi
 927 00a8 38BD     		pop	{r3, r4, r5, pc}
 928              		.cfi_endproc
 929              	.LFE128:
 931 00aa 00BF     		.section	.text.USART_SetPrescaler,"ax",%progbits
 932              		.align	2
 933              		.global	USART_SetPrescaler
 934              		.thumb
 935              		.thumb_func
 937              	USART_SetPrescaler:
 938              	.LFB129:
 442:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 443:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 444:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 445:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 446:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 447:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 448:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 449:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 450:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 451:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 452:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 453:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 454:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** { 
 939              		.loc 1 454 0
 940              		.cfi_startproc
 941              		@ args = 0, pretend = 0, frame = 0
 942              		@ frame_needed = 0, uses_anonymous_args = 0
 943              	.LVL92:
 944 0000 38B5     		push	{r3, r4, r5, lr}
 945              	.LCFI5:
 946              		.cfi_def_cfa_offset 16
 947              		.cfi_offset 3, -16
 948              		.cfi_offset 4, -12
 949              		.cfi_offset 5, -8
 950              		.cfi_offset 14, -4
 455:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 456:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 951              		.loc 1 456 0
 952 0002 4FF48052 		mov	r2, #4096
 953 0006 4FF48843 		mov	r3, #17408
 954 000a C4F20102 		movt	r2, 16385
 955 000e C4F20003 		movt	r3, 16384
 956 0012 9042     		cmp	r0, r2
 957 0014 18BF     		it	ne
 958 0016 9842     		cmpne	r0, r3
 454:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 959              		.loc 1 454 0
 960 0018 0446     		mov	r4, r0
 961 001a 0D46     		mov	r5, r1
 962              		.loc 1 456 0
 963 001c 23D0     		beq	.L133
 964              		.loc 1 456 0 is_stmt 0 discriminator 1
 965 001e 4FF49042 		mov	r2, #18432
 966 0022 4FF49843 		mov	r3, #19456
 967 0026 C4F20002 		movt	r2, 16384
 968 002a C4F20003 		movt	r3, 16384
 969 002e 9042     		cmp	r0, r2
 970 0030 18BF     		it	ne
 971 0032 9842     		cmpne	r0, r3
 972 0034 17D0     		beq	.L133
 973 0036 4FF4A042 		mov	r2, #20480
 974 003a 4FF4A053 		mov	r3, #5120
 975 003e C4F20002 		movt	r2, 16384
 976 0042 C4F20103 		movt	r3, 16385
 977 0046 9042     		cmp	r0, r2
 978 0048 18BF     		it	ne
 979 004a 9842     		cmpne	r0, r3
 980 004c 0BD0     		beq	.L133
 981 004e 4FF4F042 		mov	r2, #30720
 982 0052 4FF4F843 		mov	r3, #31744
 983 0056 C4F20002 		movt	r2, 16384
 984 005a C4F20003 		movt	r3, 16384
 985 005e 9042     		cmp	r0, r2
 986 0060 18BF     		it	ne
 987 0062 9842     		cmpne	r0, r3
 988 0064 08D1     		bne	.L146
 989              	.LVL93:
 990              	.L133:
 457:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 458:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 459:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 991              		.loc 1 459 0 is_stmt 1
 992 0066 238B     		ldrh	r3, [r4, #24]
 993 0068 03F47F43 		and	r3, r3, #65280
 994 006c 2383     		strh	r3, [r4, #24]	@ movhi
 460:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART prescaler */
 461:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 995              		.loc 1 461 0
 996 006e 238B     		ldrh	r3, [r4, #24]
 997 0070 9BB2     		uxth	r3, r3
 998 0072 1D43     		orrs	r5, r5, r3
 999 0074 2583     		strh	r5, [r4, #24]	@ movhi
 1000 0076 38BD     		pop	{r3, r4, r5, pc}
 1001              	.LVL94:
 1002              	.L146:
 456:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 1003              		.loc 1 456 0 discriminator 1
 1004 0078 40F20000 		movw	r0, #:lower16:.LC0
 1005              	.LVL95:
 1006 007c C0F20000 		movt	r0, #:upper16:.LC0
 1007 0080 4FF4E471 		mov	r1, #456
 1008              	.LVL96:
 1009 0084 FFF7FEFF 		bl	assert_failed
 1010              	.LVL97:
 1011 0088 EDE7     		b	.L133
 1012              		.cfi_endproc
 1013              	.LFE129:
 1015 008a 00BF     		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 1016              		.align	2
 1017              		.global	USART_OverSampling8Cmd
 1018              		.thumb
 1019              		.thumb_func
 1021              	USART_OverSampling8Cmd:
 1022              	.LFB130:
 462:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 463:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 464:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 465:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 466:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 467:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 468:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 469:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 470:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 471:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 472:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 473:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 474:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 475:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1023              		.loc 1 475 0
 1024              		.cfi_startproc
 1025              		@ args = 0, pretend = 0, frame = 0
 1026              		@ frame_needed = 0, uses_anonymous_args = 0
 1027              	.LVL98:
 1028 0000 38B5     		push	{r3, r4, r5, lr}
 1029              	.LCFI6:
 1030              		.cfi_def_cfa_offset 16
 1031              		.cfi_offset 3, -16
 1032              		.cfi_offset 4, -12
 1033              		.cfi_offset 5, -8
 1034              		.cfi_offset 14, -4
 476:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 477:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1035              		.loc 1 477 0
 1036 0002 4FF48052 		mov	r2, #4096
 1037 0006 4FF48843 		mov	r3, #17408
 1038 000a C4F20102 		movt	r2, 16385
 1039 000e C4F20003 		movt	r3, 16384
 1040 0012 9042     		cmp	r0, r2
 1041 0014 18BF     		it	ne
 1042 0016 9842     		cmpne	r0, r3
 475:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 1043              		.loc 1 475 0
 1044 0018 0446     		mov	r4, r0
 1045 001a 0D46     		mov	r5, r1
 1046              		.loc 1 477 0
 1047 001c 0BD0     		beq	.L148
 1048              		.loc 1 477 0 is_stmt 0 discriminator 1
 1049 001e 4FF49042 		mov	r2, #18432
 1050 0022 4FF49843 		mov	r3, #19456
 1051 0026 C4F20002 		movt	r2, 16384
 1052 002a C4F20003 		movt	r3, 16384
 1053 002e 9042     		cmp	r0, r2
 1054 0030 18BF     		it	ne
 1055 0032 9842     		cmpne	r0, r3
 1056 0034 11D1     		bne	.L165
 1057              	.LVL99:
 1058              	.L148:
 478:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1059              		.loc 1 478 0 is_stmt 1
 1060 0036 012D     		cmp	r5, #1
 1061 0038 30D9     		bls	.L149
 1062              		.loc 1 478 0 is_stmt 0 discriminator 1
 1063 003a 40F20000 		movw	r0, #:lower16:.LC0
 1064 003e C0F20000 		movt	r0, #:upper16:.LC0
 1065 0042 4FF4EF71 		mov	r1, #478
 1066 0046 FFF7FEFF 		bl	assert_failed
 1067              	.LVL100:
 1068              	.L150:
 479:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 480:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 481:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 482:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 483:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 1069              		.loc 1 483 0 is_stmt 1
 1070 004a A389     		ldrh	r3, [r4, #12]
 1071 004c 6FEA4343 		mvn	r3, r3, lsl #17
 1072 0050 6FEA5343 		mvn	r3, r3, lsr #17
 1073 0054 9BB2     		uxth	r3, r3
 1074 0056 A381     		strh	r3, [r4, #12]	@ movhi
 1075 0058 38BD     		pop	{r3, r4, r5, pc}
 1076              	.LVL101:
 1077              	.L165:
 477:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1078              		.loc 1 477 0 discriminator 1
 1079 005a 4FF4A042 		mov	r2, #20480
 1080 005e 4FF4A053 		mov	r3, #5120
 1081 0062 C4F20002 		movt	r2, 16384
 1082 0066 C4F20103 		movt	r3, 16385
 1083 006a 9042     		cmp	r0, r2
 1084 006c 18BF     		it	ne
 1085 006e 9842     		cmpne	r0, r3
 1086 0070 E1D0     		beq	.L148
 1087 0072 4FF4F042 		mov	r2, #30720
 1088 0076 4FF4F843 		mov	r3, #31744
 1089 007a C4F20002 		movt	r2, 16384
 1090 007e C4F20003 		movt	r3, 16384
 1091 0082 9042     		cmp	r0, r2
 1092 0084 18BF     		it	ne
 1093 0086 9842     		cmpne	r0, r3
 1094 0088 D5D0     		beq	.L148
 1095 008a 40F20000 		movw	r0, #:lower16:.LC0
 1096              	.LVL102:
 1097 008e C0F20000 		movt	r0, #:upper16:.LC0
 1098 0092 40F2DD11 		movw	r1, #477
 1099              	.LVL103:
 1100 0096 FFF7FEFF 		bl	assert_failed
 1101              	.LVL104:
 1102 009a CCE7     		b	.L148
 1103              	.L149:
 480:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 1104              		.loc 1 480 0
 1105 009c 002D     		cmp	r5, #0
 1106 009e D4D1     		bne	.L150
 484:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 485:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 486:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 487:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 488:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 1107              		.loc 1 488 0
 1108 00a0 A389     		ldrh	r3, [r4, #12]
 1109 00a2 C3F30E03 		ubfx	r3, r3, #0, #15
 1110 00a6 A381     		strh	r3, [r4, #12]	@ movhi
 1111 00a8 38BD     		pop	{r3, r4, r5, pc}
 1112              		.cfi_endproc
 1113              	.LFE130:
 1115 00aa 00BF     		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 1116              		.align	2
 1117              		.global	USART_OneBitMethodCmd
 1118              		.thumb
 1119              		.thumb_func
 1121              	USART_OneBitMethodCmd:
 1122              	.LFB131:
 489:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 490:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }  
 491:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 492:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 493:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 494:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 495:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 496:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 497:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 498:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 499:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 500:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 501:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1123              		.loc 1 501 0
 1124              		.cfi_startproc
 1125              		@ args = 0, pretend = 0, frame = 0
 1126              		@ frame_needed = 0, uses_anonymous_args = 0
 1127              	.LVL105:
 1128 0000 38B5     		push	{r3, r4, r5, lr}
 1129              	.LCFI7:
 1130              		.cfi_def_cfa_offset 16
 1131              		.cfi_offset 3, -16
 1132              		.cfi_offset 4, -12
 1133              		.cfi_offset 5, -8
 1134              		.cfi_offset 14, -4
 502:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 503:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1135              		.loc 1 503 0
 1136 0002 4FF48052 		mov	r2, #4096
 1137 0006 4FF48843 		mov	r3, #17408
 1138 000a C4F20102 		movt	r2, 16385
 1139 000e C4F20003 		movt	r3, 16384
 1140 0012 9042     		cmp	r0, r2
 1141 0014 18BF     		it	ne
 1142 0016 9842     		cmpne	r0, r3
 501:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 1143              		.loc 1 501 0
 1144 0018 0446     		mov	r4, r0
 1145 001a 0D46     		mov	r5, r1
 1146              		.loc 1 503 0
 1147 001c 0BD0     		beq	.L167
 1148              		.loc 1 503 0 is_stmt 0 discriminator 1
 1149 001e 4FF49042 		mov	r2, #18432
 1150 0022 4FF49843 		mov	r3, #19456
 1151 0026 C4F20002 		movt	r2, 16384
 1152 002a C4F20003 		movt	r3, 16384
 1153 002e 9042     		cmp	r0, r2
 1154 0030 18BF     		it	ne
 1155 0032 9842     		cmpne	r0, r3
 1156 0034 0FD1     		bne	.L184
 1157              	.LVL106:
 1158              	.L167:
 504:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1159              		.loc 1 504 0 is_stmt 1
 1160 0036 012D     		cmp	r5, #1
 1161 0038 2ED9     		bls	.L168
 1162              		.loc 1 504 0 is_stmt 0 discriminator 1
 1163 003a 40F20000 		movw	r0, #:lower16:.LC0
 1164 003e C0F20000 		movt	r0, #:upper16:.LC0
 1165 0042 4FF4FC71 		mov	r1, #504
 1166 0046 FFF7FEFF 		bl	assert_failed
 1167              	.LVL107:
 1168              	.L169:
 505:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 506:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 507:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 508:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 509:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 1169              		.loc 1 509 0 is_stmt 1
 1170 004a A38A     		ldrh	r3, [r4, #20]
 1171 004c 9BB2     		uxth	r3, r3
 1172 004e 43F40063 		orr	r3, r3, #2048
 1173 0052 A382     		strh	r3, [r4, #20]	@ movhi
 1174 0054 38BD     		pop	{r3, r4, r5, pc}
 1175              	.LVL108:
 1176              	.L184:
 503:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1177              		.loc 1 503 0 discriminator 1
 1178 0056 4FF4A042 		mov	r2, #20480
 1179 005a 4FF4A053 		mov	r3, #5120
 1180 005e C4F20002 		movt	r2, 16384
 1181 0062 C4F20103 		movt	r3, 16385
 1182 0066 9042     		cmp	r0, r2
 1183 0068 18BF     		it	ne
 1184 006a 9842     		cmpne	r0, r3
 1185 006c E3D0     		beq	.L167
 1186 006e 4FF4F042 		mov	r2, #30720
 1187 0072 4FF4F843 		mov	r3, #31744
 1188 0076 C4F20002 		movt	r2, 16384
 1189 007a C4F20003 		movt	r3, 16384
 1190 007e 9042     		cmp	r0, r2
 1191 0080 18BF     		it	ne
 1192 0082 9842     		cmpne	r0, r3
 1193 0084 D7D0     		beq	.L167
 1194 0086 40F20000 		movw	r0, #:lower16:.LC0
 1195              	.LVL109:
 1196 008a C0F20000 		movt	r0, #:upper16:.LC0
 1197 008e 40F2F711 		movw	r1, #503
 1198              	.LVL110:
 1199 0092 FFF7FEFF 		bl	assert_failed
 1200              	.LVL111:
 1201 0096 CEE7     		b	.L167
 1202              	.L168:
 506:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 1203              		.loc 1 506 0
 1204 0098 002D     		cmp	r5, #0
 1205 009a D6D1     		bne	.L169
 510:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 511:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 512:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 513:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 514:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 1206              		.loc 1 514 0
 1207 009c A38A     		ldrh	r3, [r4, #20]
 1208 009e 23F40063 		bic	r3, r3, #2048
 1209 00a2 1B04     		lsls	r3, r3, #16
 1210 00a4 1B0C     		lsrs	r3, r3, #16
 1211 00a6 A382     		strh	r3, [r4, #20]	@ movhi
 1212 00a8 38BD     		pop	{r3, r4, r5, pc}
 1213              		.cfi_endproc
 1214              	.LFE131:
 1216 00aa 00BF     		.section	.text.USART_SendData,"ax",%progbits
 1217              		.align	2
 1218              		.global	USART_SendData
 1219              		.thumb
 1220              		.thumb_func
 1222              	USART_SendData:
 1223              	.LFB132:
 515:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 516:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 517:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 518:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 519:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 520:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 521:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 522:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 523:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 524:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 525:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 526:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 527:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                       ##### Data transfers functions #####
 528:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 529:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 530:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART data 
 531:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     transfers.
 532:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 533:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     During an USART reception, data shifts in least significant bit first through 
 534:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 535:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     between the internal bus and the received shift register.
 536:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 537:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     When a transmission is taking place, a write instruction to the USART_DR register 
 538:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     stores the data in the TDR register and which is copied in the shift register 
 539:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     at the end of the current transmission.
 540:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 541:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The read access of the USART_DR register can be done using the USART_ReceiveData()
 542:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 543:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     can be done using USART_SendData() function and stores the written data into 
 544:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     TDR buffer.
 545:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 546:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 547:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 548:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 549:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 550:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 551:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 552:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 553:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 554:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 555:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 556:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 557:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 558:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1224              		.loc 1 558 0
 1225              		.cfi_startproc
 1226              		@ args = 0, pretend = 0, frame = 0
 1227              		@ frame_needed = 0, uses_anonymous_args = 0
 1228              	.LVL112:
 1229 0000 38B5     		push	{r3, r4, r5, lr}
 1230              	.LCFI8:
 1231              		.cfi_def_cfa_offset 16
 1232              		.cfi_offset 3, -16
 1233              		.cfi_offset 4, -12
 1234              		.cfi_offset 5, -8
 1235              		.cfi_offset 14, -4
 559:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 560:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1236              		.loc 1 560 0
 1237 0002 4FF48052 		mov	r2, #4096
 1238 0006 4FF48843 		mov	r3, #17408
 1239 000a C4F20102 		movt	r2, 16385
 1240 000e C4F20003 		movt	r3, 16384
 1241 0012 9042     		cmp	r0, r2
 1242 0014 18BF     		it	ne
 1243 0016 9842     		cmpne	r0, r3
 558:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 1244              		.loc 1 558 0
 1245 0018 0446     		mov	r4, r0
 1246 001a 0D46     		mov	r5, r1
 1247              		.loc 1 560 0
 1248 001c 0BD0     		beq	.L186
 1249              		.loc 1 560 0 is_stmt 0 discriminator 1
 1250 001e 4FF49042 		mov	r2, #18432
 1251 0022 4FF49843 		mov	r3, #19456
 1252 0026 C4F20002 		movt	r2, 16384
 1253 002a C4F20003 		movt	r3, 16384
 1254 002e 9042     		cmp	r0, r2
 1255 0030 18BF     		it	ne
 1256 0032 9842     		cmpne	r0, r3
 1257 0034 0ED1     		bne	.L200
 1258              	.LVL113:
 1259              	.L186:
 561:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 1260              		.loc 1 561 0 is_stmt 1
 1261 0036 B5F5007F 		cmp	r5, #512
 1262 003a 07D3     		bcc	.L187
 1263              		.loc 1 561 0 is_stmt 0 discriminator 1
 1264 003c 40F20000 		movw	r0, #:lower16:.LC0
 1265 0040 C0F20000 		movt	r0, #:upper16:.LC0
 1266 0044 40F23121 		movw	r1, #561
 1267 0048 FFF7FEFF 		bl	assert_failed
 1268              	.LVL114:
 1269              	.L187:
 562:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 563:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Transmit Data */
 564:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 1270              		.loc 1 564 0 is_stmt 1
 1271 004c C5F30805 		ubfx	r5, r5, #0, #9
 1272 0050 A580     		strh	r5, [r4, #4]	@ movhi
 1273 0052 38BD     		pop	{r3, r4, r5, pc}
 1274              	.LVL115:
 1275              	.L200:
 560:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 1276              		.loc 1 560 0 discriminator 1
 1277 0054 4FF4A042 		mov	r2, #20480
 1278 0058 4FF4A053 		mov	r3, #5120
 1279 005c C4F20002 		movt	r2, 16384
 1280 0060 C4F20103 		movt	r3, 16385
 1281 0064 9042     		cmp	r0, r2
 1282 0066 18BF     		it	ne
 1283 0068 9842     		cmpne	r0, r3
 1284 006a E4D0     		beq	.L186
 1285 006c 4FF4F042 		mov	r2, #30720
 1286 0070 4FF4F843 		mov	r3, #31744
 1287 0074 C4F20002 		movt	r2, 16384
 1288 0078 C4F20003 		movt	r3, 16384
 1289 007c 9042     		cmp	r0, r2
 1290 007e 18BF     		it	ne
 1291 0080 9842     		cmpne	r0, r3
 1292 0082 D8D0     		beq	.L186
 1293 0084 40F20000 		movw	r0, #:lower16:.LC0
 1294              	.LVL116:
 1295 0088 C0F20000 		movt	r0, #:upper16:.LC0
 1296 008c 4FF40C71 		mov	r1, #560
 1297              	.LVL117:
 1298 0090 FFF7FEFF 		bl	assert_failed
 1299              	.LVL118:
 1300 0094 CFE7     		b	.L186
 1301              		.cfi_endproc
 1302              	.LFE132:
 1304 0096 00BF     		.section	.text.USART_ReceiveData,"ax",%progbits
 1305              		.align	2
 1306              		.global	USART_ReceiveData
 1307              		.thumb
 1308              		.thumb_func
 1310              	USART_ReceiveData:
 1311              	.LFB133:
 565:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 566:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 567:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 568:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 569:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 570:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 571:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The received data.
 572:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 573:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 574:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1312              		.loc 1 574 0
 1313              		.cfi_startproc
 1314              		@ args = 0, pretend = 0, frame = 0
 1315              		@ frame_needed = 0, uses_anonymous_args = 0
 1316              	.LVL119:
 575:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 576:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1317              		.loc 1 576 0
 1318 0000 4FF48052 		mov	r2, #4096
 1319 0004 4FF48843 		mov	r3, #17408
 1320 0008 C4F20102 		movt	r2, 16385
 1321 000c C4F20003 		movt	r3, 16384
 1322 0010 9042     		cmp	r0, r2
 1323 0012 18BF     		it	ne
 1324 0014 9842     		cmpne	r0, r3
 574:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 1325              		.loc 1 574 0
 1326 0016 10B5     		push	{r4, lr}
 1327              	.LCFI9:
 1328              		.cfi_def_cfa_offset 8
 1329              		.cfi_offset 4, -8
 1330              		.cfi_offset 14, -4
 574:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 1331              		.loc 1 574 0
 1332 0018 0446     		mov	r4, r0
 1333              		.loc 1 576 0
 1334 001a 23D0     		beq	.L202
 1335              		.loc 1 576 0 is_stmt 0 discriminator 1
 1336 001c 4FF49042 		mov	r2, #18432
 1337 0020 4FF49843 		mov	r3, #19456
 1338 0024 C4F20002 		movt	r2, 16384
 1339 0028 C4F20003 		movt	r3, 16384
 1340 002c 9042     		cmp	r0, r2
 1341 002e 18BF     		it	ne
 1342 0030 9842     		cmpne	r0, r3
 1343 0032 17D0     		beq	.L202
 1344 0034 4FF4A042 		mov	r2, #20480
 1345 0038 4FF4A053 		mov	r3, #5120
 1346 003c C4F20002 		movt	r2, 16384
 1347 0040 C4F20103 		movt	r3, 16385
 1348 0044 9042     		cmp	r0, r2
 1349 0046 18BF     		it	ne
 1350 0048 9842     		cmpne	r0, r3
 1351 004a 0BD0     		beq	.L202
 1352 004c 4FF4F042 		mov	r2, #30720
 1353 0050 4FF4F843 		mov	r3, #31744
 1354 0054 C4F20002 		movt	r2, 16384
 1355 0058 C4F20003 		movt	r3, 16384
 1356 005c 9042     		cmp	r0, r2
 1357 005e 18BF     		it	ne
 1358 0060 9842     		cmpne	r0, r3
 1359 0062 03D1     		bne	.L215
 1360              	.LVL120:
 1361              	.L202:
 577:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 578:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Receive Data */
 579:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 1362              		.loc 1 579 0 is_stmt 1
 1363 0064 A088     		ldrh	r0, [r4, #4]
 580:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1364              		.loc 1 580 0
 1365 0066 C0F30800 		ubfx	r0, r0, #0, #9
 1366 006a 10BD     		pop	{r4, pc}
 1367              	.LVL121:
 1368              	.L215:
 576:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 1369              		.loc 1 576 0 discriminator 1
 1370 006c 40F20000 		movw	r0, #:lower16:.LC0
 1371              	.LVL122:
 1372 0070 C0F20000 		movt	r0, #:upper16:.LC0
 1373 0074 4FF41071 		mov	r1, #576
 1374 0078 FFF7FEFF 		bl	assert_failed
 1375              	.LVL123:
 1376 007c F2E7     		b	.L202
 1377              		.cfi_endproc
 1378              	.LFE133:
 1380 007e 00BF     		.section	.text.USART_SetAddress,"ax",%progbits
 1381              		.align	2
 1382              		.global	USART_SetAddress
 1383              		.thumb
 1384              		.thumb_func
 1386              	USART_SetAddress:
 1387              	.LFB134:
 581:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 582:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 583:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 584:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 585:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 586:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 587:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 588:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 589:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 590:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 591:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****               ##### Multi-Processor Communication functions #####
 592:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 593:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 594:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 595:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     multiprocessor communication.
 596:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 597:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     For instance one of the USARTs can be the master, its TX output is connected 
 598:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     to the RX input of the other USART. The others are slaves, their respective 
 599:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     TX outputs are logically ANDed together and connected to the RX input of the 
 600:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     master.
 601:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 602:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USART multiprocessor communication is possible through the following procedure:
 603:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode 
 604:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           transmitter or Mode receiver and hardware flow control values using 
 605:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the USART_Init() function.
 606:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the USART address using the USART_SetAddress() function.
 607:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 608:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           using USART_WakeUpConfig() function only for the slaves.
 609:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 610:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 611:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 612:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The USART Slave exit from mute mode when receive the wake up condition.
 613:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 614:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 615:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 616:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 617:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 618:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 619:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 620:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 621:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 622:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 623:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 624:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 625:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 626:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1388              		.loc 1 626 0
 1389              		.cfi_startproc
 1390              		@ args = 0, pretend = 0, frame = 0
 1391              		@ frame_needed = 0, uses_anonymous_args = 0
 1392              	.LVL124:
 1393 0000 38B5     		push	{r3, r4, r5, lr}
 1394              	.LCFI10:
 1395              		.cfi_def_cfa_offset 16
 1396              		.cfi_offset 3, -16
 1397              		.cfi_offset 4, -12
 1398              		.cfi_offset 5, -8
 1399              		.cfi_offset 14, -4
 627:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 628:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1400              		.loc 1 628 0
 1401 0002 4FF48052 		mov	r2, #4096
 1402 0006 4FF48843 		mov	r3, #17408
 1403 000a C4F20102 		movt	r2, 16385
 1404 000e C4F20003 		movt	r3, 16384
 1405 0012 9042     		cmp	r0, r2
 1406 0014 18BF     		it	ne
 1407 0016 9842     		cmpne	r0, r3
 626:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 1408              		.loc 1 626 0
 1409 0018 0446     		mov	r4, r0
 1410 001a 0D46     		mov	r5, r1
 1411              		.loc 1 628 0
 1412 001c 0BD0     		beq	.L217
 1413              		.loc 1 628 0 is_stmt 0 discriminator 1
 1414 001e 4FF49042 		mov	r2, #18432
 1415 0022 4FF49843 		mov	r3, #19456
 1416 0026 C4F20002 		movt	r2, 16384
 1417 002a C4F20003 		movt	r3, 16384
 1418 002e 9042     		cmp	r0, r2
 1419 0030 18BF     		it	ne
 1420 0032 9842     		cmpne	r0, r3
 1421 0034 14D1     		bne	.L231
 1422              	.LVL125:
 1423              	.L217:
 629:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 1424              		.loc 1 629 0 is_stmt 1
 1425 0036 0F2D     		cmp	r5, #15
 1426 0038 07D9     		bls	.L218
 1427              		.loc 1 629 0 is_stmt 0 discriminator 1
 1428 003a 40F20000 		movw	r0, #:lower16:.LC0
 1429 003e C0F20000 		movt	r0, #:upper16:.LC0
 1430 0042 40F27521 		movw	r1, #629
 1431 0046 FFF7FEFF 		bl	assert_failed
 1432              	.LVL126:
 1433              	.L218:
 630:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 631:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART address */
 632:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 1434              		.loc 1 632 0 is_stmt 1
 1435 004a 238A     		ldrh	r3, [r4, #16]
 1436 004c 23F00F03 		bic	r3, r3, #15
 1437 0050 1B04     		lsls	r3, r3, #16
 1438 0052 1B0C     		lsrs	r3, r3, #16
 1439 0054 2382     		strh	r3, [r4, #16]	@ movhi
 633:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART address node */
 634:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
 1440              		.loc 1 634 0
 1441 0056 238A     		ldrh	r3, [r4, #16]
 1442 0058 9BB2     		uxth	r3, r3
 1443 005a 1D43     		orrs	r5, r5, r3
 1444 005c 2582     		strh	r5, [r4, #16]	@ movhi
 1445 005e 38BD     		pop	{r3, r4, r5, pc}
 1446              	.LVL127:
 1447              	.L231:
 628:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 1448              		.loc 1 628 0 discriminator 1
 1449 0060 4FF4A042 		mov	r2, #20480
 1450 0064 4FF4A053 		mov	r3, #5120
 1451 0068 C4F20002 		movt	r2, 16384
 1452 006c C4F20103 		movt	r3, 16385
 1453 0070 9042     		cmp	r0, r2
 1454 0072 18BF     		it	ne
 1455 0074 9842     		cmpne	r0, r3
 1456 0076 DED0     		beq	.L217
 1457 0078 4FF4F042 		mov	r2, #30720
 1458 007c 4FF4F843 		mov	r3, #31744
 1459 0080 C4F20002 		movt	r2, 16384
 1460 0084 C4F20003 		movt	r3, 16384
 1461 0088 9042     		cmp	r0, r2
 1462 008a 18BF     		it	ne
 1463 008c 9842     		cmpne	r0, r3
 1464 008e D2D0     		beq	.L217
 1465 0090 40F20000 		movw	r0, #:lower16:.LC0
 1466              	.LVL128:
 1467 0094 C0F20000 		movt	r0, #:upper16:.LC0
 1468 0098 4FF41D71 		mov	r1, #628
 1469              	.LVL129:
 1470 009c FFF7FEFF 		bl	assert_failed
 1471              	.LVL130:
 1472 00a0 C9E7     		b	.L217
 1473              		.cfi_endproc
 1474              	.LFE134:
 1476 00a2 00BF     		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 1477              		.align	2
 1478              		.global	USART_ReceiverWakeUpCmd
 1479              		.thumb
 1480              		.thumb_func
 1482              	USART_ReceiverWakeUpCmd:
 1483              	.LFB135:
 635:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 636:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 637:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 638:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 639:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 640:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 641:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 642:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 643:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 644:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 645:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 646:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1484              		.loc 1 646 0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 0
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 1488              	.LVL131:
 1489 0000 38B5     		push	{r3, r4, r5, lr}
 1490              	.LCFI11:
 1491              		.cfi_def_cfa_offset 16
 1492              		.cfi_offset 3, -16
 1493              		.cfi_offset 4, -12
 1494              		.cfi_offset 5, -8
 1495              		.cfi_offset 14, -4
 647:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 648:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1496              		.loc 1 648 0
 1497 0002 4FF48052 		mov	r2, #4096
 1498 0006 4FF48843 		mov	r3, #17408
 1499 000a C4F20102 		movt	r2, 16385
 1500 000e C4F20003 		movt	r3, 16384
 1501 0012 9042     		cmp	r0, r2
 1502 0014 18BF     		it	ne
 1503 0016 9842     		cmpne	r0, r3
 646:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 1504              		.loc 1 646 0
 1505 0018 0446     		mov	r4, r0
 1506 001a 0D46     		mov	r5, r1
 1507              		.loc 1 648 0
 1508 001c 0BD0     		beq	.L233
 1509              		.loc 1 648 0 is_stmt 0 discriminator 1
 1510 001e 4FF49042 		mov	r2, #18432
 1511 0022 4FF49843 		mov	r3, #19456
 1512 0026 C4F20002 		movt	r2, 16384
 1513 002a C4F20003 		movt	r3, 16384
 1514 002e 9042     		cmp	r0, r2
 1515 0030 18BF     		it	ne
 1516 0032 9842     		cmpne	r0, r3
 1517 0034 0FD1     		bne	.L250
 1518              	.LVL132:
 1519              	.L233:
 649:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 1520              		.loc 1 649 0 is_stmt 1
 1521 0036 012D     		cmp	r5, #1
 1522 0038 2ED9     		bls	.L234
 1523              		.loc 1 649 0 is_stmt 0 discriminator 1
 1524 003a 40F20000 		movw	r0, #:lower16:.LC0
 1525 003e C0F20000 		movt	r0, #:upper16:.LC0
 1526 0042 40F28921 		movw	r1, #649
 1527 0046 FFF7FEFF 		bl	assert_failed
 1528              	.LVL133:
 1529              	.L235:
 650:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 651:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 652:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 653:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 654:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 1530              		.loc 1 654 0 is_stmt 1
 1531 004a A389     		ldrh	r3, [r4, #12]
 1532 004c 9BB2     		uxth	r3, r3
 1533 004e 43F00203 		orr	r3, r3, #2
 1534 0052 A381     		strh	r3, [r4, #12]	@ movhi
 1535 0054 38BD     		pop	{r3, r4, r5, pc}
 1536              	.LVL134:
 1537              	.L250:
 648:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 1538              		.loc 1 648 0 discriminator 1
 1539 0056 4FF4A042 		mov	r2, #20480
 1540 005a 4FF4A053 		mov	r3, #5120
 1541 005e C4F20002 		movt	r2, 16384
 1542 0062 C4F20103 		movt	r3, 16385
 1543 0066 9042     		cmp	r0, r2
 1544 0068 18BF     		it	ne
 1545 006a 9842     		cmpne	r0, r3
 1546 006c E3D0     		beq	.L233
 1547 006e 4FF4F042 		mov	r2, #30720
 1548 0072 4FF4F843 		mov	r3, #31744
 1549 0076 C4F20002 		movt	r2, 16384
 1550 007a C4F20003 		movt	r3, 16384
 1551 007e 9042     		cmp	r0, r2
 1552 0080 18BF     		it	ne
 1553 0082 9842     		cmpne	r0, r3
 1554 0084 D7D0     		beq	.L233
 1555 0086 40F20000 		movw	r0, #:lower16:.LC0
 1556              	.LVL135:
 1557 008a C0F20000 		movt	r0, #:upper16:.LC0
 1558 008e 4FF42271 		mov	r1, #648
 1559              	.LVL136:
 1560 0092 FFF7FEFF 		bl	assert_failed
 1561              	.LVL137:
 1562 0096 CEE7     		b	.L233
 1563              	.L234:
 651:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 1564              		.loc 1 651 0
 1565 0098 002D     		cmp	r5, #0
 1566 009a D6D1     		bne	.L235
 655:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 656:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 657:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 658:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 659:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 1567              		.loc 1 659 0
 1568 009c A389     		ldrh	r3, [r4, #12]
 1569 009e 23F00203 		bic	r3, r3, #2
 1570 00a2 1B04     		lsls	r3, r3, #16
 1571 00a4 1B0C     		lsrs	r3, r3, #16
 1572 00a6 A381     		strh	r3, [r4, #12]	@ movhi
 1573 00a8 38BD     		pop	{r3, r4, r5, pc}
 1574              		.cfi_endproc
 1575              	.LFE135:
 1577 00aa 00BF     		.section	.text.USART_WakeUpConfig,"ax",%progbits
 1578              		.align	2
 1579              		.global	USART_WakeUpConfig
 1580              		.thumb
 1581              		.thumb_func
 1583              	USART_WakeUpConfig:
 1584              	.LFB136:
 660:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 661:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 662:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 663:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 664:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 665:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 666:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 667:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 668:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 669:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 670:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 671:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 672:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 673:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1585              		.loc 1 673 0
 1586              		.cfi_startproc
 1587              		@ args = 0, pretend = 0, frame = 0
 1588              		@ frame_needed = 0, uses_anonymous_args = 0
 1589              	.LVL138:
 1590 0000 38B5     		push	{r3, r4, r5, lr}
 1591              	.LCFI12:
 1592              		.cfi_def_cfa_offset 16
 1593              		.cfi_offset 3, -16
 1594              		.cfi_offset 4, -12
 1595              		.cfi_offset 5, -8
 1596              		.cfi_offset 14, -4
 674:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 675:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1597              		.loc 1 675 0
 1598 0002 4FF48052 		mov	r2, #4096
 1599 0006 4FF48843 		mov	r3, #17408
 1600 000a C4F20102 		movt	r2, 16385
 1601 000e C4F20003 		movt	r3, 16384
 1602 0012 9042     		cmp	r0, r2
 1603 0014 18BF     		it	ne
 1604 0016 9842     		cmpne	r0, r3
 673:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 1605              		.loc 1 673 0
 1606 0018 0446     		mov	r4, r0
 1607 001a 0D46     		mov	r5, r1
 1608              		.loc 1 675 0
 1609 001c 0BD0     		beq	.L252
 1610              		.loc 1 675 0 is_stmt 0 discriminator 1
 1611 001e 4FF49042 		mov	r2, #18432
 1612 0022 4FF49843 		mov	r3, #19456
 1613 0026 C4F20002 		movt	r2, 16384
 1614 002a C4F20003 		movt	r3, 16384
 1615 002e 9042     		cmp	r0, r2
 1616 0030 18BF     		it	ne
 1617 0032 9842     		cmpne	r0, r3
 1618 0034 16D1     		bne	.L269
 1619              	.LVL139:
 1620              	.L252:
 676:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 1621              		.loc 1 676 0 is_stmt 1
 1622 0036 4FF2FF73 		movw	r3, #63487
 1623 003a 2B40     		ands	r3, r3, r5
 1624 003c 3BB1     		cbz	r3, .L253
 1625              		.loc 1 676 0 is_stmt 0 discriminator 1
 1626 003e 40F20000 		movw	r0, #:lower16:.LC0
 1627 0042 C0F20000 		movt	r0, #:upper16:.LC0
 1628 0046 4FF42971 		mov	r1, #676
 1629 004a FFF7FEFF 		bl	assert_failed
 1630              	.LVL140:
 1631              	.L253:
 677:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 678:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 1632              		.loc 1 678 0 is_stmt 1
 1633 004e A389     		ldrh	r3, [r4, #12]
 1634 0050 23F40063 		bic	r3, r3, #2048
 1635 0054 1B04     		lsls	r3, r3, #16
 1636 0056 1B0C     		lsrs	r3, r3, #16
 1637 0058 A381     		strh	r3, [r4, #12]	@ movhi
 679:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 1638              		.loc 1 679 0
 1639 005a A389     		ldrh	r3, [r4, #12]
 1640 005c 9BB2     		uxth	r3, r3
 1641 005e 1D43     		orrs	r5, r5, r3
 1642 0060 A581     		strh	r5, [r4, #12]	@ movhi
 1643 0062 38BD     		pop	{r3, r4, r5, pc}
 1644              	.LVL141:
 1645              	.L269:
 675:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 1646              		.loc 1 675 0 discriminator 1
 1647 0064 4FF4A042 		mov	r2, #20480
 1648 0068 4FF4A053 		mov	r3, #5120
 1649 006c C4F20002 		movt	r2, 16384
 1650 0070 C4F20103 		movt	r3, 16385
 1651 0074 9042     		cmp	r0, r2
 1652 0076 18BF     		it	ne
 1653 0078 9842     		cmpne	r0, r3
 1654 007a DCD0     		beq	.L252
 1655 007c 4FF4F042 		mov	r2, #30720
 1656 0080 4FF4F843 		mov	r3, #31744
 1657 0084 C4F20002 		movt	r2, 16384
 1658 0088 C4F20003 		movt	r3, 16384
 1659 008c 9042     		cmp	r0, r2
 1660 008e 18BF     		it	ne
 1661 0090 9842     		cmpne	r0, r3
 1662 0092 D0D0     		beq	.L252
 1663 0094 40F20000 		movw	r0, #:lower16:.LC0
 1664              	.LVL142:
 1665 0098 C0F20000 		movt	r0, #:upper16:.LC0
 1666 009c 40F2A321 		movw	r1, #675
 1667              	.LVL143:
 1668 00a0 FFF7FEFF 		bl	assert_failed
 1669              	.LVL144:
 1670 00a4 C7E7     		b	.L252
 1671              		.cfi_endproc
 1672              	.LFE136:
 1674 00a6 00BF     		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 1675              		.align	2
 1676              		.global	USART_LINBreakDetectLengthConfig
 1677              		.thumb
 1678              		.thumb_func
 1680              	USART_LINBreakDetectLengthConfig:
 1681              	.LFB137:
 680:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 681:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 682:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 683:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 684:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 685:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 686:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 687:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 688:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 689:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 690:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 691:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         ##### LIN mode functions #####
 692:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 693:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 694:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART LIN 
 695:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Mode communication.
 696:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 697:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 698:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     the LIN standard.
 699:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 700:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Only this LIN Feature is supported by the USART IP:
 701:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) LIN Master Synchronous Break send capability and LIN slave break detection
 702:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           capability :  13-bit break generation and 10/11 bit break detection
 703:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 704:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 705:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USART LIN Master transmitter communication is possible through the following 
 706:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     procedure:
 707:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 708:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 709:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 710:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 711:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the LIN mode using the USART_LINCmd() function.
 712:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Send the break character using USART_SendBreak() function.
 713:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 714:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USART LIN Master receiver communication is possible through the following procedure:
 715:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 716:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           Mode transmitter or Mode receiver and hardware flow control values using 
 717:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the USART_Init() function.
 718:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 719:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 720:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           function.
 721:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the LIN mode using the USART_LINCmd() function.
 722:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 723:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- In LIN mode, the following bits must be kept cleared:
 724:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        (+@) CLKEN in the USART_CR2 register,
 725:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        (+@) STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 726:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 727:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 728:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 729:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 730:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 731:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 732:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 733:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 734:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 735:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 736:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 737:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 738:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 739:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 740:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 741:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 742:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1682              		.loc 1 742 0
 1683              		.cfi_startproc
 1684              		@ args = 0, pretend = 0, frame = 0
 1685              		@ frame_needed = 0, uses_anonymous_args = 0
 1686              	.LVL145:
 1687 0000 38B5     		push	{r3, r4, r5, lr}
 1688              	.LCFI13:
 1689              		.cfi_def_cfa_offset 16
 1690              		.cfi_offset 3, -16
 1691              		.cfi_offset 4, -12
 1692              		.cfi_offset 5, -8
 1693              		.cfi_offset 14, -4
 743:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 744:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1694              		.loc 1 744 0
 1695 0002 4FF48052 		mov	r2, #4096
 1696 0006 4FF48843 		mov	r3, #17408
 1697 000a C4F20102 		movt	r2, 16385
 1698 000e C4F20003 		movt	r3, 16384
 1699 0012 9042     		cmp	r0, r2
 1700 0014 18BF     		it	ne
 1701 0016 9842     		cmpne	r0, r3
 742:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 1702              		.loc 1 742 0
 1703 0018 0446     		mov	r4, r0
 1704 001a 0D46     		mov	r5, r1
 1705              		.loc 1 744 0
 1706 001c 0BD0     		beq	.L271
 1707              		.loc 1 744 0 is_stmt 0 discriminator 1
 1708 001e 4FF49042 		mov	r2, #18432
 1709 0022 4FF49843 		mov	r3, #19456
 1710 0026 C4F20002 		movt	r2, 16384
 1711 002a C4F20003 		movt	r3, 16384
 1712 002e 9042     		cmp	r0, r2
 1713 0030 18BF     		it	ne
 1714 0032 9842     		cmpne	r0, r3
 1715 0034 16D1     		bne	.L288
 1716              	.LVL146:
 1717              	.L271:
 745:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 1718              		.loc 1 745 0 is_stmt 1
 1719 0036 4FF6DF73 		movw	r3, #65503
 1720 003a 2B40     		ands	r3, r3, r5
 1721 003c 3BB1     		cbz	r3, .L272
 1722              		.loc 1 745 0 is_stmt 0 discriminator 1
 1723 003e 40F20000 		movw	r0, #:lower16:.LC0
 1724 0042 C0F20000 		movt	r0, #:upper16:.LC0
 1725 0046 40F2E921 		movw	r1, #745
 1726 004a FFF7FEFF 		bl	assert_failed
 1727              	.LVL147:
 1728              	.L272:
 746:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 747:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 1729              		.loc 1 747 0 is_stmt 1
 1730 004e 238A     		ldrh	r3, [r4, #16]
 1731 0050 23F02003 		bic	r3, r3, #32
 1732 0054 1B04     		lsls	r3, r3, #16
 1733 0056 1B0C     		lsrs	r3, r3, #16
 1734 0058 2382     		strh	r3, [r4, #16]	@ movhi
 748:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 1735              		.loc 1 748 0
 1736 005a 238A     		ldrh	r3, [r4, #16]
 1737 005c 9BB2     		uxth	r3, r3
 1738 005e 1D43     		orrs	r5, r5, r3
 1739 0060 2582     		strh	r5, [r4, #16]	@ movhi
 1740 0062 38BD     		pop	{r3, r4, r5, pc}
 1741              	.LVL148:
 1742              	.L288:
 744:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 1743              		.loc 1 744 0 discriminator 1
 1744 0064 4FF4A042 		mov	r2, #20480
 1745 0068 4FF4A053 		mov	r3, #5120
 1746 006c C4F20002 		movt	r2, 16384
 1747 0070 C4F20103 		movt	r3, 16385
 1748 0074 9042     		cmp	r0, r2
 1749 0076 18BF     		it	ne
 1750 0078 9842     		cmpne	r0, r3
 1751 007a DCD0     		beq	.L271
 1752 007c 4FF4F042 		mov	r2, #30720
 1753 0080 4FF4F843 		mov	r3, #31744
 1754 0084 C4F20002 		movt	r2, 16384
 1755 0088 C4F20003 		movt	r3, 16384
 1756 008c 9042     		cmp	r0, r2
 1757 008e 18BF     		it	ne
 1758 0090 9842     		cmpne	r0, r3
 1759 0092 D0D0     		beq	.L271
 1760 0094 40F20000 		movw	r0, #:lower16:.LC0
 1761              	.LVL149:
 1762 0098 C0F20000 		movt	r0, #:upper16:.LC0
 1763 009c 4FF43A71 		mov	r1, #744
 1764              	.LVL150:
 1765 00a0 FFF7FEFF 		bl	assert_failed
 1766              	.LVL151:
 1767 00a4 C7E7     		b	.L271
 1768              		.cfi_endproc
 1769              	.LFE137:
 1771 00a6 00BF     		.section	.text.USART_LINCmd,"ax",%progbits
 1772              		.align	2
 1773              		.global	USART_LINCmd
 1774              		.thumb
 1775              		.thumb_func
 1777              	USART_LINCmd:
 1778              	.LFB138:
 749:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 750:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 751:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 752:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 753:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 754:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 755:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 756:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 757:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 758:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 759:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 760:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1779              		.loc 1 760 0
 1780              		.cfi_startproc
 1781              		@ args = 0, pretend = 0, frame = 0
 1782              		@ frame_needed = 0, uses_anonymous_args = 0
 1783              	.LVL152:
 1784 0000 38B5     		push	{r3, r4, r5, lr}
 1785              	.LCFI14:
 1786              		.cfi_def_cfa_offset 16
 1787              		.cfi_offset 3, -16
 1788              		.cfi_offset 4, -12
 1789              		.cfi_offset 5, -8
 1790              		.cfi_offset 14, -4
 761:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 762:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1791              		.loc 1 762 0
 1792 0002 4FF48052 		mov	r2, #4096
 1793 0006 4FF48843 		mov	r3, #17408
 1794 000a C4F20102 		movt	r2, 16385
 1795 000e C4F20003 		movt	r3, 16384
 1796 0012 9042     		cmp	r0, r2
 1797 0014 18BF     		it	ne
 1798 0016 9842     		cmpne	r0, r3
 760:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 1799              		.loc 1 760 0
 1800 0018 0446     		mov	r4, r0
 1801 001a 0D46     		mov	r5, r1
 1802              		.loc 1 762 0
 1803 001c 0BD0     		beq	.L290
 1804              		.loc 1 762 0 is_stmt 0 discriminator 1
 1805 001e 4FF49042 		mov	r2, #18432
 1806 0022 4FF49843 		mov	r3, #19456
 1807 0026 C4F20002 		movt	r2, 16384
 1808 002a C4F20003 		movt	r3, 16384
 1809 002e 9042     		cmp	r0, r2
 1810 0030 18BF     		it	ne
 1811 0032 9842     		cmpne	r0, r3
 1812 0034 0FD1     		bne	.L307
 1813              	.LVL153:
 1814              	.L290:
 763:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1815              		.loc 1 763 0 is_stmt 1
 1816 0036 012D     		cmp	r5, #1
 1817 0038 2ED9     		bls	.L291
 1818              		.loc 1 763 0 is_stmt 0 discriminator 1
 1819 003a 40F20000 		movw	r0, #:lower16:.LC0
 1820 003e C0F20000 		movt	r0, #:upper16:.LC0
 1821 0042 40F2FB21 		movw	r1, #763
 1822 0046 FFF7FEFF 		bl	assert_failed
 1823              	.LVL154:
 1824              	.L292:
 764:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 765:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 766:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 767:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 768:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 1825              		.loc 1 768 0 is_stmt 1
 1826 004a 238A     		ldrh	r3, [r4, #16]
 1827 004c 9BB2     		uxth	r3, r3
 1828 004e 43F48043 		orr	r3, r3, #16384
 1829 0052 2382     		strh	r3, [r4, #16]	@ movhi
 1830 0054 38BD     		pop	{r3, r4, r5, pc}
 1831              	.LVL155:
 1832              	.L307:
 762:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1833              		.loc 1 762 0 discriminator 1
 1834 0056 4FF4A042 		mov	r2, #20480
 1835 005a 4FF4A053 		mov	r3, #5120
 1836 005e C4F20002 		movt	r2, 16384
 1837 0062 C4F20103 		movt	r3, 16385
 1838 0066 9042     		cmp	r0, r2
 1839 0068 18BF     		it	ne
 1840 006a 9842     		cmpne	r0, r3
 1841 006c E3D0     		beq	.L290
 1842 006e 4FF4F042 		mov	r2, #30720
 1843 0072 4FF4F843 		mov	r3, #31744
 1844 0076 C4F20002 		movt	r2, 16384
 1845 007a C4F20003 		movt	r3, 16384
 1846 007e 9042     		cmp	r0, r2
 1847 0080 18BF     		it	ne
 1848 0082 9842     		cmpne	r0, r3
 1849 0084 D7D0     		beq	.L290
 1850 0086 40F20000 		movw	r0, #:lower16:.LC0
 1851              	.LVL156:
 1852 008a C0F20000 		movt	r0, #:upper16:.LC0
 1853 008e 40F2FA21 		movw	r1, #762
 1854              	.LVL157:
 1855 0092 FFF7FEFF 		bl	assert_failed
 1856              	.LVL158:
 1857 0096 CEE7     		b	.L290
 1858              	.L291:
 765:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 1859              		.loc 1 765 0
 1860 0098 002D     		cmp	r5, #0
 1861 009a D6D1     		bne	.L292
 769:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 770:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 771:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 772:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 773:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 1862              		.loc 1 773 0
 1863 009c 238A     		ldrh	r3, [r4, #16]
 1864 009e 23F48043 		bic	r3, r3, #16384
 1865 00a2 1B04     		lsls	r3, r3, #16
 1866 00a4 1B0C     		lsrs	r3, r3, #16
 1867 00a6 2382     		strh	r3, [r4, #16]	@ movhi
 1868 00a8 38BD     		pop	{r3, r4, r5, pc}
 1869              		.cfi_endproc
 1870              	.LFE138:
 1872 00aa 00BF     		.section	.text.USART_SendBreak,"ax",%progbits
 1873              		.align	2
 1874              		.global	USART_SendBreak
 1875              		.thumb
 1876              		.thumb_func
 1878              	USART_SendBreak:
 1879              	.LFB139:
 774:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 775:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 776:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 777:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 778:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 779:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 780:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 781:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 782:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 783:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 784:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1880              		.loc 1 784 0
 1881              		.cfi_startproc
 1882              		@ args = 0, pretend = 0, frame = 0
 1883              		@ frame_needed = 0, uses_anonymous_args = 0
 1884              	.LVL159:
 785:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 786:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1885              		.loc 1 786 0
 1886 0000 4FF48052 		mov	r2, #4096
 1887 0004 4FF48843 		mov	r3, #17408
 1888 0008 C4F20102 		movt	r2, 16385
 1889 000c C4F20003 		movt	r3, 16384
 1890 0010 9042     		cmp	r0, r2
 1891 0012 18BF     		it	ne
 1892 0014 9842     		cmpne	r0, r3
 784:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 1893              		.loc 1 784 0
 1894 0016 10B5     		push	{r4, lr}
 1895              	.LCFI15:
 1896              		.cfi_def_cfa_offset 8
 1897              		.cfi_offset 4, -8
 1898              		.cfi_offset 14, -4
 784:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 1899              		.loc 1 784 0
 1900 0018 0446     		mov	r4, r0
 1901              		.loc 1 786 0
 1902 001a 23D0     		beq	.L309
 1903              		.loc 1 786 0 is_stmt 0 discriminator 1
 1904 001c 4FF49042 		mov	r2, #18432
 1905 0020 4FF49843 		mov	r3, #19456
 1906 0024 C4F20002 		movt	r2, 16384
 1907 0028 C4F20003 		movt	r3, 16384
 1908 002c 9042     		cmp	r0, r2
 1909 002e 18BF     		it	ne
 1910 0030 9842     		cmpne	r0, r3
 1911 0032 17D0     		beq	.L309
 1912 0034 4FF4A042 		mov	r2, #20480
 1913 0038 4FF4A053 		mov	r3, #5120
 1914 003c C4F20002 		movt	r2, 16384
 1915 0040 C4F20103 		movt	r3, 16385
 1916 0044 9042     		cmp	r0, r2
 1917 0046 18BF     		it	ne
 1918 0048 9842     		cmpne	r0, r3
 1919 004a 0BD0     		beq	.L309
 1920 004c 4FF4F042 		mov	r2, #30720
 1921 0050 4FF4F843 		mov	r3, #31744
 1922 0054 C4F20002 		movt	r2, 16384
 1923 0058 C4F20003 		movt	r3, 16384
 1924 005c 9042     		cmp	r0, r2
 1925 005e 18BF     		it	ne
 1926 0060 9842     		cmpne	r0, r3
 1927 0062 05D1     		bne	.L322
 1928              	.LVL160:
 1929              	.L309:
 787:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 788:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Send break characters */
 789:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 1930              		.loc 1 789 0 is_stmt 1
 1931 0064 A389     		ldrh	r3, [r4, #12]
 1932 0066 9BB2     		uxth	r3, r3
 1933 0068 43F00103 		orr	r3, r3, #1
 1934 006c A381     		strh	r3, [r4, #12]	@ movhi
 1935 006e 10BD     		pop	{r4, pc}
 1936              	.LVL161:
 1937              	.L322:
 786:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 1938              		.loc 1 786 0 discriminator 1
 1939 0070 40F20000 		movw	r0, #:lower16:.LC0
 1940              	.LVL162:
 1941 0074 C0F20000 		movt	r0, #:upper16:.LC0
 1942 0078 40F21231 		movw	r1, #786
 1943 007c FFF7FEFF 		bl	assert_failed
 1944              	.LVL163:
 1945 0080 F0E7     		b	.L309
 1946              		.cfi_endproc
 1947              	.LFE139:
 1949 0082 00BF     		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 1950              		.align	2
 1951              		.global	USART_HalfDuplexCmd
 1952              		.thumb
 1953              		.thumb_func
 1955              	USART_HalfDuplexCmd:
 1956              	.LFB140:
 790:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 791:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 792:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 793:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 794:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 795:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 796:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 797:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 798:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 799:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 800:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 801:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                     ##### Half-duplex mode function #####
 802:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 803:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 804:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 805:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Half-duplex communication.
 806:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 807:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The USART can be configured to follow a single-wire half-duplex protocol where 
 808:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     the TX and RX lines are internally connected.
 809:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 810:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USART Half duplex communication is possible through the following procedure:
 811:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 812:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           or Mode receiver and hardware flow control values using the USART_Init()
 813:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           function.
 814:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the USART address using the USART_SetAddress() function.
 815:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 816:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the half duplex mode using USART_HalfDuplexCmd() function.
 817:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 818:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 819:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     -@- The RX pin is no longer used
 820:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     -@- In Half-duplex mode the following bits must be kept cleared:
 821:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+@) LINEN and CLKEN bits in the USART_CR2 register.
 822:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+@) SCEN and IREN bits in the USART_CR3 register.
 823:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 824:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 825:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 826:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 827:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 828:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 829:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 830:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 831:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 832:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 833:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 834:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 835:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 836:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 837:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1957              		.loc 1 837 0
 1958              		.cfi_startproc
 1959              		@ args = 0, pretend = 0, frame = 0
 1960              		@ frame_needed = 0, uses_anonymous_args = 0
 1961              	.LVL164:
 1962 0000 38B5     		push	{r3, r4, r5, lr}
 1963              	.LCFI16:
 1964              		.cfi_def_cfa_offset 16
 1965              		.cfi_offset 3, -16
 1966              		.cfi_offset 4, -12
 1967              		.cfi_offset 5, -8
 1968              		.cfi_offset 14, -4
 838:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 839:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1969              		.loc 1 839 0
 1970 0002 4FF48052 		mov	r2, #4096
 1971 0006 4FF48843 		mov	r3, #17408
 1972 000a C4F20102 		movt	r2, 16385
 1973 000e C4F20003 		movt	r3, 16384
 1974 0012 9042     		cmp	r0, r2
 1975 0014 18BF     		it	ne
 1976 0016 9842     		cmpne	r0, r3
 837:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 1977              		.loc 1 837 0
 1978 0018 0446     		mov	r4, r0
 1979 001a 0D46     		mov	r5, r1
 1980              		.loc 1 839 0
 1981 001c 0BD0     		beq	.L324
 1982              		.loc 1 839 0 is_stmt 0 discriminator 1
 1983 001e 4FF49042 		mov	r2, #18432
 1984 0022 4FF49843 		mov	r3, #19456
 1985 0026 C4F20002 		movt	r2, 16384
 1986 002a C4F20003 		movt	r3, 16384
 1987 002e 9042     		cmp	r0, r2
 1988 0030 18BF     		it	ne
 1989 0032 9842     		cmpne	r0, r3
 1990 0034 0FD1     		bne	.L341
 1991              	.LVL165:
 1992              	.L324:
 840:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1993              		.loc 1 840 0 is_stmt 1
 1994 0036 012D     		cmp	r5, #1
 1995 0038 2ED9     		bls	.L325
 1996              		.loc 1 840 0 is_stmt 0 discriminator 1
 1997 003a 40F20000 		movw	r0, #:lower16:.LC0
 1998 003e C0F20000 		movt	r0, #:upper16:.LC0
 1999 0042 4FF45271 		mov	r1, #840
 2000 0046 FFF7FEFF 		bl	assert_failed
 2001              	.LVL166:
 2002              	.L326:
 841:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 842:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 843:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 844:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 845:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 2003              		.loc 1 845 0 is_stmt 1
 2004 004a A38A     		ldrh	r3, [r4, #20]
 2005 004c 9BB2     		uxth	r3, r3
 2006 004e 43F00803 		orr	r3, r3, #8
 2007 0052 A382     		strh	r3, [r4, #20]	@ movhi
 2008 0054 38BD     		pop	{r3, r4, r5, pc}
 2009              	.LVL167:
 2010              	.L341:
 839:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2011              		.loc 1 839 0 discriminator 1
 2012 0056 4FF4A042 		mov	r2, #20480
 2013 005a 4FF4A053 		mov	r3, #5120
 2014 005e C4F20002 		movt	r2, 16384
 2015 0062 C4F20103 		movt	r3, 16385
 2016 0066 9042     		cmp	r0, r2
 2017 0068 18BF     		it	ne
 2018 006a 9842     		cmpne	r0, r3
 2019 006c E3D0     		beq	.L324
 2020 006e 4FF4F042 		mov	r2, #30720
 2021 0072 4FF4F843 		mov	r3, #31744
 2022 0076 C4F20002 		movt	r2, 16384
 2023 007a C4F20003 		movt	r3, 16384
 2024 007e 9042     		cmp	r0, r2
 2025 0080 18BF     		it	ne
 2026 0082 9842     		cmpne	r0, r3
 2027 0084 D7D0     		beq	.L324
 2028 0086 40F20000 		movw	r0, #:lower16:.LC0
 2029              	.LVL168:
 2030 008a C0F20000 		movt	r0, #:upper16:.LC0
 2031 008e 40F24731 		movw	r1, #839
 2032              	.LVL169:
 2033 0092 FFF7FEFF 		bl	assert_failed
 2034              	.LVL170:
 2035 0096 CEE7     		b	.L324
 2036              	.L325:
 842:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 2037              		.loc 1 842 0
 2038 0098 002D     		cmp	r5, #0
 2039 009a D6D1     		bne	.L326
 846:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 847:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 848:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 849:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 850:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 2040              		.loc 1 850 0
 2041 009c A38A     		ldrh	r3, [r4, #20]
 2042 009e 23F00803 		bic	r3, r3, #8
 2043 00a2 1B04     		lsls	r3, r3, #16
 2044 00a4 1B0C     		lsrs	r3, r3, #16
 2045 00a6 A382     		strh	r3, [r4, #20]	@ movhi
 2046 00a8 38BD     		pop	{r3, r4, r5, pc}
 2047              		.cfi_endproc
 2048              	.LFE140:
 2050 00aa 00BF     		.section	.text.USART_SetGuardTime,"ax",%progbits
 2051              		.align	2
 2052              		.global	USART_SetGuardTime
 2053              		.thumb
 2054              		.thumb_func
 2056              	USART_SetGuardTime:
 2057              	.LFB141:
 851:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 852:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 853:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 854:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 855:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 856:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 857:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 858:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 859:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 860:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 861:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 862:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 863:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 864:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                               ##### Smartcard mode functions #####
 865:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 866:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 867:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 868:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Smartcard communication.
 869:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 870:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The Smartcard interface is designed to support asynchronous protocol Smartcards as
 871:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     defined in the ISO 7816-3 standard.
 872:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 873:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The USART can provide a clock to the smartcard through the SCLK output.
 874:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In smartcard mode, SCLK is not associated to the communication but is simply derived 
 875:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     from the internal peripheral input clock through a 5-bit prescaler.
 876:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 877:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Smartcard communication is possible through the following procedure:
 878:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 879:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 880:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the USART clock using the USART_ClockInit() function as following:
 881:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART Clock enabled
 882:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART CPOL Low
 883:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART CPHA on first edge
 884:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART Last Bit Clock Enabled
 885:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Smartcard interface using the USART_Init() function as following:
 886:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Word Length = 9 Bits
 887:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) 1.5 Stop Bit
 888:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Even parity
 889:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) BaudRate = 12096 baud
 890:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Hardware flow control disabled (RTS and CTS signals)
 891:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Tx and Rx enabled
 892:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) POptionally you can enable the parity error interrupt using the USART_ITConfig()
 893:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           function
 894:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) PEnable the USART using the USART_Cmd() function.
 895:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) PEnable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 896:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) PEnable the Smartcard interface using the USART_SmartCardCmd() function.
 897:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 898:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Please refer to the ISO 7816-3 specification for more details.
 899:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 900:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 901:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 902:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           between the two configurations.
 903:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- In smartcard mode, the following bits must be kept cleared:
 904:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (+@) LINEN bit in the USART_CR2 register.
 905:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (+@) HDSEL and IREN bits in the USART_CR3 register.
 906:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- Smartcard mode is available on USART peripherals only (not available on UART4 
 907:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           and UART5 peripherals).
 908:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 909:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 910:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 911:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 912:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 913:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 914:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 915:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 916:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 917:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 918:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 919:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 920:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 921:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {    
 2058              		.loc 1 921 0
 2059              		.cfi_startproc
 2060              		@ args = 0, pretend = 0, frame = 0
 2061              		@ frame_needed = 0, uses_anonymous_args = 0
 2062              	.LVL171:
 2063 0000 38B5     		push	{r3, r4, r5, lr}
 2064              	.LCFI17:
 2065              		.cfi_def_cfa_offset 16
 2066              		.cfi_offset 3, -16
 2067              		.cfi_offset 4, -12
 2068              		.cfi_offset 5, -8
 2069              		.cfi_offset 14, -4
 922:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 923:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 2070              		.loc 1 923 0
 2071 0002 4FF48052 		mov	r2, #4096
 2072 0006 4FF48843 		mov	r3, #17408
 2073 000a C4F20102 		movt	r2, 16385
 2074 000e C4F20003 		movt	r3, 16384
 2075 0012 9042     		cmp	r0, r2
 2076 0014 18BF     		it	ne
 2077 0016 9842     		cmpne	r0, r3
 921:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 2078              		.loc 1 921 0
 2079 0018 0446     		mov	r4, r0
 2080 001a 0D46     		mov	r5, r1
 2081              		.loc 1 923 0
 2082 001c 0BD0     		beq	.L343
 2083              		.loc 1 923 0 is_stmt 0 discriminator 1
 2084 001e 4FF49042 		mov	r2, #18432
 2085 0022 4FF4A053 		mov	r3, #5120
 2086 0026 C4F20002 		movt	r2, 16384
 2087 002a C4F20103 		movt	r3, 16385
 2088 002e 9042     		cmp	r0, r2
 2089 0030 18BF     		it	ne
 2090 0032 9842     		cmpne	r0, r3
 2091 0034 08D1     		bne	.L350
 2092              	.LVL172:
 2093              	.L343:
 924:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 925:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 926:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 2094              		.loc 1 926 0 is_stmt 1
 2095 0036 238B     		ldrh	r3, [r4, #24]
 2096 0038 DBB2     		uxtb	r3, r3
 2097 003a 2383     		strh	r3, [r4, #24]	@ movhi
 927:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART guard time */
 928:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 2098              		.loc 1 928 0
 2099 003c 238B     		ldrh	r3, [r4, #24]
 2100 003e 9BB2     		uxth	r3, r3
 2101 0040 43EA0525 		orr	r5, r3, r5, lsl #8
 2102 0044 2583     		strh	r5, [r4, #24]	@ movhi
 2103 0046 38BD     		pop	{r3, r4, r5, pc}
 2104              	.LVL173:
 2105              	.L350:
 923:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 2106              		.loc 1 923 0 discriminator 1
 2107 0048 40F20000 		movw	r0, #:lower16:.LC0
 2108              	.LVL174:
 2109 004c C0F20000 		movt	r0, #:upper16:.LC0
 2110 0050 40F29B31 		movw	r1, #923
 2111              	.LVL175:
 2112 0054 FFF7FEFF 		bl	assert_failed
 2113              	.LVL176:
 2114 0058 EDE7     		b	.L343
 2115              		.cfi_endproc
 2116              	.LFE141:
 2118 005a 00BF     		.section	.text.USART_SmartCardCmd,"ax",%progbits
 2119              		.align	2
 2120              		.global	USART_SmartCardCmd
 2121              		.thumb
 2122              		.thumb_func
 2124              	USART_SmartCardCmd:
 2125              	.LFB142:
 929:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 930:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 931:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 932:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 933:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 934:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 935:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 936:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 937:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 938:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 939:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 940:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 2126              		.loc 1 940 0
 2127              		.cfi_startproc
 2128              		@ args = 0, pretend = 0, frame = 0
 2129              		@ frame_needed = 0, uses_anonymous_args = 0
 2130              	.LVL177:
 2131 0000 38B5     		push	{r3, r4, r5, lr}
 2132              	.LCFI18:
 2133              		.cfi_def_cfa_offset 16
 2134              		.cfi_offset 3, -16
 2135              		.cfi_offset 4, -12
 2136              		.cfi_offset 5, -8
 2137              		.cfi_offset 14, -4
 941:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 942:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 2138              		.loc 1 942 0
 2139 0002 4FF48052 		mov	r2, #4096
 2140 0006 4FF48843 		mov	r3, #17408
 2141 000a C4F20102 		movt	r2, 16385
 2142 000e C4F20003 		movt	r3, 16384
 2143 0012 9042     		cmp	r0, r2
 2144 0014 18BF     		it	ne
 2145 0016 9842     		cmpne	r0, r3
 940:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 2146              		.loc 1 940 0
 2147 0018 0446     		mov	r4, r0
 2148 001a 0D46     		mov	r5, r1
 2149              		.loc 1 942 0
 2150 001c 0BD0     		beq	.L352
 2151              		.loc 1 942 0 is_stmt 0 discriminator 1
 2152 001e 4FF49042 		mov	r2, #18432
 2153 0022 4FF4A053 		mov	r3, #5120
 2154 0026 C4F20002 		movt	r2, 16384
 2155 002a C4F20103 		movt	r3, 16385
 2156 002e 9042     		cmp	r0, r2
 2157 0030 18BF     		it	ne
 2158 0032 9842     		cmpne	r0, r3
 2159 0034 18D1     		bne	.L363
 2160              	.LVL178:
 2161              	.L352:
 943:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2162              		.loc 1 943 0 is_stmt 1
 2163 0036 012D     		cmp	r5, #1
 2164 0038 0DD9     		bls	.L353
 2165              		.loc 1 943 0 is_stmt 0 discriminator 1
 2166 003a 40F20000 		movw	r0, #:lower16:.LC0
 2167 003e C0F20000 		movt	r0, #:upper16:.LC0
 2168 0042 40F2AF31 		movw	r1, #943
 2169 0046 FFF7FEFF 		bl	assert_failed
 2170              	.LVL179:
 2171              	.L354:
 944:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 945:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 946:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 947:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 2172              		.loc 1 947 0 is_stmt 1
 2173 004a A38A     		ldrh	r3, [r4, #20]
 2174 004c 9BB2     		uxth	r3, r3
 2175 004e 43F02003 		orr	r3, r3, #32
 2176 0052 A382     		strh	r3, [r4, #20]	@ movhi
 2177 0054 38BD     		pop	{r3, r4, r5, pc}
 2178              	.LVL180:
 2179              	.L353:
 944:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 2180              		.loc 1 944 0
 2181 0056 002D     		cmp	r5, #0
 2182 0058 F7D1     		bne	.L354
 948:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 949:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 950:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 951:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 952:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 2183              		.loc 1 952 0
 2184 005a A38A     		ldrh	r3, [r4, #20]
 2185 005c 23F02003 		bic	r3, r3, #32
 2186 0060 1B04     		lsls	r3, r3, #16
 2187 0062 1B0C     		lsrs	r3, r3, #16
 2188 0064 A382     		strh	r3, [r4, #20]	@ movhi
 2189 0066 38BD     		pop	{r3, r4, r5, pc}
 2190              	.LVL181:
 2191              	.L363:
 942:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2192              		.loc 1 942 0 discriminator 1
 2193 0068 40F20000 		movw	r0, #:lower16:.LC0
 2194              	.LVL182:
 2195 006c C0F20000 		movt	r0, #:upper16:.LC0
 2196 0070 40F2AE31 		movw	r1, #942
 2197              	.LVL183:
 2198 0074 FFF7FEFF 		bl	assert_failed
 2199              	.LVL184:
 2200 0078 DDE7     		b	.L352
 2201              		.cfi_endproc
 2202              	.LFE142:
 2204 007a 00BF     		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 2205              		.align	2
 2206              		.global	USART_SmartCardNACKCmd
 2207              		.thumb
 2208              		.thumb_func
 2210              	USART_SmartCardNACKCmd:
 2211              	.LFB143:
 953:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 954:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 955:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 956:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 957:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 958:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 959:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 960:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 961:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 962:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 963:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 964:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 965:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 2212              		.loc 1 965 0
 2213              		.cfi_startproc
 2214              		@ args = 0, pretend = 0, frame = 0
 2215              		@ frame_needed = 0, uses_anonymous_args = 0
 2216              	.LVL185:
 2217 0000 38B5     		push	{r3, r4, r5, lr}
 2218              	.LCFI19:
 2219              		.cfi_def_cfa_offset 16
 2220              		.cfi_offset 3, -16
 2221              		.cfi_offset 4, -12
 2222              		.cfi_offset 5, -8
 2223              		.cfi_offset 14, -4
 966:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 967:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 2224              		.loc 1 967 0
 2225 0002 4FF48052 		mov	r2, #4096
 2226 0006 4FF48843 		mov	r3, #17408
 2227 000a C4F20102 		movt	r2, 16385
 2228 000e C4F20003 		movt	r3, 16384
 2229 0012 9042     		cmp	r0, r2
 2230 0014 18BF     		it	ne
 2231 0016 9842     		cmpne	r0, r3
 965:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 2232              		.loc 1 965 0
 2233 0018 0446     		mov	r4, r0
 2234 001a 0D46     		mov	r5, r1
 2235              		.loc 1 967 0
 2236 001c 0BD0     		beq	.L365
 2237              		.loc 1 967 0 is_stmt 0 discriminator 1
 2238 001e 4FF49042 		mov	r2, #18432
 2239 0022 4FF4A053 		mov	r3, #5120
 2240 0026 C4F20002 		movt	r2, 16384
 2241 002a C4F20103 		movt	r3, 16385
 2242 002e 9042     		cmp	r0, r2
 2243 0030 18BF     		it	ne
 2244 0032 9842     		cmpne	r0, r3
 2245 0034 18D1     		bne	.L376
 2246              	.LVL186:
 2247              	.L365:
 968:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2248              		.loc 1 968 0 is_stmt 1
 2249 0036 012D     		cmp	r5, #1
 2250 0038 0DD9     		bls	.L366
 2251              		.loc 1 968 0 is_stmt 0 discriminator 1
 2252 003a 40F20000 		movw	r0, #:lower16:.LC0
 2253 003e C0F20000 		movt	r0, #:upper16:.LC0
 2254 0042 4FF47271 		mov	r1, #968
 2255 0046 FFF7FEFF 		bl	assert_failed
 2256              	.LVL187:
 2257              	.L367:
 969:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 970:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 971:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 972:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 2258              		.loc 1 972 0 is_stmt 1
 2259 004a A38A     		ldrh	r3, [r4, #20]
 2260 004c 9BB2     		uxth	r3, r3
 2261 004e 43F01003 		orr	r3, r3, #16
 2262 0052 A382     		strh	r3, [r4, #20]	@ movhi
 2263 0054 38BD     		pop	{r3, r4, r5, pc}
 2264              	.LVL188:
 2265              	.L366:
 969:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 2266              		.loc 1 969 0
 2267 0056 002D     		cmp	r5, #0
 2268 0058 F7D1     		bne	.L367
 973:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 974:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 975:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 976:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 977:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 2269              		.loc 1 977 0
 2270 005a A38A     		ldrh	r3, [r4, #20]
 2271 005c 23F01003 		bic	r3, r3, #16
 2272 0060 1B04     		lsls	r3, r3, #16
 2273 0062 1B0C     		lsrs	r3, r3, #16
 2274 0064 A382     		strh	r3, [r4, #20]	@ movhi
 2275 0066 38BD     		pop	{r3, r4, r5, pc}
 2276              	.LVL189:
 2277              	.L376:
 967:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2278              		.loc 1 967 0 discriminator 1
 2279 0068 40F20000 		movw	r0, #:lower16:.LC0
 2280              	.LVL190:
 2281 006c C0F20000 		movt	r0, #:upper16:.LC0
 2282 0070 40F2C731 		movw	r1, #967
 2283              	.LVL191:
 2284 0074 FFF7FEFF 		bl	assert_failed
 2285              	.LVL192:
 2286 0078 DDE7     		b	.L365
 2287              		.cfi_endproc
 2288              	.LFE143:
 2290 007a 00BF     		.section	.text.USART_IrDAConfig,"ax",%progbits
 2291              		.align	2
 2292              		.global	USART_IrDAConfig
 2293              		.thumb
 2294              		.thumb_func
 2296              	USART_IrDAConfig:
 2297              	.LFB144:
 978:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 979:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 980:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 981:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 982:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 983:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 984:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 985:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 986:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 987:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 988:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 989:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 990:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         ##### IrDA mode functions #####
 991:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 992:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 993:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 994:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     IrDA communication.
 995:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 996:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 997:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 998:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 999:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     While receiving data, transmission should be avoided as the data to be transmitted
1000:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     could be corrupted.
1001:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1002:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     IrDA communication is possible through the following procedure:
1003:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
1004:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           modes and hardware flow control values using the USART_Init() function.
1005:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
1006:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the IrDA pulse width by configuring the prescaler using  
1007:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the USART_SetPrescaler() function.
1008:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
1009:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           using the USART_IrDAConfig() function.
1010:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the IrDA using the USART_IrDACmd() function.
1011:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1012:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- A pulse of width less than two and greater than one PSC period(s) may or may
1013:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           not be rejected.
1014:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- The receiver set up time should be managed by software. The IrDA physical layer
1015:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           specification specifies a minimum of 10 ms delay between transmission and 
1016:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           reception (IrDA is a half duplex protocol).
1017:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- In IrDA mode, the following bits must be kept cleared:
1018:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (+@) LINEN, STOP and CLKEN bits in the USART_CR2 register.
1019:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (+@) SCEN and HDSEL bits in the USART_CR3 register.
1020:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1021:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1022:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1023:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1024:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1025:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1026:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1027:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1028:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1029:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1030:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1031:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1032:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1033:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1034:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1035:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1036:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 2298              		.loc 1 1036 0
 2299              		.cfi_startproc
 2300              		@ args = 0, pretend = 0, frame = 0
 2301              		@ frame_needed = 0, uses_anonymous_args = 0
 2302              	.LVL193:
 2303 0000 38B5     		push	{r3, r4, r5, lr}
 2304              	.LCFI20:
 2305              		.cfi_def_cfa_offset 16
 2306              		.cfi_offset 3, -16
 2307              		.cfi_offset 4, -12
 2308              		.cfi_offset 5, -8
 2309              		.cfi_offset 14, -4
1037:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1038:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2310              		.loc 1 1038 0
 2311 0002 4FF48052 		mov	r2, #4096
 2312 0006 4FF48843 		mov	r3, #17408
 2313 000a C4F20102 		movt	r2, 16385
 2314 000e C4F20003 		movt	r3, 16384
 2315 0012 9042     		cmp	r0, r2
 2316 0014 18BF     		it	ne
 2317 0016 9842     		cmpne	r0, r3
1036:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 2318              		.loc 1 1036 0
 2319 0018 0446     		mov	r4, r0
 2320 001a 0D46     		mov	r5, r1
 2321              		.loc 1 1038 0
 2322 001c 0BD0     		beq	.L378
 2323              		.loc 1 1038 0 is_stmt 0 discriminator 1
 2324 001e 4FF49042 		mov	r2, #18432
 2325 0022 4FF49843 		mov	r3, #19456
 2326 0026 C4F20002 		movt	r2, 16384
 2327 002a C4F20003 		movt	r3, 16384
 2328 002e 9042     		cmp	r0, r2
 2329 0030 18BF     		it	ne
 2330 0032 9842     		cmpne	r0, r3
 2331 0034 16D1     		bne	.L395
 2332              	.LVL194:
 2333              	.L378:
1039:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
 2334              		.loc 1 1039 0 is_stmt 1
 2335 0036 4FF6FB73 		movw	r3, #65531
 2336 003a 2B40     		ands	r3, r3, r5
 2337 003c 3BB1     		cbz	r3, .L379
 2338              		.loc 1 1039 0 is_stmt 0 discriminator 1
 2339 003e 40F20000 		movw	r0, #:lower16:.LC0
 2340 0042 C0F20000 		movt	r0, #:upper16:.LC0
 2341 0046 40F20F41 		movw	r1, #1039
 2342 004a FFF7FEFF 		bl	assert_failed
 2343              	.LVL195:
 2344              	.L379:
1040:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1041:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 2345              		.loc 1 1041 0 is_stmt 1
 2346 004e A38A     		ldrh	r3, [r4, #20]
 2347 0050 23F00403 		bic	r3, r3, #4
 2348 0054 1B04     		lsls	r3, r3, #16
 2349 0056 1B0C     		lsrs	r3, r3, #16
 2350 0058 A382     		strh	r3, [r4, #20]	@ movhi
1042:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 2351              		.loc 1 1042 0
 2352 005a A38A     		ldrh	r3, [r4, #20]
 2353 005c 9BB2     		uxth	r3, r3
 2354 005e 1D43     		orrs	r5, r5, r3
 2355 0060 A582     		strh	r5, [r4, #20]	@ movhi
 2356 0062 38BD     		pop	{r3, r4, r5, pc}
 2357              	.LVL196:
 2358              	.L395:
1038:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
 2359              		.loc 1 1038 0 discriminator 1
 2360 0064 4FF4A042 		mov	r2, #20480
 2361 0068 4FF4A053 		mov	r3, #5120
 2362 006c C4F20002 		movt	r2, 16384
 2363 0070 C4F20103 		movt	r3, 16385
 2364 0074 9042     		cmp	r0, r2
 2365 0076 18BF     		it	ne
 2366 0078 9842     		cmpne	r0, r3
 2367 007a DCD0     		beq	.L378
 2368 007c 4FF4F042 		mov	r2, #30720
 2369 0080 4FF4F843 		mov	r3, #31744
 2370 0084 C4F20002 		movt	r2, 16384
 2371 0088 C4F20003 		movt	r3, 16384
 2372 008c 9042     		cmp	r0, r2
 2373 008e 18BF     		it	ne
 2374 0090 9842     		cmpne	r0, r3
 2375 0092 D0D0     		beq	.L378
 2376 0094 40F20000 		movw	r0, #:lower16:.LC0
 2377              	.LVL197:
 2378 0098 C0F20000 		movt	r0, #:upper16:.LC0
 2379 009c 40F20E41 		movw	r1, #1038
 2380              	.LVL198:
 2381 00a0 FFF7FEFF 		bl	assert_failed
 2382              	.LVL199:
 2383 00a4 C7E7     		b	.L378
 2384              		.cfi_endproc
 2385              	.LFE144:
 2387 00a6 00BF     		.section	.text.USART_IrDACmd,"ax",%progbits
 2388              		.align	2
 2389              		.global	USART_IrDACmd
 2390              		.thumb
 2391              		.thumb_func
 2393              	USART_IrDACmd:
 2394              	.LFB145:
1043:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1044:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1045:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1046:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1047:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1048:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1049:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1050:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1051:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1052:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1053:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1054:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 2395              		.loc 1 1054 0
 2396              		.cfi_startproc
 2397              		@ args = 0, pretend = 0, frame = 0
 2398              		@ frame_needed = 0, uses_anonymous_args = 0
 2399              	.LVL200:
 2400 0000 38B5     		push	{r3, r4, r5, lr}
 2401              	.LCFI21:
 2402              		.cfi_def_cfa_offset 16
 2403              		.cfi_offset 3, -16
 2404              		.cfi_offset 4, -12
 2405              		.cfi_offset 5, -8
 2406              		.cfi_offset 14, -4
1055:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1056:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2407              		.loc 1 1056 0
 2408 0002 4FF48052 		mov	r2, #4096
 2409 0006 4FF48843 		mov	r3, #17408
 2410 000a C4F20102 		movt	r2, 16385
 2411 000e C4F20003 		movt	r3, 16384
 2412 0012 9042     		cmp	r0, r2
 2413 0014 18BF     		it	ne
 2414 0016 9842     		cmpne	r0, r3
1054:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 2415              		.loc 1 1054 0
 2416 0018 0446     		mov	r4, r0
 2417 001a 0D46     		mov	r5, r1
 2418              		.loc 1 1056 0
 2419 001c 0BD0     		beq	.L397
 2420              		.loc 1 1056 0 is_stmt 0 discriminator 1
 2421 001e 4FF49042 		mov	r2, #18432
 2422 0022 4FF49843 		mov	r3, #19456
 2423 0026 C4F20002 		movt	r2, 16384
 2424 002a C4F20003 		movt	r3, 16384
 2425 002e 9042     		cmp	r0, r2
 2426 0030 18BF     		it	ne
 2427 0032 9842     		cmpne	r0, r3
 2428 0034 0FD1     		bne	.L414
 2429              	.LVL201:
 2430              	.L397:
1057:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2431              		.loc 1 1057 0 is_stmt 1
 2432 0036 012D     		cmp	r5, #1
 2433 0038 2ED9     		bls	.L398
 2434              		.loc 1 1057 0 is_stmt 0 discriminator 1
 2435 003a 40F20000 		movw	r0, #:lower16:.LC0
 2436 003e C0F20000 		movt	r0, #:upper16:.LC0
 2437 0042 40F22141 		movw	r1, #1057
 2438 0046 FFF7FEFF 		bl	assert_failed
 2439              	.LVL202:
 2440              	.L399:
1058:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1059:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
1060:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1061:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1062:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 2441              		.loc 1 1062 0 is_stmt 1
 2442 004a A38A     		ldrh	r3, [r4, #20]
 2443 004c 9BB2     		uxth	r3, r3
 2444 004e 43F00203 		orr	r3, r3, #2
 2445 0052 A382     		strh	r3, [r4, #20]	@ movhi
 2446 0054 38BD     		pop	{r3, r4, r5, pc}
 2447              	.LVL203:
 2448              	.L414:
1056:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2449              		.loc 1 1056 0 discriminator 1
 2450 0056 4FF4A042 		mov	r2, #20480
 2451 005a 4FF4A053 		mov	r3, #5120
 2452 005e C4F20002 		movt	r2, 16384
 2453 0062 C4F20103 		movt	r3, 16385
 2454 0066 9042     		cmp	r0, r2
 2455 0068 18BF     		it	ne
 2456 006a 9842     		cmpne	r0, r3
 2457 006c E3D0     		beq	.L397
 2458 006e 4FF4F042 		mov	r2, #30720
 2459 0072 4FF4F843 		mov	r3, #31744
 2460 0076 C4F20002 		movt	r2, 16384
 2461 007a C4F20003 		movt	r3, 16384
 2462 007e 9042     		cmp	r0, r2
 2463 0080 18BF     		it	ne
 2464 0082 9842     		cmpne	r0, r3
 2465 0084 D7D0     		beq	.L397
 2466 0086 40F20000 		movw	r0, #:lower16:.LC0
 2467              	.LVL204:
 2468 008a C0F20000 		movt	r0, #:upper16:.LC0
 2469 008e 4FF48461 		mov	r1, #1056
 2470              	.LVL205:
 2471 0092 FFF7FEFF 		bl	assert_failed
 2472              	.LVL206:
 2473 0096 CEE7     		b	.L397
 2474              	.L398:
1059:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 2475              		.loc 1 1059 0
 2476 0098 002D     		cmp	r5, #0
 2477 009a D6D1     		bne	.L399
1063:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1064:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1065:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1066:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1067:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 2478              		.loc 1 1067 0
 2479 009c A38A     		ldrh	r3, [r4, #20]
 2480 009e 23F00203 		bic	r3, r3, #2
 2481 00a2 1B04     		lsls	r3, r3, #16
 2482 00a4 1B0C     		lsrs	r3, r3, #16
 2483 00a6 A382     		strh	r3, [r4, #20]	@ movhi
 2484 00a8 38BD     		pop	{r3, r4, r5, pc}
 2485              		.cfi_endproc
 2486              	.LFE145:
 2488 00aa 00BF     		.section	.text.USART_DMACmd,"ax",%progbits
 2489              		.align	2
 2490              		.global	USART_DMACmd
 2491              		.thumb
 2492              		.thumb_func
 2494              	USART_DMACmd:
 2495              	.LFB146:
1068:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1069:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1070:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1071:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1072:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1073:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1074:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1075:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1076:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1077:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1078:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1079:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1080:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****               ##### DMA transfers management functions #####
1081:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1082:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1083:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1084:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1085:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1086:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1087:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1088:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1089:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1090:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1091:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1092:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1093:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1094:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1095:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1096:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1097:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1098:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1099:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1100:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 2496              		.loc 1 1100 0
 2497              		.cfi_startproc
 2498              		@ args = 0, pretend = 0, frame = 0
 2499              		@ frame_needed = 0, uses_anonymous_args = 0
 2500              	.LVL207:
 2501 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2502              	.LCFI22:
 2503              		.cfi_def_cfa_offset 24
 2504              		.cfi_offset 3, -24
 2505              		.cfi_offset 4, -20
 2506              		.cfi_offset 5, -16
 2507              		.cfi_offset 6, -12
 2508              		.cfi_offset 7, -8
 2509              		.cfi_offset 14, -4
1101:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1102:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2510              		.loc 1 1102 0
 2511 0002 4FF48056 		mov	r6, #4096
 2512 0006 4FF48843 		mov	r3, #17408
 2513 000a C4F20106 		movt	r6, 16385
 2514 000e C4F20003 		movt	r3, 16384
 2515 0012 B042     		cmp	r0, r6
 2516 0014 18BF     		it	ne
 2517 0016 9842     		cmpne	r0, r3
1100:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 2518              		.loc 1 1100 0
 2519 0018 0446     		mov	r4, r0
 2520 001a 0D46     		mov	r5, r1
 2521 001c 1746     		mov	r7, r2
 2522              		.loc 1 1102 0
 2523 001e 0BD0     		beq	.L416
 2524              		.loc 1 1102 0 is_stmt 0 discriminator 1
 2525 0020 4FF49042 		mov	r2, #18432
 2526              	.LVL208:
 2527 0024 4FF49843 		mov	r3, #19456
 2528 0028 C4F20002 		movt	r2, 16384
 2529 002c C4F20003 		movt	r3, 16384
 2530 0030 9042     		cmp	r0, r2
 2531 0032 18BF     		it	ne
 2532 0034 9842     		cmpne	r0, r3
 2533 0036 25D1     		bne	.L435
 2534              	.LVL209:
 2535              	.L416:
1103:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
 2536              		.loc 1 1103 0 is_stmt 1
 2537 0038 4FF63F73 		movw	r3, #65343
 2538 003c 2B40     		ands	r3, r3, r5
 2539 003e 7BB9     		cbnz	r3, .L417
 2540              		.loc 1 1103 0 is_stmt 0 discriminator 2
 2541 0040 75B1     		cbz	r5, .L417
1104:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 2542              		.loc 1 1104 0 is_stmt 1
 2543 0042 012F     		cmp	r7, #1
 2544 0044 16D9     		bls	.L419
 2545              	.L436:
 2546              		.loc 1 1104 0 is_stmt 0 discriminator 1
 2547 0046 40F20000 		movw	r0, #:lower16:.LC0
 2548 004a C0F20000 		movt	r0, #:upper16:.LC0
 2549 004e 4FF48A61 		mov	r1, #1104
 2550 0052 FFF7FEFF 		bl	assert_failed
 2551              	.LVL210:
 2552              	.L420:
1105:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1106:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
1107:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1108:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1109:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1110:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 2553              		.loc 1 1110 0 is_stmt 1
 2554 0056 A38A     		ldrh	r3, [r4, #20]
 2555 0058 9BB2     		uxth	r3, r3
 2556 005a 1D43     		orrs	r5, r5, r3
 2557 005c A582     		strh	r5, [r4, #20]	@ movhi
 2558 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2559              	.LVL211:
 2560              	.L417:
1103:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 2561              		.loc 1 1103 0 discriminator 1
 2562 0060 40F20000 		movw	r0, #:lower16:.LC0
 2563 0064 C0F20000 		movt	r0, #:upper16:.LC0
 2564 0068 40F24F41 		movw	r1, #1103
 2565 006c FFF7FEFF 		bl	assert_failed
 2566              	.LVL212:
1104:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 2567              		.loc 1 1104 0 discriminator 1
 2568 0070 012F     		cmp	r7, #1
 2569 0072 E8D8     		bhi	.L436
 2570              	.L419:
1106:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 2571              		.loc 1 1106 0
 2572 0074 002F     		cmp	r7, #0
 2573 0076 EED1     		bne	.L420
1111:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1112:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1113:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1114:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1115:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1116:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 2574              		.loc 1 1116 0
 2575 0078 A38A     		ldrh	r3, [r4, #20]
 2576 007a 9BB2     		uxth	r3, r3
 2577 007c 23EA0505 		bic	r5, r3, r5
 2578 0080 A582     		strh	r5, [r4, #20]	@ movhi
 2579 0082 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2580              	.LVL213:
 2581              	.L435:
1102:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
 2582              		.loc 1 1102 0 discriminator 1
 2583 0084 4FF4A042 		mov	r2, #20480
 2584 0088 4FF4A053 		mov	r3, #5120
 2585 008c C4F20002 		movt	r2, 16384
 2586 0090 C4F20103 		movt	r3, 16385
 2587 0094 9042     		cmp	r0, r2
 2588 0096 18BF     		it	ne
 2589 0098 9842     		cmpne	r0, r3
 2590 009a CDD0     		beq	.L416
 2591 009c 4FF4F042 		mov	r2, #30720
 2592 00a0 4FF4F843 		mov	r3, #31744
 2593 00a4 C4F20002 		movt	r2, 16384
 2594 00a8 C4F20003 		movt	r3, 16384
 2595 00ac 9042     		cmp	r0, r2
 2596 00ae 18BF     		it	ne
 2597 00b0 9842     		cmpne	r0, r3
 2598 00b2 C1D0     		beq	.L416
 2599 00b4 40F20000 		movw	r0, #:lower16:.LC0
 2600              	.LVL214:
 2601 00b8 C0F20000 		movt	r0, #:upper16:.LC0
 2602 00bc 40F24E41 		movw	r1, #1102
 2603              	.LVL215:
 2604 00c0 FFF7FEFF 		bl	assert_failed
 2605              	.LVL216:
 2606 00c4 B8E7     		b	.L416
 2607              		.cfi_endproc
 2608              	.LFE146:
 2610 00c6 00BF     		.section	.text.USART_ITConfig,"ax",%progbits
 2611              		.align	2
 2612              		.global	USART_ITConfig
 2613              		.thumb
 2614              		.thumb_func
 2616              	USART_ITConfig:
 2617              	.LFB147:
1117:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1118:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1119:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1120:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1121:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1122:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1123:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1124:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1125:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1126:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1127:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1128:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1129:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             ##### Interrupts and flags management functions #####
1130:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1131:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1132:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to configure the USART 
1133:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Interrupts sources, DMA channels requests and check or clear the flags or 
1134:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     pending bits status.
1135:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The user should identify which mode will be used in his application to manage 
1136:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     the communication: Polling mode, Interrupt mode or DMA mode. 
1137:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1138:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *** Polling Mode ***
1139:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     ====================
1140:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1141:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In Polling Mode, the SPI communication can be managed by 10 flags:
1142:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_TXE : to indicate the status of the transmit buffer register
1143:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_RXNE : to indicate the status of the receive buffer register
1144:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_TC : to indicate the status of the transmit operation
1145:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_IDLE : to indicate the status of the Idle Line             
1146:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_CTS : to indicate the status of the nCTS input
1147:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_LBD : to indicate the status of the LIN break detection
1148:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_NE : to indicate if a noise error occur
1149:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_FE : to indicate if a frame error occur
1150:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_PE : to indicate if a parity error occur
1151:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_ORE : to indicate if an Overrun error occur
1152:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1153:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In this Mode it is advised to use the following functions:
1154:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1155:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1156:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1157:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *** Interrupt Mode ***
1158:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     ======================
1159:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1160:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1161:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     and 10 pending bits: 
1162:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1163:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Pending Bits:
1164:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1165:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_TXE : to indicate the status of the transmit buffer register
1166:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_RXNE : to indicate the status of the receive buffer register
1167:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_TC : to indicate the status of the transmit operation
1168:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_IDLE : to indicate the status of the Idle Line             
1169:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_CTS : to indicate the status of the nCTS input
1170:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_LBD : to indicate the status of the LIN break detection
1171:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_NE : to indicate if a noise error occur
1172:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_FE : to indicate if a frame error occur
1173:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_PE : to indicate if a parity error occur
1174:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_ORE : to indicate if an Overrun error occur
1175:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1176:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Interrupt Source:
1177:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1178:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1179:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                             interrupt. 
1180:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1181:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                              empty interrupt.
1182:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_TC : specifies the interrupt source for the Transmit complete 
1183:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                            interrupt. 
1184:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.           
1185:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1186:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_LBD : specifies the interrupt source for the LIN break detection
1187:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                             interrupt. 
1188:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1189:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1190:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1191:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@@- Some parameters are coded in order to use them as interrupt source 
1192:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           or as pending bits.
1193:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1194:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In this Mode it is advised to use the following functions:
1195:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1196:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1197:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1198:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1199:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *** DMA Mode ***
1200:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     ================
1201:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1202:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1203:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1204:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1205:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1206:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In this Mode it is advised to use the following function:
1207:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1208:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1209:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1210:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1211:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1212:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1213:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1214:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1215:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1216:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1217:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1218:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1219:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1220:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1221:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1222:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1223:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1224:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1225:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1226:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1227:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1228:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1229:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1230:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1231:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1232:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 2618              		.loc 1 1232 0
 2619              		.cfi_startproc
 2620              		@ args = 0, pretend = 0, frame = 0
 2621              		@ frame_needed = 0, uses_anonymous_args = 0
 2622              	.LVL217:
 2623 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2624              	.LCFI23:
 2625              		.cfi_def_cfa_offset 24
 2626              		.cfi_offset 3, -24
 2627              		.cfi_offset 4, -20
 2628              		.cfi_offset 5, -16
 2629              		.cfi_offset 6, -12
 2630              		.cfi_offset 7, -8
 2631              		.cfi_offset 14, -4
1233:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
1234:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
1235:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1236:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2632              		.loc 1 1236 0
 2633 0002 4FF48846 		mov	r6, #17408
 2634 0006 4FF48053 		mov	r3, #4096
 2635 000a C4F20006 		movt	r6, 16384
 2636 000e C4F20103 		movt	r3, 16385
 2637 0012 B042     		cmp	r0, r6
 2638 0014 18BF     		it	ne
 2639 0016 9842     		cmpne	r0, r3
1232:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 2640              		.loc 1 1232 0
 2641 0018 0446     		mov	r4, r0
 2642 001a 0D46     		mov	r5, r1
 2643 001c 1746     		mov	r7, r2
 2644              		.loc 1 1236 0
 2645 001e 0CBF     		ite	eq
 2646 0020 0026     		moveq	r6, #0
 2647 0022 0126     		movne	r6, #1
 2648 0024 0BD0     		beq	.L438
 2649              		.loc 1 1236 0 is_stmt 0 discriminator 1
 2650 0026 4FF49041 		mov	r1, #18432
 2651              	.LVL218:
 2652 002a 4FF49842 		mov	r2, #19456
 2653              	.LVL219:
 2654 002e C4F20001 		movt	r1, 16384
 2655 0032 C4F20002 		movt	r2, 16384
 2656 0036 8842     		cmp	r0, r1
 2657 0038 18BF     		it	ne
 2658 003a 9042     		cmpne	r0, r2
 2659 003c 48D1     		bne	.L478
 2660              	.LVL220:
 2661              	.L438:
1237:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
 2662              		.loc 1 1237 0 is_stmt 1
 2663 003e 40F22772 		movw	r2, #1831
 2664 0042 282D     		cmp	r5, #40
 2665 0044 18BF     		it	ne
 2666 0046 9542     		cmpne	r5, r2
 2667 0048 07D0     		beq	.L439
 2668              		.loc 1 1237 0 is_stmt 0 discriminator 1
 2669 004a 40F22662 		movw	r2, #1574
 2670 004e 40F22553 		movw	r3, #1317
 2671 0052 9542     		cmp	r5, r2
 2672 0054 18BF     		it	ne
 2673 0056 9D42     		cmpne	r5, r3
 2674 0058 23D1     		bne	.L479
 2675              	.L439:
1238:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2676              		.loc 1 1238 0 is_stmt 1
 2677 005a 012F     		cmp	r7, #1
 2678 005c 07D9     		bls	.L440
 2679              		.loc 1 1238 0 is_stmt 0 discriminator 1
 2680 005e 40F20000 		movw	r0, #:lower16:.LC0
 2681 0062 C0F20000 		movt	r0, #:upper16:.LC0
 2682 0066 40F2D641 		movw	r1, #1238
 2683 006a FFF7FEFF 		bl	assert_failed
 2684              	.LVL221:
 2685              	.L440:
1239:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1240:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1241:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
 2686              		.loc 1 1241 0 is_stmt 1
 2687 006e 40F66A12 		movw	r2, #2410
 2688 0072 9542     		cmp	r5, r2
 2689 0074 50D0     		beq	.L480
 2690              	.LVL222:
1242:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1243:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1244:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1245:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1246:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
1247:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1248:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1249:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
1250:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1251:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1252:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
1253:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 2691              		.loc 1 1253 0
 2692 0076 05F01F03 		and	r3, r5, #31
 2693 007a 0122     		movs	r2, #1
1249:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 2694              		.loc 1 1249 0
 2695 007c C5F34215 		ubfx	r5, r5, #5, #3
 2696              	.LVL223:
1254:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1255:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 2697              		.loc 1 1255 0
 2698 0080 9542     		cmp	r5, r2
1253:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 2699              		.loc 1 1253 0
 2700 0082 02FA03F3 		lsl	r3, r2, r3
 2701              	.LVL224:
1256:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1257:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x0C;
 2702              		.loc 1 1257 0
 2703 0086 08BF     		it	eq
 2704 0088 0C34     		addeq	r4, r4, #12
 2705              	.LVL225:
1255:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 2706              		.loc 1 1255 0
 2707 008a 04D0     		beq	.L444
1258:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1259:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 2708              		.loc 1 1259 0
 2709 008c 022D     		cmp	r5, #2
1260:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1261:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x10;
 2710              		.loc 1 1261 0
 2711 008e 08BF     		it	eq
 2712 0090 1034     		addeq	r4, r4, #16
1259:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 2713              		.loc 1 1259 0
 2714 0092 00D0     		beq	.L444
 2715              	.LVL226:
 2716              	.L445:
1262:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1263:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
1264:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1265:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x14; 
 2717              		.loc 1 1265 0
 2718 0094 1434     		adds	r4, r4, #20
 2719              	.LVL227:
 2720              	.L444:
1266:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1267:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
1268:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1269:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 2721              		.loc 1 1269 0
 2722 0096 2268     		ldr	r2, [r4]
1267:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 2723              		.loc 1 1267 0
 2724 0098 DFBB     		cbnz	r7, .L481
1270:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1271:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1272:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1273:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 2725              		.loc 1 1273 0
 2726 009a 22EA0303 		bic	r3, r2, r3
 2727              	.LVL228:
 2728 009e 2360     		str	r3, [r4]
 2729 00a0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2730              	.LVL229:
 2731              	.L479:
1237:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2732              		.loc 1 1237 0 discriminator 1
 2733 00a2 40F22442 		movw	r2, #1060
 2734 00a6 40F64603 		movw	r3, #2118
 2735 00aa 9542     		cmp	r5, r2
 2736 00ac 18BF     		it	ne
 2737 00ae 9D42     		cmpne	r5, r3
 2738 00b0 D3D0     		beq	.L439
 2739 00b2 03F59273 		add	r3, r3, #292
 2740 00b6 9D42     		cmp	r5, r3
 2741 00b8 18BF     		it	ne
 2742 00ba 602D     		cmpne	r5, #96
 2743 00bc CDD0     		beq	.L439
 2744 00be 40F20000 		movw	r0, #:lower16:.LC0
 2745 00c2 C0F20000 		movt	r0, #:upper16:.LC0
 2746 00c6 40F2D541 		movw	r1, #1237
 2747 00ca FFF7FEFF 		bl	assert_failed
 2748              	.LVL230:
 2749 00ce C4E7     		b	.L439
 2750              	.LVL231:
 2751              	.L478:
1236:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
 2752              		.loc 1 1236 0 discriminator 1
 2753 00d0 4FF4A042 		mov	r2, #20480
 2754 00d4 4FF4A053 		mov	r3, #5120
 2755 00d8 C4F20002 		movt	r2, 16384
 2756 00dc C4F20103 		movt	r3, 16385
 2757 00e0 9042     		cmp	r0, r2
 2758 00e2 18BF     		it	ne
 2759 00e4 9842     		cmpne	r0, r3
 2760 00e6 AAD0     		beq	.L438
 2761 00e8 4FF4F042 		mov	r2, #30720
 2762 00ec 4FF4F843 		mov	r3, #31744
 2763 00f0 C4F20002 		movt	r2, 16384
 2764 00f4 C4F20003 		movt	r3, 16384
 2765 00f8 9042     		cmp	r0, r2
 2766 00fa 18BF     		it	ne
 2767 00fc 9842     		cmpne	r0, r3
 2768 00fe 9ED0     		beq	.L438
 2769 0100 40F20000 		movw	r0, #:lower16:.LC0
 2770              	.LVL232:
 2771 0104 C0F20000 		movt	r0, #:upper16:.LC0
 2772 0108 40F2D441 		movw	r1, #1236
 2773 010c FFF7FEFF 		bl	assert_failed
 2774              	.LVL233:
 2775 0110 95E7     		b	.L438
 2776              	.LVL234:
 2777              	.L481:
1269:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 2778              		.loc 1 1269 0
 2779 0112 1343     		orrs	r3, r3, r2
 2780              	.LVL235:
 2781 0114 2360     		str	r3, [r4]
 2782 0116 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2783              	.LVL236:
 2784              	.L480:
1243:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
 2785              		.loc 1 1243 0
 2786 0118 5EB1     		cbz	r6, .L442
1243:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
 2787              		.loc 1 1243 0 is_stmt 0 discriminator 1
 2788 011a 4FF49042 		mov	r2, #18432
 2789 011e 4FF4A053 		mov	r3, #5120
 2790 0122 C4F20002 		movt	r2, 16384
 2791 0126 C4F20103 		movt	r3, 16385
 2792 012a 9442     		cmp	r4, r2
 2793 012c 18BF     		it	ne
 2794 012e 9C42     		cmpne	r4, r3
 2795 0130 02D1     		bne	.L482
 2796              	.L442:
 2797              	.LVL237:
1253:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 2798              		.loc 1 1253 0 is_stmt 1
 2799 0132 4FF48063 		mov	r3, #1024
 2800 0136 ADE7     		b	.L445
 2801              	.LVL238:
 2802              	.L482:
1243:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
 2803              		.loc 1 1243 0 discriminator 1
 2804 0138 40F20000 		movw	r0, #:lower16:.LC0
 2805 013c C0F20000 		movt	r0, #:upper16:.LC0
 2806 0140 40F2DB41 		movw	r1, #1243
 2807 0144 FFF7FEFF 		bl	assert_failed
 2808              	.LVL239:
 2809 0148 F3E7     		b	.L442
 2810              		.cfi_endproc
 2811              	.LFE147:
 2813 014a 00BF     		.section	.text.USART_GetFlagStatus,"ax",%progbits
 2814              		.align	2
 2815              		.global	USART_GetFlagStatus
 2816              		.thumb
 2817              		.thumb_func
 2819              	USART_GetFlagStatus:
 2820              	.LFB148:
1274:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1275:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1276:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1277:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1278:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1279:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1280:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1281:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1282:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1283:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1284:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1285:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1286:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1287:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1288:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1289:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1290:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1291:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1292:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1293:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1294:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1295:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1296:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 2821              		.loc 1 1296 0
 2822              		.cfi_startproc
 2823              		@ args = 0, pretend = 0, frame = 0
 2824              		@ frame_needed = 0, uses_anonymous_args = 0
 2825              	.LVL240:
1297:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
1298:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1299:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2826              		.loc 1 1299 0
 2827 0000 4FF48842 		mov	r2, #17408
 2828 0004 4FF48053 		mov	r3, #4096
 2829 0008 C4F20002 		movt	r2, 16384
 2830 000c C4F20103 		movt	r3, 16385
 2831 0010 9042     		cmp	r0, r2
 2832 0012 18BF     		it	ne
 2833 0014 9842     		cmpne	r0, r3
1296:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
 2834              		.loc 1 1296 0
 2835 0016 70B5     		push	{r4, r5, r6, lr}
 2836              	.LCFI24:
 2837              		.cfi_def_cfa_offset 16
 2838              		.cfi_offset 4, -16
 2839              		.cfi_offset 5, -12
 2840              		.cfi_offset 6, -8
 2841              		.cfi_offset 14, -4
1296:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
 2842              		.loc 1 1296 0
 2843 0018 0446     		mov	r4, r0
 2844 001a 0D46     		mov	r5, r1
 2845              		.loc 1 1299 0
 2846 001c 0CBF     		ite	eq
 2847 001e 0026     		moveq	r6, #0
 2848 0020 0126     		movne	r6, #1
 2849 0022 0BD0     		beq	.L484
 2850              		.loc 1 1299 0 is_stmt 0 discriminator 1
 2851 0024 4FF49040 		mov	r0, #18432
 2852              	.LVL241:
 2853 0028 4FF49841 		mov	r1, #19456
 2854              	.LVL242:
 2855 002c C4F20000 		movt	r0, 16384
 2856 0030 C4F20001 		movt	r1, 16384
 2857 0034 8442     		cmp	r4, r0
 2858 0036 18BF     		it	ne
 2859 0038 8C42     		cmpne	r4, r1
 2860 003a 26D1     		bne	.L520
 2861              	.L484:
1300:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
 2862              		.loc 1 1300 0 is_stmt 1
 2863 003c 691E     		subs	r1, r5, #1
 2864 003e 802D     		cmp	r5, #128
 2865 0040 18BF     		it	ne
 2866 0042 0129     		cmpne	r1, #1
 2867 0044 03D9     		bls	.L485
 2868              		.loc 1 1300 0 is_stmt 0 discriminator 1
 2869 0046 402D     		cmp	r5, #64
 2870 0048 18BF     		it	ne
 2871 004a 202D     		cmpne	r5, #32
 2872 004c 08D1     		bne	.L521
 2873              	.L485:
1301:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1302:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1303:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
 2874              		.loc 1 1303 0 is_stmt 1
 2875 004e B5F5007F 		cmp	r5, #512
 2876 0052 3BD0     		beq	.L522
 2877              	.L486:
1304:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1305:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1306:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1307:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1308:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 2878              		.loc 1 1308 0
 2879 0054 2388     		ldrh	r3, [r4]
 2880              	.LVL243:
 2881 0056 1D42     		tst	r5, r3
1309:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1310:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
1311:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1312:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1313:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1314:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
1315:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1316:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;
1317:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 2882              		.loc 1 1317 0
 2883 0058 0CBF     		ite	eq
 2884 005a 0020     		moveq	r0, #0
 2885 005c 0120     		movne	r0, #1
 2886 005e 70BD     		pop	{r4, r5, r6, pc}
 2887              	.LVL244:
 2888              	.L521:
1300:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 2889              		.loc 1 1300 0 discriminator 1
 2890 0060 102D     		cmp	r5, #16
 2891 0062 18BF     		it	ne
 2892 0064 B5F5807F 		cmpne	r5, #256
 2893 0068 F1D0     		beq	.L485
 2894 006a B5F5007F 		cmp	r5, #512
 2895 006e 18BF     		it	ne
 2896 0070 082D     		cmpne	r5, #8
 2897 0072 ECD0     		beq	.L485
 2898 0074 042D     		cmp	r5, #4
 2899 0076 EDD0     		beq	.L486
 2900 0078 40F20000 		movw	r0, #:lower16:.LC0
 2901 007c C0F20000 		movt	r0, #:upper16:.LC0
 2902 0080 40F21451 		movw	r1, #1300
 2903 0084 FFF7FEFF 		bl	assert_failed
 2904              	.LVL245:
 2905 0088 E1E7     		b	.L485
 2906              	.L520:
1299:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
 2907              		.loc 1 1299 0 discriminator 1
 2908 008a 4FF4A042 		mov	r2, #20480
 2909 008e 4FF4A053 		mov	r3, #5120
 2910 0092 C4F20002 		movt	r2, 16384
 2911 0096 C4F20103 		movt	r3, 16385
 2912 009a 9442     		cmp	r4, r2
 2913 009c 18BF     		it	ne
 2914 009e 9C42     		cmpne	r4, r3
 2915 00a0 CCD0     		beq	.L484
 2916 00a2 4FF4F042 		mov	r2, #30720
 2917 00a6 4FF4F843 		mov	r3, #31744
 2918 00aa C4F20002 		movt	r2, 16384
 2919 00ae C4F20003 		movt	r3, 16384
 2920 00b2 9442     		cmp	r4, r2
 2921 00b4 18BF     		it	ne
 2922 00b6 9C42     		cmpne	r4, r3
 2923 00b8 C0D0     		beq	.L484
 2924 00ba 40F20000 		movw	r0, #:lower16:.LC0
 2925 00be C0F20000 		movt	r0, #:upper16:.LC0
 2926 00c2 40F21351 		movw	r1, #1299
 2927 00c6 FFF7FEFF 		bl	assert_failed
 2928              	.LVL246:
 2929 00ca B7E7     		b	.L484
 2930              	.L522:
1305:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
 2931              		.loc 1 1305 0
 2932 00cc 002E     		cmp	r6, #0
 2933 00ce C1D0     		beq	.L486
1305:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
 2934              		.loc 1 1305 0 is_stmt 0 discriminator 1
 2935 00d0 4FF49042 		mov	r2, #18432
 2936 00d4 4FF4A053 		mov	r3, #5120
 2937 00d8 C4F20002 		movt	r2, 16384
 2938 00dc C4F20103 		movt	r3, 16385
 2939 00e0 9442     		cmp	r4, r2
 2940 00e2 18BF     		it	ne
 2941 00e4 9C42     		cmpne	r4, r3
 2942 00e6 B5D0     		beq	.L486
 2943 00e8 40F20000 		movw	r0, #:lower16:.LC0
 2944 00ec C0F20000 		movt	r0, #:upper16:.LC0
 2945 00f0 40F21951 		movw	r1, #1305
 2946 00f4 FFF7FEFF 		bl	assert_failed
 2947              	.LVL247:
 2948 00f8 ACE7     		b	.L486
 2949              		.cfi_endproc
 2950              	.LFE148:
 2952 00fa 00BF     		.section	.text.USART_ClearFlag,"ax",%progbits
 2953              		.align	2
 2954              		.global	USART_ClearFlag
 2955              		.thumb
 2956              		.thumb_func
 2958              	USART_ClearFlag:
 2959              	.LFB149:
1318:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1319:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1320:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1321:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1322:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1323:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1324:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1325:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1326:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1327:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1328:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1329:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1330:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1331:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1332:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1333:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1334:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1335:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1336:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1337:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1338:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1339:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1340:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1341:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1342:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1343:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1344:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1345:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 2960              		.loc 1 1345 0 is_stmt 1
 2961              		.cfi_startproc
 2962              		@ args = 0, pretend = 0, frame = 0
 2963              		@ frame_needed = 0, uses_anonymous_args = 0
 2964              	.LVL248:
1346:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1347:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2965              		.loc 1 1347 0
 2966 0000 4FF48842 		mov	r2, #17408
 2967 0004 4FF48053 		mov	r3, #4096
 2968 0008 C4F20002 		movt	r2, 16384
 2969 000c C4F20103 		movt	r3, 16385
 2970 0010 9042     		cmp	r0, r2
 2971 0012 18BF     		it	ne
 2972 0014 9842     		cmpne	r0, r3
1345:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 2973              		.loc 1 1345 0
 2974 0016 70B5     		push	{r4, r5, r6, lr}
 2975              	.LCFI25:
 2976              		.cfi_def_cfa_offset 16
 2977              		.cfi_offset 4, -16
 2978              		.cfi_offset 5, -12
 2979              		.cfi_offset 6, -8
 2980              		.cfi_offset 14, -4
1345:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 2981              		.loc 1 1345 0
 2982 0018 0446     		mov	r4, r0
 2983 001a 0D46     		mov	r5, r1
 2984              		.loc 1 1347 0
 2985 001c 0CBF     		ite	eq
 2986 001e 0026     		moveq	r6, #0
 2987 0020 0126     		movne	r6, #1
 2988 0022 0BD0     		beq	.L524
 2989              		.loc 1 1347 0 is_stmt 0 discriminator 1
 2990 0024 4FF49042 		mov	r2, #18432
 2991 0028 4FF49843 		mov	r3, #19456
 2992 002c C4F20002 		movt	r2, 16384
 2993 0030 C4F20003 		movt	r3, 16384
 2994 0034 9042     		cmp	r0, r2
 2995 0036 18BF     		it	ne
 2996 0038 9842     		cmpne	r0, r3
 2997 003a 20D1     		bne	.L549
 2998              	.LVL249:
 2999              	.L524:
1348:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
 3000              		.loc 1 1348 0 is_stmt 1
 3001 003c 4FF69F41 		movw	r1, #64671
 3002 0040 2940     		ands	r1, r1, r5
 3003 0042 99B9     		cbnz	r1, .L525
 3004              		.loc 1 1348 0 is_stmt 0 discriminator 2
 3005 0044 95B1     		cbz	r5, .L525
 3006              	.L526:
1349:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1350:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1351:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
 3007              		.loc 1 1351 0 is_stmt 1
 3008 0046 AB05     		lsls	r3, r5, #22
 3009 0048 0CD5     		bpl	.L527
1352:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1353:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 3010              		.loc 1 1353 0
 3011 004a 5EB1     		cbz	r6, .L527
 3012              		.loc 1 1353 0 is_stmt 0 discriminator 1
 3013 004c 4FF49042 		mov	r2, #18432
 3014 0050 4FF4A053 		mov	r3, #5120
 3015 0054 C4F20002 		movt	r2, 16384
 3016 0058 C4F20103 		movt	r3, 16385
 3017 005c 9442     		cmp	r4, r2
 3018 005e 18BF     		it	ne
 3019 0060 9C42     		cmpne	r4, r3
 3020 0062 2DD1     		bne	.L550
 3021              	.L527:
1354:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1355:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        
1356:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 3022              		.loc 1 1356 0 is_stmt 1
 3023 0064 ED43     		mvns	r5, r5
 3024 0066 ADB2     		uxth	r5, r5
 3025 0068 2580     		strh	r5, [r4]	@ movhi
 3026 006a 70BD     		pop	{r4, r5, r6, pc}
 3027              	.LVL250:
 3028              	.L525:
1348:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 3029              		.loc 1 1348 0 discriminator 1
 3030 006c 40F20000 		movw	r0, #:lower16:.LC0
 3031 0070 C0F20000 		movt	r0, #:upper16:.LC0
 3032 0074 40F24451 		movw	r1, #1348
 3033 0078 FFF7FEFF 		bl	assert_failed
 3034              	.LVL251:
 3035 007c E3E7     		b	.L526
 3036              	.LVL252:
 3037              	.L549:
1347:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
 3038              		.loc 1 1347 0 discriminator 1
 3039 007e 4FF4A042 		mov	r2, #20480
 3040 0082 4FF4A053 		mov	r3, #5120
 3041 0086 C4F20002 		movt	r2, 16384
 3042 008a C4F20103 		movt	r3, 16385
 3043 008e 9042     		cmp	r0, r2
 3044 0090 18BF     		it	ne
 3045 0092 9842     		cmpne	r0, r3
 3046 0094 D2D0     		beq	.L524
 3047 0096 4FF4F042 		mov	r2, #30720
 3048 009a 4FF4F843 		mov	r3, #31744
 3049 009e C4F20002 		movt	r2, 16384
 3050 00a2 C4F20003 		movt	r3, 16384
 3051 00a6 9042     		cmp	r0, r2
 3052 00a8 18BF     		it	ne
 3053 00aa 9842     		cmpne	r0, r3
 3054 00ac C6D0     		beq	.L524
 3055 00ae 40F20000 		movw	r0, #:lower16:.LC0
 3056              	.LVL253:
 3057 00b2 C0F20000 		movt	r0, #:upper16:.LC0
 3058 00b6 40F24351 		movw	r1, #1347
 3059              	.LVL254:
 3060 00ba FFF7FEFF 		bl	assert_failed
 3061              	.LVL255:
 3062 00be BDE7     		b	.L524
 3063              	.L550:
1353:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
 3064              		.loc 1 1353 0 discriminator 1
 3065 00c0 40F20000 		movw	r0, #:lower16:.LC0
 3066              		.loc 1 1356 0 discriminator 1
 3067 00c4 ED43     		mvns	r5, r5
1353:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
 3068              		.loc 1 1353 0 discriminator 1
 3069 00c6 C0F20000 		movt	r0, #:upper16:.LC0
 3070 00ca 40F24951 		movw	r1, #1353
 3071              		.loc 1 1356 0 discriminator 1
 3072 00ce ADB2     		uxth	r5, r5
1353:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
 3073              		.loc 1 1353 0 discriminator 1
 3074 00d0 FFF7FEFF 		bl	assert_failed
 3075              	.LVL256:
 3076              		.loc 1 1356 0 discriminator 1
 3077 00d4 2580     		strh	r5, [r4]	@ movhi
 3078 00d6 70BD     		pop	{r4, r5, r6, pc}
 3079              		.cfi_endproc
 3080              	.LFE149:
 3082              		.section	.text.USART_GetITStatus,"ax",%progbits
 3083              		.align	2
 3084              		.global	USART_GetITStatus
 3085              		.thumb
 3086              		.thumb_func
 3088              	USART_GetITStatus:
 3089              	.LFB150:
1357:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1358:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1359:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1360:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1361:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1362:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1363:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1364:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1365:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1366:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1367:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1368:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1369:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1370:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1371:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_RX : OverRun Error interrupt if the RXNEIE bit is set
1372:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_ER : OverRun Error interrupt if the EIE bit is set  
1373:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1374:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1375:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1376:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1377:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1378:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1379:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 3090              		.loc 1 1379 0
 3091              		.cfi_startproc
 3092              		@ args = 0, pretend = 0, frame = 0
 3093              		@ frame_needed = 0, uses_anonymous_args = 0
 3094              	.LVL257:
1380:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
1381:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
1382:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1383:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 3095              		.loc 1 1383 0
 3096 0000 4FF48842 		mov	r2, #17408
 3097 0004 4FF48053 		mov	r3, #4096
 3098 0008 C4F20002 		movt	r2, 16384
 3099 000c C4F20103 		movt	r3, 16385
 3100 0010 9042     		cmp	r0, r2
 3101 0012 18BF     		it	ne
 3102 0014 9842     		cmpne	r0, r3
1379:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 3103              		.loc 1 1379 0
 3104 0016 70B5     		push	{r4, r5, r6, lr}
 3105              	.LCFI26:
 3106              		.cfi_def_cfa_offset 16
 3107              		.cfi_offset 4, -16
 3108              		.cfi_offset 5, -12
 3109              		.cfi_offset 6, -8
 3110              		.cfi_offset 14, -4
1379:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 3111              		.loc 1 1379 0
 3112 0018 0446     		mov	r4, r0
 3113 001a 0D46     		mov	r5, r1
 3114              		.loc 1 1383 0
 3115 001c 0CBF     		ite	eq
 3116 001e 0026     		moveq	r6, #0
 3117 0020 0126     		movne	r6, #1
 3118 0022 0BD0     		beq	.L552
 3119              		.loc 1 1383 0 is_stmt 0 discriminator 1
 3120 0024 4FF49040 		mov	r0, #18432
 3121              	.LVL258:
 3122 0028 4FF49841 		mov	r1, #19456
 3123              	.LVL259:
 3124 002c C4F20000 		movt	r0, 16384
 3125 0030 C4F20001 		movt	r1, 16384
 3126 0034 8442     		cmp	r4, r0
 3127 0036 18BF     		it	ne
 3128 0038 8C42     		cmpne	r4, r1
 3129 003a 51D1     		bne	.L592
 3130              	.L552:
1384:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
 3131              		.loc 1 1384 0 is_stmt 1
 3132 003c 40F22771 		movw	r1, #1831
 3133 0040 282D     		cmp	r5, #40
 3134 0042 18BF     		it	ne
 3135 0044 8D42     		cmpne	r5, r1
 3136 0046 07D0     		beq	.L553
 3137              		.loc 1 1384 0 is_stmt 0 discriminator 1
 3138 0048 40F22662 		movw	r2, #1574
 3139 004c 40F22553 		movw	r3, #1317
 3140 0050 9542     		cmp	r5, r2
 3141 0052 18BF     		it	ne
 3142 0054 9D42     		cmpne	r5, r3
 3143 0056 21D1     		bne	.L593
 3144              	.L553:
1385:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1386:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1387:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
 3145              		.loc 1 1387 0 is_stmt 1
 3146 0058 40F66A11 		movw	r1, #2410
 3147 005c 8D42     		cmp	r5, r1
 3148 005e 64D0     		beq	.L554
 3149              	.L556:
1388:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1389:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1390:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1391:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1392:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1393:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
1394:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1395:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
1396:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 3150              		.loc 1 1396 0
 3151 0060 0120     		movs	r0, #1
1393:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
 3152              		.loc 1 1393 0
 3153 0062 C5F34213 		ubfx	r3, r5, #5, #3
 3154              	.LVL260:
 3155              		.loc 1 1396 0
 3156 0066 05F01F02 		and	r2, r5, #31
1397:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1398:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 3157              		.loc 1 1398 0
 3158 006a 8342     		cmp	r3, r0
1396:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 3159              		.loc 1 1396 0
 3160 006c 00FA02F2 		lsl	r2, r0, r2
 3161              	.LVL261:
 3162              		.loc 1 1398 0
 3163 0070 57D0     		beq	.L594
1399:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1400:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
1401:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1402:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 3164              		.loc 1 1402 0
 3165 0072 022B     		cmp	r3, #2
 3166 0074 69D0     		beq	.L595
 3167              	.LVL262:
 3168              	.L560:
1403:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1404:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
1405:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1406:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1407:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1408:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 3169              		.loc 1 1408 0
 3170 0076 A08A     		ldrh	r0, [r4, #20]
 3171 0078 80B2     		uxth	r0, r0
 3172 007a 1040     		ands	r0, r0, r2
 3173              	.LVL263:
 3174              	.L559:
1409:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1410:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1411:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
1412:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
1413:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 3175              		.loc 1 1413 0
 3176 007c 2388     		ldrh	r3, [r4]
1412:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 3177              		.loc 1 1412 0
 3178 007e 0121     		movs	r1, #1
 3179 0080 2D0A     		lsrs	r5, r5, #8
 3180              	.LVL264:
 3181              		.loc 1 1413 0
 3182 0082 9BB2     		uxth	r3, r3
1412:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 3183              		.loc 1 1412 0
 3184 0084 01FA05F5 		lsl	r5, r1, r5
 3185              	.LVL265:
1414:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 3186              		.loc 1 1414 0
 3187 0088 1D42     		tst	r5, r3
 3188 008a 0CBF     		ite	eq
 3189 008c 0023     		moveq	r3, #0
 3190 008e 0123     		movne	r3, #1
 3191              	.LVL266:
1415:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1416:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
1417:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1418:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1419:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1420:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
1421:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1422:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1423:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;  
 3192              		.loc 1 1423 0
 3193 0090 0028     		cmp	r0, #0
 3194 0092 0CBF     		ite	eq
 3195 0094 0020     		moveq	r0, #0
 3196 0096 03F00100 		andne	r0, r3, #1
 3197              	.LVL267:
 3198 009a 70BD     		pop	{r4, r5, r6, pc}
 3199              	.LVL268:
 3200              	.L593:
1384:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 3201              		.loc 1 1384 0 discriminator 1
 3202 009c 40F22442 		movw	r2, #1060
 3203 00a0 40F64603 		movw	r3, #2118
 3204 00a4 9542     		cmp	r5, r2
 3205 00a6 18BF     		it	ne
 3206 00a8 9D42     		cmpne	r5, r3
 3207 00aa D5D0     		beq	.L553
 3208 00ac 03F59273 		add	r3, r3, #292
 3209 00b0 9D42     		cmp	r5, r3
 3210 00b2 3AD0     		beq	.L554
 3211 00b4 40F22533 		movw	r3, #805
 3212 00b8 9D42     		cmp	r5, r3
 3213 00ba D1D0     		beq	.L556
 3214 00bc 4FF6FF53 		movw	r3, #65023
 3215 00c0 2B40     		ands	r3, r3, r5
 3216 00c2 B5F5187F 		cmp	r5, #608
 3217 00c6 18BF     		it	ne
 3218 00c8 B3F5B07F 		cmpne	r3, #352
 3219 00cc C8D0     		beq	.L556
 3220 00ce 40F20000 		movw	r0, #:lower16:.LC0
 3221 00d2 C0F20000 		movt	r0, #:upper16:.LC0
 3222 00d6 4FF4AD61 		mov	r1, #1384
 3223 00da FFF7FEFF 		bl	assert_failed
 3224              	.LVL269:
 3225 00de BFE7     		b	.L556
 3226              	.L592:
1383:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
 3227              		.loc 1 1383 0 discriminator 1
 3228 00e0 4FF4A042 		mov	r2, #20480
 3229 00e4 4FF4A053 		mov	r3, #5120
 3230 00e8 C4F20002 		movt	r2, 16384
 3231 00ec C4F20103 		movt	r3, 16385
 3232 00f0 9442     		cmp	r4, r2
 3233 00f2 18BF     		it	ne
 3234 00f4 9C42     		cmpne	r4, r3
 3235 00f6 A1D0     		beq	.L552
 3236 00f8 4FF4F042 		mov	r2, #30720
 3237 00fc 4FF4F843 		mov	r3, #31744
 3238 0100 C4F20002 		movt	r2, 16384
 3239 0104 C4F20003 		movt	r3, 16384
 3240 0108 9442     		cmp	r4, r2
 3241 010a 18BF     		it	ne
 3242 010c 9C42     		cmpne	r4, r3
 3243 010e 95D0     		beq	.L552
 3244 0110 40F20000 		movw	r0, #:lower16:.LC0
 3245 0114 C0F20000 		movt	r0, #:upper16:.LC0
 3246 0118 40F26751 		movw	r1, #1383
 3247 011c FFF7FEFF 		bl	assert_failed
 3248              	.LVL270:
 3249 0120 8CE7     		b	.L552
 3250              	.LVL271:
 3251              	.L594:
1400:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 3252              		.loc 1 1400 0
 3253 0122 A089     		ldrh	r0, [r4, #12]
 3254 0124 80B2     		uxth	r0, r0
 3255 0126 1040     		ands	r0, r0, r2
 3256              	.LVL272:
 3257 0128 A8E7     		b	.L559
 3258              	.LVL273:
 3259              	.L554:
1389:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
 3260              		.loc 1 1389 0
 3261 012a 5EB1     		cbz	r6, .L557
1389:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
 3262              		.loc 1 1389 0 is_stmt 0 discriminator 1
 3263 012c 4FF49042 		mov	r2, #18432
 3264 0130 4FF4A053 		mov	r3, #5120
 3265 0134 C4F20002 		movt	r2, 16384
 3266 0138 C4F20103 		movt	r3, 16385
 3267 013c 9442     		cmp	r4, r2
 3268 013e 18BF     		it	ne
 3269 0140 9C42     		cmpne	r4, r3
 3270 0142 06D1     		bne	.L596
 3271              	.L557:
 3272              	.LVL274:
1396:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 3273              		.loc 1 1396 0 is_stmt 1
 3274 0144 4FF48062 		mov	r2, #1024
 3275 0148 95E7     		b	.L560
 3276              	.LVL275:
 3277              	.L595:
1404:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 3278              		.loc 1 1404 0
 3279 014a 208A     		ldrh	r0, [r4, #16]
 3280 014c 80B2     		uxth	r0, r0
 3281 014e 1040     		ands	r0, r0, r2
 3282              	.LVL276:
 3283 0150 94E7     		b	.L559
 3284              	.LVL277:
 3285              	.L596:
1389:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
 3286              		.loc 1 1389 0 discriminator 1
 3287 0152 40F20000 		movw	r0, #:lower16:.LC0
 3288 0156 C0F20000 		movt	r0, #:upper16:.LC0
 3289 015a 40F26D51 		movw	r1, #1389
 3290 015e FFF7FEFF 		bl	assert_failed
 3291              	.LVL278:
 3292 0162 EFE7     		b	.L557
 3293              		.cfi_endproc
 3294              	.LFE150:
 3296              		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 3297              		.align	2
 3298              		.global	USART_ClearITPendingBit
 3299              		.thumb
 3300              		.thumb_func
 3302              	USART_ClearITPendingBit:
 3303              	.LFB151:
1424:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1425:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1426:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1427:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1428:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1429:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1430:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1431:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1432:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1433:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1434:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1435:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1436:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
1437:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1438:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1439:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1440:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1441:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1442:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1443:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1444:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1445:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1446:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1447:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1448:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1449:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  
1450:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1451:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1452:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1453:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 3304              		.loc 1 1453 0
 3305              		.cfi_startproc
 3306              		@ args = 0, pretend = 0, frame = 0
 3307              		@ frame_needed = 0, uses_anonymous_args = 0
 3308              	.LVL279:
1454:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
1455:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1456:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 3309              		.loc 1 1456 0
 3310 0000 4FF48842 		mov	r2, #17408
 3311 0004 4FF48053 		mov	r3, #4096
 3312 0008 C4F20002 		movt	r2, 16384
 3313 000c C4F20103 		movt	r3, 16385
 3314 0010 9042     		cmp	r0, r2
 3315 0012 18BF     		it	ne
 3316 0014 9842     		cmpne	r0, r3
1453:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
 3317              		.loc 1 1453 0
 3318 0016 70B5     		push	{r4, r5, r6, lr}
 3319              	.LCFI27:
 3320              		.cfi_def_cfa_offset 16
 3321              		.cfi_offset 4, -16
 3322              		.cfi_offset 5, -12
 3323              		.cfi_offset 6, -8
 3324              		.cfi_offset 14, -4
1453:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
 3325              		.loc 1 1453 0
 3326 0018 0446     		mov	r4, r0
 3327 001a 0D46     		mov	r5, r1
 3328              		.loc 1 1456 0
 3329 001c 0CBF     		ite	eq
 3330 001e 0026     		moveq	r6, #0
 3331 0020 0126     		movne	r6, #1
 3332 0022 0BD0     		beq	.L598
 3333              		.loc 1 1456 0 is_stmt 0 discriminator 1
 3334 0024 4FF49040 		mov	r0, #18432
 3335              	.LVL280:
 3336 0028 4FF49841 		mov	r1, #19456
 3337              	.LVL281:
 3338 002c C4F20000 		movt	r0, 16384
 3339 0030 C4F20001 		movt	r1, 16384
 3340 0034 8442     		cmp	r4, r0
 3341 0036 18BF     		it	ne
 3342 0038 8C42     		cmpne	r4, r1
 3343 003a 1BD1     		bne	.L625
 3344              	.L598:
1457:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
 3345              		.loc 1 1457 0 is_stmt 1
 3346 003c 40F22660 		movw	r0, #1574
 3347 0040 40F22551 		movw	r1, #1317
 3348 0044 8542     		cmp	r5, r0
 3349 0046 18BF     		it	ne
 3350 0048 8D42     		cmpne	r5, r1
 3351 004a 07D0     		beq	.L599
 3352              		.loc 1 1457 0 is_stmt 0 discriminator 1
 3353 004c 40F64602 		movw	r2, #2118
 3354 0050 40F66A13 		movw	r3, #2410
 3355 0054 9542     		cmp	r5, r2
 3356 0056 18BF     		it	ne
 3357 0058 9D42     		cmpne	r5, r3
 3358 005a 43D1     		bne	.L626
 3359              	.L599:
1458:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1459:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1460:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
 3360              		.loc 1 1460 0 is_stmt 1
 3361 005c 40F66A11 		movw	r1, #2410
 3362 0060 8D42     		cmp	r5, r1
 3363 0062 28D0     		beq	.L627
 3364              	.L600:
 3365              	.LVL282:
1461:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1462:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1463:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1464:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1465:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
1466:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 3366              		.loc 1 1466 0
 3367 0064 2D0A     		lsrs	r5, r5, #8
 3368              	.LVL283:
 3369 0066 0123     		movs	r3, #1
 3370 0068 03FA05F5 		lsl	r5, r3, r5
1467:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 3371              		.loc 1 1467 0
 3372 006c ED43     		mvns	r5, r5
 3373 006e ADB2     		uxth	r5, r5
 3374 0070 2580     		strh	r5, [r4]	@ movhi
 3375 0072 70BD     		pop	{r4, r5, r6, pc}
 3376              	.LVL284:
 3377              	.L625:
1456:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
 3378              		.loc 1 1456 0 discriminator 1
 3379 0074 4FF4A042 		mov	r2, #20480
 3380 0078 4FF4A053 		mov	r3, #5120
 3381 007c C4F20002 		movt	r2, 16384
 3382 0080 C4F20103 		movt	r3, 16385
 3383 0084 9442     		cmp	r4, r2
 3384 0086 18BF     		it	ne
 3385 0088 9C42     		cmpne	r4, r3
 3386 008a D7D0     		beq	.L598
 3387 008c 4FF4F042 		mov	r2, #30720
 3388 0090 4FF4F843 		mov	r3, #31744
 3389 0094 C4F20002 		movt	r2, 16384
 3390 0098 C4F20003 		movt	r3, 16384
 3391 009c 9442     		cmp	r4, r2
 3392 009e 18BF     		it	ne
 3393 00a0 9C42     		cmpne	r4, r3
 3394 00a2 CBD0     		beq	.L598
 3395 00a4 40F20000 		movw	r0, #:lower16:.LC0
 3396 00a8 C0F20000 		movt	r0, #:upper16:.LC0
 3397 00ac 4FF4B661 		mov	r1, #1456
 3398 00b0 FFF7FEFF 		bl	assert_failed
 3399              	.LVL285:
 3400 00b4 C2E7     		b	.L598
 3401              	.L627:
1462:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
 3402              		.loc 1 1462 0
 3403 00b6 002E     		cmp	r6, #0
 3404 00b8 D4D0     		beq	.L600
1462:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
 3405              		.loc 1 1462 0 is_stmt 0 discriminator 1
 3406 00ba 4FF49042 		mov	r2, #18432
 3407 00be 4FF4A053 		mov	r3, #5120
 3408 00c2 C4F20002 		movt	r2, 16384
 3409 00c6 C4F20103 		movt	r3, 16385
 3410 00ca 9442     		cmp	r4, r2
 3411 00cc 18BF     		it	ne
 3412 00ce 9C42     		cmpne	r4, r3
 3413 00d0 C8D0     		beq	.L600
 3414 00d2 40F20000 		movw	r0, #:lower16:.LC0
 3415 00d6 C0F20000 		movt	r0, #:upper16:.LC0
 3416 00da A1F56D71 		sub	r1, r1, #948
 3417 00de FFF7FEFF 		bl	assert_failed
 3418              	.LVL286:
 3419 00e2 BFE7     		b	.L600
 3420              	.L626:
1457:Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 3421              		.loc 1 1457 0 is_stmt 1 discriminator 1
 3422 00e4 40F20000 		movw	r0, #:lower16:.LC0
 3423 00e8 C0F20000 		movt	r0, #:upper16:.LC0
 3424 00ec 8C31     		adds	r1, r1, #140
 3425 00ee FFF7FEFF 		bl	assert_failed
 3426              	.LVL287:
 3427 00f2 B3E7     		b	.L599
 3428              		.cfi_endproc
 3429              	.LFE151:
 3431              		.section	.rodata.str1.4,"aMS",%progbits,1
 3432              		.align	2
 3433              	.LC0:
 3434 0000 4C696272 		.ascii	"Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_"
 3434      61726965 
 3434      732F5354 
 3434      4D333246 
 3434      3478785F 
 3435 0033 75736172 		.ascii	"usart.c\000"
 3435      742E6300 
 3436 003b 00       		.text
 3437              	.Letext0:
 3438              		.file 2 "/opt/toolchains/eabi/arm-2014.05/arm-none-eabi/include/stdint.h"
 3439              		.file 3 "inc/stm32f4xx.h"
 3440              		.file 4 "Libraries/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 3441              		.file 5 "Libraries/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h"
 3442              		.file 6 "inc/stm32f4xx_conf.h"
 3443              		.file 7 "Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_usart.c
     /tmp/cc6ZJBRC.s:21     .text.USART_DeInit:00000000 $t
     /tmp/cc6ZJBRC.s:26     .text.USART_DeInit:00000000 USART_DeInit
     /tmp/cc6ZJBRC.s:3433   .rodata.str1.4:00000000 .LC0
     /tmp/cc6ZJBRC.s:256    .text.USART_Init:00000000 $t
     /tmp/cc6ZJBRC.s:261    .text.USART_Init:00000000 USART_Init
     /tmp/cc6ZJBRC.s:620    .text.USART_StructInit:00000000 $t
     /tmp/cc6ZJBRC.s:625    .text.USART_StructInit:00000000 USART_StructInit
     /tmp/cc6ZJBRC.s:656    .text.USART_ClockInit:00000000 $t
     /tmp/cc6ZJBRC.s:661    .text.USART_ClockInit:00000000 USART_ClockInit
     /tmp/cc6ZJBRC.s:804    .text.USART_ClockStructInit:00000000 $t
     /tmp/cc6ZJBRC.s:809    .text.USART_ClockStructInit:00000000 USART_ClockStructInit
     /tmp/cc6ZJBRC.s:831    .text.USART_Cmd:00000000 $t
     /tmp/cc6ZJBRC.s:836    .text.USART_Cmd:00000000 USART_Cmd
     /tmp/cc6ZJBRC.s:932    .text.USART_SetPrescaler:00000000 $t
     /tmp/cc6ZJBRC.s:937    .text.USART_SetPrescaler:00000000 USART_SetPrescaler
     /tmp/cc6ZJBRC.s:1016   .text.USART_OverSampling8Cmd:00000000 $t
     /tmp/cc6ZJBRC.s:1021   .text.USART_OverSampling8Cmd:00000000 USART_OverSampling8Cmd
     /tmp/cc6ZJBRC.s:1116   .text.USART_OneBitMethodCmd:00000000 $t
     /tmp/cc6ZJBRC.s:1121   .text.USART_OneBitMethodCmd:00000000 USART_OneBitMethodCmd
     /tmp/cc6ZJBRC.s:1217   .text.USART_SendData:00000000 $t
     /tmp/cc6ZJBRC.s:1222   .text.USART_SendData:00000000 USART_SendData
     /tmp/cc6ZJBRC.s:1305   .text.USART_ReceiveData:00000000 $t
     /tmp/cc6ZJBRC.s:1310   .text.USART_ReceiveData:00000000 USART_ReceiveData
     /tmp/cc6ZJBRC.s:1381   .text.USART_SetAddress:00000000 $t
     /tmp/cc6ZJBRC.s:1386   .text.USART_SetAddress:00000000 USART_SetAddress
     /tmp/cc6ZJBRC.s:1477   .text.USART_ReceiverWakeUpCmd:00000000 $t
     /tmp/cc6ZJBRC.s:1482   .text.USART_ReceiverWakeUpCmd:00000000 USART_ReceiverWakeUpCmd
     /tmp/cc6ZJBRC.s:1578   .text.USART_WakeUpConfig:00000000 $t
     /tmp/cc6ZJBRC.s:1583   .text.USART_WakeUpConfig:00000000 USART_WakeUpConfig
     /tmp/cc6ZJBRC.s:1675   .text.USART_LINBreakDetectLengthConfig:00000000 $t
     /tmp/cc6ZJBRC.s:1680   .text.USART_LINBreakDetectLengthConfig:00000000 USART_LINBreakDetectLengthConfig
     /tmp/cc6ZJBRC.s:1772   .text.USART_LINCmd:00000000 $t
     /tmp/cc6ZJBRC.s:1777   .text.USART_LINCmd:00000000 USART_LINCmd
     /tmp/cc6ZJBRC.s:1873   .text.USART_SendBreak:00000000 $t
     /tmp/cc6ZJBRC.s:1878   .text.USART_SendBreak:00000000 USART_SendBreak
     /tmp/cc6ZJBRC.s:1950   .text.USART_HalfDuplexCmd:00000000 $t
     /tmp/cc6ZJBRC.s:1955   .text.USART_HalfDuplexCmd:00000000 USART_HalfDuplexCmd
     /tmp/cc6ZJBRC.s:2051   .text.USART_SetGuardTime:00000000 $t
     /tmp/cc6ZJBRC.s:2056   .text.USART_SetGuardTime:00000000 USART_SetGuardTime
     /tmp/cc6ZJBRC.s:2119   .text.USART_SmartCardCmd:00000000 $t
     /tmp/cc6ZJBRC.s:2124   .text.USART_SmartCardCmd:00000000 USART_SmartCardCmd
     /tmp/cc6ZJBRC.s:2205   .text.USART_SmartCardNACKCmd:00000000 $t
     /tmp/cc6ZJBRC.s:2210   .text.USART_SmartCardNACKCmd:00000000 USART_SmartCardNACKCmd
     /tmp/cc6ZJBRC.s:2291   .text.USART_IrDAConfig:00000000 $t
     /tmp/cc6ZJBRC.s:2296   .text.USART_IrDAConfig:00000000 USART_IrDAConfig
     /tmp/cc6ZJBRC.s:2388   .text.USART_IrDACmd:00000000 $t
     /tmp/cc6ZJBRC.s:2393   .text.USART_IrDACmd:00000000 USART_IrDACmd
     /tmp/cc6ZJBRC.s:2489   .text.USART_DMACmd:00000000 $t
     /tmp/cc6ZJBRC.s:2494   .text.USART_DMACmd:00000000 USART_DMACmd
     /tmp/cc6ZJBRC.s:2611   .text.USART_ITConfig:00000000 $t
     /tmp/cc6ZJBRC.s:2616   .text.USART_ITConfig:00000000 USART_ITConfig
     /tmp/cc6ZJBRC.s:2814   .text.USART_GetFlagStatus:00000000 $t
     /tmp/cc6ZJBRC.s:2819   .text.USART_GetFlagStatus:00000000 USART_GetFlagStatus
     /tmp/cc6ZJBRC.s:2953   .text.USART_ClearFlag:00000000 $t
     /tmp/cc6ZJBRC.s:2958   .text.USART_ClearFlag:00000000 USART_ClearFlag
     /tmp/cc6ZJBRC.s:3083   .text.USART_GetITStatus:00000000 $t
     /tmp/cc6ZJBRC.s:3088   .text.USART_GetITStatus:00000000 USART_GetITStatus
     /tmp/cc6ZJBRC.s:3297   .text.USART_ClearITPendingBit:00000000 $t
     /tmp/cc6ZJBRC.s:3302   .text.USART_ClearITPendingBit:00000000 USART_ClearITPendingBit
     /tmp/cc6ZJBRC.s:3432   .rodata.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
assert_failed
RCC_APB2PeriphResetCmd
RCC_GetClocksFreq
