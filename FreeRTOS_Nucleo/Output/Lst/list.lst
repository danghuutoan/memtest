   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"list.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.vListInitialise,"ax",%progbits
  21              		.align	2
  22              		.global	vListInitialise
  23              		.thumb
  24              		.thumb_func
  26              	vListInitialise:
  27              	.LFB123:
  28              		.file 1 "Libraries/FreeRTOS/Source/list.c"
   1:Libraries/FreeRTOS/Source/list.c **** /*
   2:Libraries/FreeRTOS/Source/list.c ****     FreeRTOS V8.0.1 - Copyright (C) 2014 Real Time Engineers Ltd.
   3:Libraries/FreeRTOS/Source/list.c ****     All rights reserved
   4:Libraries/FreeRTOS/Source/list.c **** 
   5:Libraries/FreeRTOS/Source/list.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Libraries/FreeRTOS/Source/list.c **** 
   7:Libraries/FreeRTOS/Source/list.c ****     ***************************************************************************
   8:Libraries/FreeRTOS/Source/list.c ****      *                                                                       *
   9:Libraries/FreeRTOS/Source/list.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:Libraries/FreeRTOS/Source/list.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:Libraries/FreeRTOS/Source/list.c ****      *    platform software that has become a de facto standard.             *
  12:Libraries/FreeRTOS/Source/list.c ****      *                                                                       *
  13:Libraries/FreeRTOS/Source/list.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:Libraries/FreeRTOS/Source/list.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:Libraries/FreeRTOS/Source/list.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:Libraries/FreeRTOS/Source/list.c ****      *                                                                       *
  17:Libraries/FreeRTOS/Source/list.c ****      *    Thank you!                                                         *
  18:Libraries/FreeRTOS/Source/list.c ****      *                                                                       *
  19:Libraries/FreeRTOS/Source/list.c ****     ***************************************************************************
  20:Libraries/FreeRTOS/Source/list.c **** 
  21:Libraries/FreeRTOS/Source/list.c ****     This file is part of the FreeRTOS distribution.
  22:Libraries/FreeRTOS/Source/list.c **** 
  23:Libraries/FreeRTOS/Source/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:Libraries/FreeRTOS/Source/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:Libraries/FreeRTOS/Source/list.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:Libraries/FreeRTOS/Source/list.c **** 
  27:Libraries/FreeRTOS/Source/list.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  28:Libraries/FreeRTOS/Source/list.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  29:Libraries/FreeRTOS/Source/list.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  30:Libraries/FreeRTOS/Source/list.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  31:Libraries/FreeRTOS/Source/list.c **** 
  32:Libraries/FreeRTOS/Source/list.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:Libraries/FreeRTOS/Source/list.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:Libraries/FreeRTOS/Source/list.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:Libraries/FreeRTOS/Source/list.c ****     link: http://www.freertos.org/a00114.html
  36:Libraries/FreeRTOS/Source/list.c **** 
  37:Libraries/FreeRTOS/Source/list.c ****     1 tab == 4 spaces!
  38:Libraries/FreeRTOS/Source/list.c **** 
  39:Libraries/FreeRTOS/Source/list.c ****     ***************************************************************************
  40:Libraries/FreeRTOS/Source/list.c ****      *                                                                       *
  41:Libraries/FreeRTOS/Source/list.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:Libraries/FreeRTOS/Source/list.c ****      *    not run, what could be wrong?"                                     *
  43:Libraries/FreeRTOS/Source/list.c ****      *                                                                       *
  44:Libraries/FreeRTOS/Source/list.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:Libraries/FreeRTOS/Source/list.c ****      *                                                                       *
  46:Libraries/FreeRTOS/Source/list.c ****     ***************************************************************************
  47:Libraries/FreeRTOS/Source/list.c **** 
  48:Libraries/FreeRTOS/Source/list.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:Libraries/FreeRTOS/Source/list.c ****     license and Real Time Engineers Ltd. contact details.
  50:Libraries/FreeRTOS/Source/list.c **** 
  51:Libraries/FreeRTOS/Source/list.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:Libraries/FreeRTOS/Source/list.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:Libraries/FreeRTOS/Source/list.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:Libraries/FreeRTOS/Source/list.c **** 
  55:Libraries/FreeRTOS/Source/list.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:Libraries/FreeRTOS/Source/list.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:Libraries/FreeRTOS/Source/list.c ****     licenses offer ticketed support, indemnification and middleware.
  58:Libraries/FreeRTOS/Source/list.c **** 
  59:Libraries/FreeRTOS/Source/list.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:Libraries/FreeRTOS/Source/list.c ****     engineered and independently SIL3 certified version for use in safety and
  61:Libraries/FreeRTOS/Source/list.c ****     mission critical applications that require provable dependability.
  62:Libraries/FreeRTOS/Source/list.c **** 
  63:Libraries/FreeRTOS/Source/list.c ****     1 tab == 4 spaces!
  64:Libraries/FreeRTOS/Source/list.c **** */
  65:Libraries/FreeRTOS/Source/list.c **** 
  66:Libraries/FreeRTOS/Source/list.c **** 
  67:Libraries/FreeRTOS/Source/list.c **** #include <stdlib.h>
  68:Libraries/FreeRTOS/Source/list.c **** #include "FreeRTOS.h"
  69:Libraries/FreeRTOS/Source/list.c **** #include "list.h"
  70:Libraries/FreeRTOS/Source/list.c **** 
  71:Libraries/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------
  72:Libraries/FreeRTOS/Source/list.c ****  * PUBLIC LIST API documented in list.h
  73:Libraries/FreeRTOS/Source/list.c ****  *----------------------------------------------------------*/
  74:Libraries/FreeRTOS/Source/list.c **** 
  75:Libraries/FreeRTOS/Source/list.c **** void vListInitialise( List_t * const pxList )
  76:Libraries/FreeRTOS/Source/list.c **** {
  29              		.loc 1 76 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  77:Libraries/FreeRTOS/Source/list.c **** 	/* The list structure contains a list item which is used to mark the
  78:Libraries/FreeRTOS/Source/list.c **** 	end of the list.  To initialise the list the list end is inserted
  79:Libraries/FreeRTOS/Source/list.c **** 	as the only list entry. */
  80:Libraries/FreeRTOS/Source/list.c **** 	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list struc
  35              		.loc 1 80 0
  36 0000 00F10803 		add	r3, r0, #8
  81:Libraries/FreeRTOS/Source/list.c **** 
  82:Libraries/FreeRTOS/Source/list.c **** 	/* The list end value is the highest possible value in the list to
  83:Libraries/FreeRTOS/Source/list.c **** 	ensure it remains at the end of the list. */
  84:Libraries/FreeRTOS/Source/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  37              		.loc 1 84 0
  38 0004 4FF0FF31 		mov	r1, #-1
  85:Libraries/FreeRTOS/Source/list.c **** 
  86:Libraries/FreeRTOS/Source/list.c **** 	/* The list end next and previous pointers point to itself so we know
  87:Libraries/FreeRTOS/Source/list.c **** 	when the list is empty. */
  88:Libraries/FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list
  89:Libraries/FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini l
  90:Libraries/FreeRTOS/Source/list.c **** 
  91:Libraries/FreeRTOS/Source/list.c **** 	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  39              		.loc 1 91 0
  40 0008 0022     		movs	r2, #0
  84:Libraries/FreeRTOS/Source/list.c **** 
  41              		.loc 1 84 0
  42 000a 8160     		str	r1, [r0, #8]
  80:Libraries/FreeRTOS/Source/list.c **** 
  43              		.loc 1 80 0
  44 000c 80E80C00 		stmia	r0, {r2, r3}
  88:Libraries/FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini l
  45              		.loc 1 88 0
  46 0010 C360     		str	r3, [r0, #12]
  89:Libraries/FreeRTOS/Source/list.c **** 
  47              		.loc 1 89 0
  48 0012 0361     		str	r3, [r0, #16]
  49 0014 7047     		bx	lr
  50              		.cfi_endproc
  51              	.LFE123:
  53 0016 00BF     		.section	.text.vListInitialiseItem,"ax",%progbits
  54              		.align	2
  55              		.global	vListInitialiseItem
  56              		.thumb
  57              		.thumb_func
  59              	vListInitialiseItem:
  60              	.LFB124:
  92:Libraries/FreeRTOS/Source/list.c **** }
  93:Libraries/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  94:Libraries/FreeRTOS/Source/list.c **** 
  95:Libraries/FreeRTOS/Source/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
  96:Libraries/FreeRTOS/Source/list.c **** {
  61              		.loc 1 96 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66              	.LVL1:
  97:Libraries/FreeRTOS/Source/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
  98:Libraries/FreeRTOS/Source/list.c **** 	pxItem->pvContainer = NULL;
  67              		.loc 1 98 0
  68 0000 0023     		movs	r3, #0
  69 0002 0361     		str	r3, [r0, #16]
  70 0004 7047     		bx	lr
  71              		.cfi_endproc
  72              	.LFE124:
  74 0006 00BF     		.section	.text.vListInsertEnd,"ax",%progbits
  75              		.align	2
  76              		.global	vListInsertEnd
  77              		.thumb
  78              		.thumb_func
  80              	vListInsertEnd:
  81              	.LFB125:
  99:Libraries/FreeRTOS/Source/list.c **** }
 100:Libraries/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 101:Libraries/FreeRTOS/Source/list.c **** 
 102:Libraries/FreeRTOS/Source/list.c **** void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
 103:Libraries/FreeRTOS/Source/list.c **** {
  82              		.loc 1 103 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86              		@ link register save eliminated.
  87              	.LVL2:
 104:Libraries/FreeRTOS/Source/list.c **** ListItem_t * const pxIndex = pxList->pxIndex;
  88              		.loc 1 104 0
  89 0000 4368     		ldr	r3, [r0, #4]
  90              	.LVL3:
 105:Libraries/FreeRTOS/Source/list.c **** 
 106:Libraries/FreeRTOS/Source/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
 107:Libraries/FreeRTOS/Source/list.c **** 	makes the new list item the last item to be removed by a call to
 108:Libraries/FreeRTOS/Source/list.c **** 	listGET_OWNER_OF_NEXT_ENTRY(). */
 109:Libraries/FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIndex;
 110:Libraries/FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  91              		.loc 1 110 0
  92 0002 9A68     		ldr	r2, [r3, #8]
 103:Libraries/FreeRTOS/Source/list.c **** ListItem_t * const pxIndex = pxList->pxIndex;
  93              		.loc 1 103 0
  94 0004 10B4     		push	{r4}
  95              	.LCFI0:
  96              		.cfi_def_cfa_offset 4
  97              		.cfi_offset 4, -4
 111:Libraries/FreeRTOS/Source/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
 112:Libraries/FreeRTOS/Source/list.c **** 	pxIndex->pxPrevious = pxNewListItem;
 113:Libraries/FreeRTOS/Source/list.c **** 
 114:Libraries/FreeRTOS/Source/list.c **** 	/* Remember which list the item is in. */
 115:Libraries/FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 116:Libraries/FreeRTOS/Source/list.c **** 
 117:Libraries/FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
  98              		.loc 1 117 0
  99 0006 0468     		ldr	r4, [r0]
 110:Libraries/FreeRTOS/Source/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
 100              		.loc 1 110 0
 101 0008 8A60     		str	r2, [r1, #8]
 111:Libraries/FreeRTOS/Source/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
 102              		.loc 1 111 0
 103 000a 9A68     		ldr	r2, [r3, #8]
 109:Libraries/FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 104              		.loc 1 109 0
 105 000c 4B60     		str	r3, [r1, #4]
 106              		.loc 1 117 0
 107 000e 0134     		adds	r4, r4, #1
 111:Libraries/FreeRTOS/Source/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
 108              		.loc 1 111 0
 109 0010 5160     		str	r1, [r2, #4]
 112:Libraries/FreeRTOS/Source/list.c **** 
 110              		.loc 1 112 0
 111 0012 9960     		str	r1, [r3, #8]
 115:Libraries/FreeRTOS/Source/list.c **** 
 112              		.loc 1 115 0
 113 0014 0861     		str	r0, [r1, #16]
 114              		.loc 1 117 0
 115 0016 0460     		str	r4, [r0]
 118:Libraries/FreeRTOS/Source/list.c **** }
 116              		.loc 1 118 0
 117 0018 5DF8044B 		ldr	r4, [sp], #4
 118 001c 7047     		bx	lr
 119              		.cfi_endproc
 120              	.LFE125:
 122 001e 00BF     		.section	.text.vListInsert,"ax",%progbits
 123              		.align	2
 124              		.global	vListInsert
 125              		.thumb
 126              		.thumb_func
 128              	vListInsert:
 129              	.LFB126:
 119:Libraries/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 120:Libraries/FreeRTOS/Source/list.c **** 
 121:Libraries/FreeRTOS/Source/list.c **** void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
 122:Libraries/FreeRTOS/Source/list.c **** {
 130              		.loc 1 122 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              		@ link register save eliminated.
 135              	.LVL4:
 136 0000 30B4     		push	{r4, r5}
 137              	.LCFI1:
 138              		.cfi_def_cfa_offset 8
 139              		.cfi_offset 4, -8
 140              		.cfi_offset 5, -4
 123:Libraries/FreeRTOS/Source/list.c **** ListItem_t *pxIterator;
 124:Libraries/FreeRTOS/Source/list.c **** const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 141              		.loc 1 124 0
 142 0002 0D68     		ldr	r5, [r1]
 143              	.LVL5:
 125:Libraries/FreeRTOS/Source/list.c **** 
 126:Libraries/FreeRTOS/Source/list.c **** 	/* Insert the new list item into the list, sorted in xItemValue order.
 127:Libraries/FreeRTOS/Source/list.c **** 
 128:Libraries/FreeRTOS/Source/list.c **** 	If the list already contains a list item with the same item value then
 129:Libraries/FreeRTOS/Source/list.c **** 	the new list item should be placed after it.  This ensures that TCB's which
 130:Libraries/FreeRTOS/Source/list.c **** 	are stored in ready lists (all of which have the same xItemValue value)
 131:Libraries/FreeRTOS/Source/list.c **** 	get an equal share of the CPU.  However, if the xItemValue is the same as
 132:Libraries/FreeRTOS/Source/list.c **** 	the back marker the iteration loop below will not end.  This means we need
 133:Libraries/FreeRTOS/Source/list.c **** 	to guard against this by checking the value first and modifying the
 134:Libraries/FreeRTOS/Source/list.c **** 	algorithm slightly if necessary. */
 135:Libraries/FreeRTOS/Source/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 144              		.loc 1 135 0
 145 0004 6B1C     		adds	r3, r5, #1
 136:Libraries/FreeRTOS/Source/list.c **** 	{
 137:Libraries/FreeRTOS/Source/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 138:Libraries/FreeRTOS/Source/list.c **** 	}
 139:Libraries/FreeRTOS/Source/list.c **** 	else
 140:Libraries/FreeRTOS/Source/list.c **** 	{
 141:Libraries/FreeRTOS/Source/list.c **** 		/* *** NOTE ***********************************************************
 142:Libraries/FreeRTOS/Source/list.c **** 		If you find your application is crashing here then likely causes are:
 143:Libraries/FreeRTOS/Source/list.c **** 			1) Stack overflow -
 144:Libraries/FreeRTOS/Source/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 145:Libraries/FreeRTOS/Source/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M3
 146:Libraries/FreeRTOS/Source/list.c **** 			   parts where numerically high priority values denote low actual
 147:Libraries/FreeRTOS/Source/list.c **** 			   interrupt priories, which can seem counter intuitive.  See
 148:Libraries/FreeRTOS/Source/list.c **** 			   configMAX_SYSCALL_INTERRUPT_PRIORITY on http://www.freertos.org/a00110.html
 149:Libraries/FreeRTOS/Source/list.c **** 			3) Calling an API function from within a critical section or when
 150:Libraries/FreeRTOS/Source/list.c **** 			   the scheduler is suspended, or calling an API function that does
 151:Libraries/FreeRTOS/Source/list.c **** 			   not end in "FromISR" from an interrupt.
 152:Libraries/FreeRTOS/Source/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 153:Libraries/FreeRTOS/Source/list.c **** 			   before the scheduler has been started (are interrupts firing
 154:Libraries/FreeRTOS/Source/list.c **** 			   before vTaskStartScheduler() has been called?).
 155:Libraries/FreeRTOS/Source/list.c **** 		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
 156:Libraries/FreeRTOS/Source/list.c **** 		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
 157:Libraries/FreeRTOS/Source/list.c **** 		**********************************************************************/
 158:Libraries/FreeRTOS/Source/list.c **** 
 159:Libraries/FreeRTOS/Source/list.c **** 		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValu
 146              		.loc 1 159 0
 147 0006 18BF     		it	ne
 148 0008 00F10802 		addne	r2, r0, #8
 135:Libraries/FreeRTOS/Source/list.c **** 	{
 149              		.loc 1 135 0
 150 000c 01D1     		bne	.L7
 151 000e 0EE0     		b	.L12
 152              	.LVL6:
 153              	.L11:
 154 0010 1A46     		mov	r2, r3
 155              	.LVL7:
 156              	.L7:
 157              		.loc 1 159 0 discriminator 1
 158 0012 5368     		ldr	r3, [r2, #4]
 159 0014 1C68     		ldr	r4, [r3]
 160 0016 A542     		cmp	r5, r4
 161 0018 FAD2     		bcs	.L11
 162              	.L6:
 160:Libraries/FreeRTOS/Source/list.c **** 		{
 161:Libraries/FreeRTOS/Source/list.c **** 			/* There is nothing to do here, we are just iterating to the
 162:Libraries/FreeRTOS/Source/list.c **** 			wanted insertion position. */
 163:Libraries/FreeRTOS/Source/list.c **** 		}
 164:Libraries/FreeRTOS/Source/list.c **** 	}
 165:Libraries/FreeRTOS/Source/list.c **** 
 166:Libraries/FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 167:Libraries/FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 168:Libraries/FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 169:Libraries/FreeRTOS/Source/list.c **** 	pxIterator->pxNext = pxNewListItem;
 170:Libraries/FreeRTOS/Source/list.c **** 
 171:Libraries/FreeRTOS/Source/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 172:Libraries/FreeRTOS/Source/list.c **** 	item later. */
 173:Libraries/FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 174:Libraries/FreeRTOS/Source/list.c **** 
 175:Libraries/FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 163              		.loc 1 175 0
 164 001a 0468     		ldr	r4, [r0]
 166:Libraries/FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 165              		.loc 1 166 0
 166 001c 4B60     		str	r3, [r1, #4]
 167              		.loc 1 175 0
 168 001e 0134     		adds	r4, r4, #1
 167:Libraries/FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 169              		.loc 1 167 0
 170 0020 9960     		str	r1, [r3, #8]
 168:Libraries/FreeRTOS/Source/list.c **** 	pxIterator->pxNext = pxNewListItem;
 171              		.loc 1 168 0
 172 0022 8A60     		str	r2, [r1, #8]
 169:Libraries/FreeRTOS/Source/list.c **** 
 173              		.loc 1 169 0
 174 0024 5160     		str	r1, [r2, #4]
 173:Libraries/FreeRTOS/Source/list.c **** 
 175              		.loc 1 173 0
 176 0026 0861     		str	r0, [r1, #16]
 177              		.loc 1 175 0
 178 0028 0460     		str	r4, [r0]
 176:Libraries/FreeRTOS/Source/list.c **** }
 179              		.loc 1 176 0
 180 002a 30BC     		pop	{r4, r5}
 181              	.LVL8:
 182 002c 7047     		bx	lr
 183              	.LVL9:
 184              	.L12:
 137:Libraries/FreeRTOS/Source/list.c **** 	}
 185              		.loc 1 137 0
 186 002e 0269     		ldr	r2, [r0, #16]
 187              	.LVL10:
 188 0030 5368     		ldr	r3, [r2, #4]
 189 0032 F2E7     		b	.L6
 190              		.cfi_endproc
 191              	.LFE126:
 193              		.section	.text.uxListRemove,"ax",%progbits
 194              		.align	2
 195              		.global	uxListRemove
 196              		.thumb
 197              		.thumb_func
 199              	uxListRemove:
 200              	.LFB127:
 177:Libraries/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 178:Libraries/FreeRTOS/Source/list.c **** 
 179:Libraries/FreeRTOS/Source/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 180:Libraries/FreeRTOS/Source/list.c **** {
 201              		.loc 1 180 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 206              	.LVL11:
 181:Libraries/FreeRTOS/Source/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 182:Libraries/FreeRTOS/Source/list.c **** item. */
 183:Libraries/FreeRTOS/Source/list.c **** List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 184:Libraries/FreeRTOS/Source/list.c **** 
 185:Libraries/FreeRTOS/Source/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 207              		.loc 1 185 0
 208 0000 4268     		ldr	r2, [r0, #4]
 209 0002 8168     		ldr	r1, [r0, #8]
 183:Libraries/FreeRTOS/Source/list.c **** 
 210              		.loc 1 183 0
 211 0004 0369     		ldr	r3, [r0, #16]
 212              	.LVL12:
 180:Libraries/FreeRTOS/Source/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 213              		.loc 1 180 0
 214 0006 10B4     		push	{r4}
 215              	.LCFI2:
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 4, -4
 218              		.loc 1 185 0
 219 0008 9160     		str	r1, [r2, #8]
 186:Libraries/FreeRTOS/Source/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 220              		.loc 1 186 0
 221 000a 8168     		ldr	r1, [r0, #8]
 187:Libraries/FreeRTOS/Source/list.c **** 
 188:Libraries/FreeRTOS/Source/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 189:Libraries/FreeRTOS/Source/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 222              		.loc 1 189 0
 223 000c 5C68     		ldr	r4, [r3, #4]
 186:Libraries/FreeRTOS/Source/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 224              		.loc 1 186 0
 225 000e 4A60     		str	r2, [r1, #4]
 190:Libraries/FreeRTOS/Source/list.c **** 	{
 191:Libraries/FreeRTOS/Source/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 192:Libraries/FreeRTOS/Source/list.c **** 	}
 193:Libraries/FreeRTOS/Source/list.c **** 	else
 194:Libraries/FreeRTOS/Source/list.c **** 	{
 195:Libraries/FreeRTOS/Source/list.c **** 		mtCOVERAGE_TEST_MARKER();
 196:Libraries/FreeRTOS/Source/list.c **** 	}
 197:Libraries/FreeRTOS/Source/list.c **** 
 198:Libraries/FreeRTOS/Source/list.c **** 	pxItemToRemove->pvContainer = NULL;
 199:Libraries/FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )--;
 226              		.loc 1 199 0
 227 0010 1A68     		ldr	r2, [r3]
 189:Libraries/FreeRTOS/Source/list.c **** 	{
 228              		.loc 1 189 0
 229 0012 8442     		cmp	r4, r0
 191:Libraries/FreeRTOS/Source/list.c **** 	}
 230              		.loc 1 191 0
 231 0014 08BF     		it	eq
 232 0016 5960     		streq	r1, [r3, #4]
 233              		.loc 1 199 0
 234 0018 013A     		subs	r2, r2, #1
 198:Libraries/FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )--;
 235              		.loc 1 198 0
 236 001a 0021     		movs	r1, #0
 237 001c 0161     		str	r1, [r0, #16]
 200:Libraries/FreeRTOS/Source/list.c **** 
 201:Libraries/FreeRTOS/Source/list.c **** 	return pxList->uxNumberOfItems;
 202:Libraries/FreeRTOS/Source/list.c **** }
 238              		.loc 1 202 0
 239 001e 5DF8044B 		ldr	r4, [sp], #4
 199:Libraries/FreeRTOS/Source/list.c **** 
 240              		.loc 1 199 0
 241 0022 1A60     		str	r2, [r3]
 242              		.loc 1 202 0
 243 0024 1046     		mov	r0, r2
 244              	.LVL13:
 245 0026 7047     		bx	lr
 246              		.cfi_endproc
 247              	.LFE127:
 249              		.text
 250              	.Letext0:
 251              		.file 2 "/opt/toolchains/eabi/arm-2014.05/arm-none-eabi/include/stdint.h"
 252              		.file 3 "Libraries/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 253              		.file 4 "Libraries/FreeRTOS/Source/include/list.h"
 254              		.file 5 "Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 list.c
     /tmp/ccvKZE4q.s:21     .text.vListInitialise:00000000 $t
     /tmp/ccvKZE4q.s:26     .text.vListInitialise:00000000 vListInitialise
     /tmp/ccvKZE4q.s:54     .text.vListInitialiseItem:00000000 $t
     /tmp/ccvKZE4q.s:59     .text.vListInitialiseItem:00000000 vListInitialiseItem
     /tmp/ccvKZE4q.s:75     .text.vListInsertEnd:00000000 $t
     /tmp/ccvKZE4q.s:80     .text.vListInsertEnd:00000000 vListInsertEnd
     /tmp/ccvKZE4q.s:123    .text.vListInsert:00000000 $t
     /tmp/ccvKZE4q.s:128    .text.vListInsert:00000000 vListInsert
     /tmp/ccvKZE4q.s:194    .text.uxListRemove:00000000 $t
     /tmp/ccvKZE4q.s:199    .text.uxListRemove:00000000 uxListRemove
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
